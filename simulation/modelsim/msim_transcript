# Reading C:/altera_lite/16.0/modelsim_ase/tcl/vsim/pref.tcl
# do skeleton_run_msim_rtl_verilog.do
# if {[file exists rtl_work]} {
# 	vdel -lib rtl_work -all
# }
# vlib rtl_work
# vmap work rtl_work
# Model Technology ModelSim ALTERA vmap 10.4d Lib Mapping Utility 2015.12 Dec 30 2015
# vmap work rtl_work 
# Copying C:/altera_lite/16.0/modelsim_ase/win32aloem/../modelsim.ini to modelsim.ini
# Modifying modelsim.ini
# 
# vlog -vlog01compat -work work +incdir+C:/altera_lite/16.0/Projects/CP4_processor_klo14 {C:/altera_lite/16.0/Projects/CP4_processor_klo14/skeleton.v}
# Model Technology ModelSim ALTERA vlog 10.4d Compiler 2015.12 Dec 30 2015
# Start time: 14:34:43 on Apr 05,2017
# vlog -reportprogress 300 -vlog01compat -work work "+incdir+C:/altera_lite/16.0/Projects/CP4_processor_klo14" C:/altera_lite/16.0/Projects/CP4_processor_klo14/skeleton.v 
# -- Compiling module skeleton
# 
# Top level modules:
# 	skeleton
# End time: 14:34:43 on Apr 05,2017, Elapsed time: 0:00:00
# Errors: 0, Warnings: 0
# vlog -vlog01compat -work work +incdir+C:/altera_lite/16.0/Projects/CP4_processor_klo14 {C:/altera_lite/16.0/Projects/CP4_processor_klo14/pll.v}
# Model Technology ModelSim ALTERA vlog 10.4d Compiler 2015.12 Dec 30 2015
# Start time: 14:34:43 on Apr 05,2017
# vlog -reportprogress 300 -vlog01compat -work work "+incdir+C:/altera_lite/16.0/Projects/CP4_processor_klo14" C:/altera_lite/16.0/Projects/CP4_processor_klo14/pll.v 
# -- Compiling module pll
# 
# Top level modules:
# 	pll
# End time: 14:34:44 on Apr 05,2017, Elapsed time: 0:00:01
# Errors: 0, Warnings: 0
# vlog -vlog01compat -work work +incdir+C:/altera_lite/16.0/Projects/CP4_processor_klo14 {C:/altera_lite/16.0/Projects/CP4_processor_klo14/imem.v}
# Model Technology ModelSim ALTERA vlog 10.4d Compiler 2015.12 Dec 30 2015
# Start time: 14:34:44 on Apr 05,2017
# vlog -reportprogress 300 -vlog01compat -work work "+incdir+C:/altera_lite/16.0/Projects/CP4_processor_klo14" C:/altera_lite/16.0/Projects/CP4_processor_klo14/imem.v 
# -- Compiling module imem
# 
# Top level modules:
# 	imem
# End time: 14:34:44 on Apr 05,2017, Elapsed time: 0:00:00
# Errors: 0, Warnings: 0
# vlog -vlog01compat -work work +incdir+C:/altera_lite/16.0/Projects/CP4_processor_klo14 {C:/altera_lite/16.0/Projects/CP4_processor_klo14/dmem.v}
# Model Technology ModelSim ALTERA vlog 10.4d Compiler 2015.12 Dec 30 2015
# Start time: 14:34:44 on Apr 05,2017
# vlog -reportprogress 300 -vlog01compat -work work "+incdir+C:/altera_lite/16.0/Projects/CP4_processor_klo14" C:/altera_lite/16.0/Projects/CP4_processor_klo14/dmem.v 
# -- Compiling module dmem
# 
# Top level modules:
# 	dmem
# End time: 14:34:44 on Apr 05,2017, Elapsed time: 0:00:00
# Errors: 0, Warnings: 0
# vlog -vlog01compat -work work +incdir+C:/altera_lite/16.0/Projects/CP4_processor_klo14 {C:/altera_lite/16.0/Projects/CP4_processor_klo14/CP4_processor_netid.v}
# Model Technology ModelSim ALTERA vlog 10.4d Compiler 2015.12 Dec 30 2015
# Start time: 14:34:44 on Apr 05,2017
# vlog -reportprogress 300 -vlog01compat -work work "+incdir+C:/altera_lite/16.0/Projects/CP4_processor_klo14" C:/altera_lite/16.0/Projects/CP4_processor_klo14/CP4_processor_netid.v 
# -- Compiling module CP4_processor_netid
# -- Compiling module identify_writeReg
# -- Compiling module identify_readRegB
# -- Compiling module control_decoder
# -- Compiling module ir_decoder
# -- Compiling module regfile
# -- Compiling module TRISTATE
# -- Compiling module register_32
# -- Compiling module alu
# -- Compiling module not32
# -- Compiling module or32
# -- Compiling module and32
# -- Compiling module adder
# -- Compiling module predicted_carry
# -- Compiling module ripple_carry_8_bit
# -- Compiling module full_adder
# -- Compiling module n_bit_shifter_left
# -- Compiling module MUX_2_1
# -- Compiling module shift_16
# -- Compiling module shift_8
# -- Compiling module shift_4
# -- Compiling module shift_2
# -- Compiling module shift_1
# -- Compiling module n_bit_shifter_right
# -- Compiling module shift_16_r
# -- Compiling module shift_8_r
# -- Compiling module shift_4_r
# -- Compiling module shift_2_r
# -- Compiling module shift_1_r
# -- Compiling module DECODER5_32
# -- Compiling module DECODER3_8
# -- Compiling module multdiv
# -- Compiling module Multiplier
# -- Compiling module NEGATER
# -- Compiling module REGISTER_64
# -- Compiling module Divider
# -- Compiling module is_zero
# -- Compiling module REGISTER_32
# -- Compiling module counter32
# -- Compiling module MUX_2_1_64bit
# -- Compiling module comparator
# -- Compiling module comparator_5bit
# -- Compiling module subtracter
# -- Compiling module andbits33
# -- Compiling module not33
# -- Compiling module MUX_2_1_32bit
# -- Compiling module MUX_2_1_5bit
# -- Compiling module MUX_2_1_4bit
# -- Compiling module MUX_2_1_1bit
# -- Compiling module MUX_2_1_12bit
# 
# Top level modules:
# 	CP4_processor_netid
# 	MUX_2_1_4bit
# 	MUX_2_1_12bit
# End time: 14:34:44 on Apr 05,2017, Elapsed time: 0:00:00
# Errors: 0, Warnings: 0
# vlog -vlog01compat -work work +incdir+C:/altera_lite/16.0/Projects/CP4_processor_klo14/db {C:/altera_lite/16.0/Projects/CP4_processor_klo14/db/pll_altpll.v}
# Model Technology ModelSim ALTERA vlog 10.4d Compiler 2015.12 Dec 30 2015
# Start time: 14:34:44 on Apr 05,2017
# vlog -reportprogress 300 -vlog01compat -work work "+incdir+C:/altera_lite/16.0/Projects/CP4_processor_klo14/db" C:/altera_lite/16.0/Projects/CP4_processor_klo14/db/pll_altpll.v 
# -- Compiling module pll_altpll
# 
# Top level modules:
# 	pll_altpll
# End time: 14:34:44 on Apr 05,2017, Elapsed time: 0:00:00
# Errors: 0, Warnings: 0
# 
# vlog -vlog01compat -work work +incdir+C:/altera_lite/16.0/Projects/CP4_processor_klo14 {C:/altera_lite/16.0/Projects/CP4_processor_klo14/CP4_processor_tb.v}
# Model Technology ModelSim ALTERA vlog 10.4d Compiler 2015.12 Dec 30 2015
# Start time: 14:34:45 on Apr 05,2017
# vlog -reportprogress 300 -vlog01compat -work work "+incdir+C:/altera_lite/16.0/Projects/CP4_processor_klo14" C:/altera_lite/16.0/Projects/CP4_processor_klo14/CP4_processor_tb.v 
# -- Compiling module CP4_processor_tb
# 
# Top level modules:
# 	CP4_processor_tb
# End time: 14:34:45 on Apr 05,2017, Elapsed time: 0:00:00
# Errors: 0, Warnings: 0
# 
# vsim -t 1ps -L altera_ver -L lpm_ver -L sgate_ver -L altera_mf_ver -L altera_lnsim_ver -L cycloneive_ver -L rtl_work -L work -voptargs="+acc"  CP4_processor_tb
# vsim -t 1ps -L altera_ver -L lpm_ver -L sgate_ver -L altera_mf_ver -L altera_lnsim_ver -L cycloneive_ver -L rtl_work -L work -voptargs=""+acc"" CP4_processor_tb 
# Start time: 14:34:45 on Apr 05,2017
# Loading work.CP4_processor_tb
# Loading work.CP4_processor_netid
# Loading work.register_32
# Loading altera_ver.dffe
# Loading altera_ver.prim_gdff
# Loading work.dmem
# Loading altera_mf_ver.altsyncram
# Loading work.ir_decoder
# Loading work.control_decoder
# Loading work.MUX_2_1_32bit
# Loading work.imem
# Loading work.adder
# Loading work.ripple_carry_8_bit
# Loading work.full_adder
# Loading work.predicted_carry
# Loading work.identify_readRegB
# Loading work.MUX_2_1_5bit
# Loading work.regfile
# Loading work.DECODER5_32
# Loading work.DECODER3_8
# Loading work.MUX_2_1_1bit
# Loading work.comparator_5bit
# Loading work.subtracter
# Loading work.NEGATER
# Loading work.not32
# Loading work.identify_writeReg
# Loading work.comparator
# Loading work.alu
# Loading work.MUX_2_1
# Loading work.and32
# Loading work.or32
# Loading work.n_bit_shifter_left
# Loading work.shift_16
# Loading work.shift_8
# Loading work.shift_4
# Loading work.shift_2
# Loading work.shift_1
# Loading work.n_bit_shifter_right
# Loading work.shift_16_r
# Loading work.shift_8_r
# Loading work.shift_4_r
# Loading work.shift_2_r
# Loading work.shift_1_r
# Loading work.multdiv
# Loading altera_ver.dff
# Loading work.counter32
# Loading work.Multiplier
# Loading work.REGISTER_64
# Loading work.MUX_2_1_64bit
# Loading work.andbits33
# Loading work.not33
# Loading work.Divider
# Loading work.REGISTER_32
# Loading work.is_zero
# Loading altera_mf_ver.altsyncram_body
# Loading altera_mf_ver.ALTERA_DEVICE_FAMILIES
# Loading altera_mf_ver.ALTERA_MF_MEMORY_INITIALIZATION
# Loading work.TRISTATE
# 
# add wave *
# ** Warning: (vsim-WLF-5000) WLF file currently in use: vsim.wlf
# 
#           File in use by: klo14  Hostname: OIT-TEER14  ProcessID: 9796
# 
#           Attempting to use alternate WLF file "./wlft78h6rf".
# ** Warning: (vsim-WLF-5001) Could not open WLF file: vsim.wlf
# 
#           Using alternate file: ./wlft78h6rf
# 
# view structure
# .main_pane.structure.interior.cs.body.struct
# view signals
# .main_pane.objects.interior.cs.body.tree
# run -all
# <<<NEGEDGE>>>
# FETCH STAGE
# curr_PC,          1, next_PC:          2
# chosen PC:    1, PC_jump: 0, PC_branch: 0, intialize PC: 0
# p.F/D F instruction: 00000000100000100001000000000000
# DECODE STAGE
# opcode 00101, rd  1, rs  0, rt  0, shamt  0, aluop 00001, immediate       4, target 000010000000000000000000100
# instrucion: add: 0, addi: 1, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# readAReg:  0, readBReg:  0, writeReg:  0
# EXECUTE STAGE
# DX_X_readA:          0, DX_X_readB:          0
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, real aluop: 00000, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
#  p.readAmemWrite: 0, p.readBmemWrite: 0, p.Amemequal: 1, p.Bmemequal: 1
# p.readAwbWrite: 0, p.readBwbWrite: 0, p.Awbequal: 1, p.Bwbequal: 1
# multdiv_status: 0, toggle_multdiv_status: 0, just_started: 0, multdiv_ready: 0, multdiv_ready,p.start_mul 0, p.start_div 0, p.my_multdiv.count  1
# data_operandA:           0, data_operandB:           0
# X_alu_result:          0, X_multdiv_result:          0
# ot equal: 0, less than: 0
# MEMORY STAGE
# XM_M_op:           0, XM_M_readB:           0
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# dmem_address    0, dmem_data_in:           0 or 00000000000000000000000000000000, dmem_we: 0, dmem_out: 00000000000000001011010100000100, M_bex_taken: 0, curr rstatus:          0, next rstatus:         15
# WRITEBACK STAGE
# MW_W_op:           0, MW_W_data: 00000000000000001011010100000100
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# reg_we: 0, write reg:  0, data           0
# register[1]:           0
# register[2]:           0
# register[3]:           0
# register[4]:           0
# register[5]:           0
# register[6]:           0
# register[7]:           0
# register[8]:           0
# register[9]:           0
# register[10]:           0
# register[11]:           0
# register[12]:           0
# register[13]:           0
# register[14]:           0
# register[15]:           0
# register[16]:           0
# register[17]:           0
# register[18]:           0
# register[19]:           0
# register[20]:           0
# register[21]:           0
# register[22]:           0
# register[23]:           0
# register[24]:           0
# register[25]:           0
# register[26]:           0
# register[27]:           0
# register[28]:           0
# register[29]:           0
# register[30]:           0
# register[31]:           0
#  p.PC_we 1,p.FD_we 1,p.DX_we 1,p.XM_we 1,p.MW_we 1
# <<<NEGEDGE>>>
# FETCH STAGE
# curr_PC,          2, next_PC:          3
# chosen PC:    2, PC_jump: 0, PC_branch: 0, intialize PC: 0
# p.F/D F instruction: 00000000100000100001000000000000
# DECODE STAGE
# opcode 00000, rd  2, rs  1, rt  1, shamt  0, aluop 00000, immediate    4096, target 000100000100001000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# readAReg:  1, readBReg:  1, writeReg:  0
# EXECUTE STAGE
# DX_X_readA:          0, DX_X_readB:          0
# opcode 00101, rd  1, rs  0, rt  0, shamt  0, real aluop: 00000, aluop 00001, immediate       4, target 000010000000000000000000100
# instrucion: add: 0, addi: 1, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
#  p.readAmemWrite: 0, p.readBmemWrite: 0, p.Amemequal: 1, p.Bmemequal: 1
# p.readAwbWrite: 0, p.readBwbWrite: 0, p.Awbequal: 1, p.Bwbequal: 1
# multdiv_status: 0, toggle_multdiv_status: 0, just_started: 0, multdiv_ready: 0, multdiv_ready,p.start_mul 0, p.start_div 0, p.my_multdiv.count  2
# data_operandA:           0, data_operandB:           4
# X_alu_result:          4, X_multdiv_result:          0
# ot equal: 1, less than: 0
# MEMORY STAGE
# XM_M_op:           0, XM_M_readB:           0
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# dmem_address    0, dmem_data_in:           0 or 00000000000000000000000000000000, dmem_we: 0, dmem_out: 00000000000000001011010100000100, M_bex_taken: 0, curr rstatus:          0, next rstatus:         15
# WRITEBACK STAGE
# MW_W_op:           0, MW_W_data: 00000000000000001011010100000100
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# reg_we: 0, write reg:  0, data           0
# register[1]:           0
# register[2]:           0
# register[3]:           0
# register[4]:           0
# register[5]:           0
# register[6]:           0
# register[7]:           0
# register[8]:           0
# register[9]:           0
# register[10]:           0
# register[11]:           0
# register[12]:           0
# register[13]:           0
# register[14]:           0
# register[15]:           0
# register[16]:           0
# register[17]:           0
# register[18]:           0
# register[19]:           0
# register[20]:           0
# register[21]:           0
# register[22]:           0
# register[23]:           0
# register[24]:           0
# register[25]:           0
# register[26]:           0
# register[27]:           0
# register[28]:           0
# register[29]:           0
# register[30]:           0
# register[31]:           0
#  p.PC_we 1,p.FD_we 1,p.DX_we 1,p.XM_we 1,p.MW_we 1
# <<<NEGEDGE>>>
# FETCH STAGE
# curr_PC,          2, next_PC:          3
# chosen PC:    2, PC_jump: 0, PC_branch: 0, intialize PC: 0
# p.F/D F instruction: 00101000110000100000000000010100
# DECODE STAGE
# opcode 00000, rd  2, rs  1, rt  1, shamt  0, aluop 00000, immediate    4096, target 000100000100001000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# readAReg:  1, readBReg:  1, writeReg:  0
# EXECUTE STAGE
# DX_X_readA:          0, DX_X_readB:          0
# opcode 00101, rd  1, rs  0, rt  0, shamt  0, real aluop: 00000, aluop 00001, immediate       4, target 000010000000000000000000100
# instrucion: add: 0, addi: 1, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
#  p.readAmemWrite: 0, p.readBmemWrite: 0, p.Amemequal: 1, p.Bmemequal: 1
# p.readAwbWrite: 0, p.readBwbWrite: 0, p.Awbequal: 1, p.Bwbequal: 1
# multdiv_status: 0, toggle_multdiv_status: 0, just_started: 0, multdiv_ready: 0, multdiv_ready,p.start_mul 0, p.start_div 0, p.my_multdiv.count  2
# data_operandA:           0, data_operandB:           4
# X_alu_result:          4, X_multdiv_result:          0
# ot equal: 1, less than: 0
# MEMORY STAGE
# XM_M_op:           0, XM_M_readB:           0
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# dmem_address    0, dmem_data_in:           0 or 00000000000000000000000000000000, dmem_we: 0, dmem_out: 00000000000000001011010100000100, M_bex_taken: 0, curr rstatus:          0, next rstatus:         15
# WRITEBACK STAGE
# MW_W_op:           0, MW_W_data: 00000000000000001011010100000100
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# reg_we: 0, write reg:  0, data           0
# register[1]:           0
# register[2]:           0
# register[3]:           0
# register[4]:           0
# register[5]:           0
# register[6]:           0
# register[7]:           0
# register[8]:           0
# register[9]:           0
# register[10]:           0
# register[11]:           0
# register[12]:           0
# register[13]:           0
# register[14]:           0
# register[15]:           0
# register[16]:           0
# register[17]:           0
# register[18]:           0
# register[19]:           0
# register[20]:           0
# register[21]:           0
# register[22]:           0
# register[23]:           0
# register[24]:           0
# register[25]:           0
# register[26]:           0
# register[27]:           0
# register[28]:           0
# register[29]:           0
# register[30]:           0
# register[31]:           0
#  p.PC_we 1,p.FD_we 1,p.DX_we 1,p.XM_we 1,p.MW_we 1
# <<<NEGEDGE>>>
# FETCH STAGE
# curr_PC,          3, next_PC:          4
# chosen PC:    3, PC_jump: 0, PC_branch: 0, intialize PC: 0
# p.F/D F instruction: 00101000110000100000000000010100
# DECODE STAGE
# opcode 00101, rd  3, rs  1, rt  0, shamt  0, aluop 00101, immediate      20, target 000110000100000000000010100
# instrucion: add: 0, addi: 1, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# readAReg:  1, readBReg:  0, writeReg:  0
# EXECUTE STAGE
# DX_X_readA:          0, DX_X_readB:          0
# opcode 00000, rd  2, rs  1, rt  1, shamt  0, real aluop: 00000, aluop 00000, immediate    4096, target 000100000100001000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
#  p.readAmemWrite: 1, p.readBmemWrite: 1, p.Amemequal: 1, p.Bmemequal: 1
# p.readAwbWrite: 0, p.readBwbWrite: 0, p.Awbequal: 0, p.Bwbequal: 0
# multdiv_status: 0, toggle_multdiv_status: 0, just_started: 0, multdiv_ready: 0, multdiv_ready,p.start_mul 0, p.start_div 0, p.my_multdiv.count  3
# data_operandA:           4, data_operandB:           4
# X_alu_result:          8, X_multdiv_result:          0
# ot equal: 1, less than: 0
# MEMORY STAGE
# XM_M_op:           4, XM_M_readB:           0
# opcode 00101, rd  1, rs  0, rt  0, shamt  0, aluop 00001, immediate       4, target 000010000000000000000000100
# instrucion: add: 0, addi: 1, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# dmem_address    4, dmem_data_in:           0 or 00000000000000000000000000000000, dmem_we: 0, dmem_out: 00000000000000001011010100000100, M_bex_taken: 0, curr rstatus:          0, next rstatus:         15
# WRITEBACK STAGE
# MW_W_op:           0, MW_W_data: 00000000000000001011010100000100
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# reg_we: 0, write reg:  0, data           0
# register[1]:           0
# register[2]:           0
# register[3]:           0
# register[4]:           0
# register[5]:           0
# register[6]:           0
# register[7]:           0
# register[8]:           0
# register[9]:           0
# register[10]:           0
# register[11]:           0
# register[12]:           0
# register[13]:           0
# register[14]:           0
# register[15]:           0
# register[16]:           0
# register[17]:           0
# register[18]:           0
# register[19]:           0
# register[20]:           0
# register[21]:           0
# register[22]:           0
# register[23]:           0
# register[24]:           0
# register[25]:           0
# register[26]:           0
# register[27]:           0
# register[28]:           0
# register[29]:           0
# register[30]:           0
# register[31]:           0
#  p.PC_we 1,p.FD_we 1,p.DX_we 1,p.XM_we 1,p.MW_we 1
# <<<NEGEDGE>>>
# FETCH STAGE
# curr_PC,          3, next_PC:          4
# chosen PC:    3, PC_jump: 0, PC_branch: 0, intialize PC: 0
# p.F/D F instruction: 00000001000001100010000000000100
# DECODE STAGE
# opcode 00101, rd  3, rs  1, rt  0, shamt  0, aluop 00101, immediate      20, target 000110000100000000000010100
# instrucion: add: 0, addi: 1, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# readAReg:  1, readBReg:  0, writeReg:  0
# EXECUTE STAGE
# DX_X_readA:          0, DX_X_readB:          0
# opcode 00000, rd  2, rs  1, rt  1, shamt  0, real aluop: 00000, aluop 00000, immediate    4096, target 000100000100001000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
#  p.readAmemWrite: 1, p.readBmemWrite: 1, p.Amemequal: 1, p.Bmemequal: 1
# p.readAwbWrite: 0, p.readBwbWrite: 0, p.Awbequal: 0, p.Bwbequal: 0
# multdiv_status: 0, toggle_multdiv_status: 0, just_started: 0, multdiv_ready: 0, multdiv_ready,p.start_mul 0, p.start_div 0, p.my_multdiv.count  3
# data_operandA:           4, data_operandB:           4
# X_alu_result:          8, X_multdiv_result:          0
# ot equal: 1, less than: 0
# MEMORY STAGE
# XM_M_op:           4, XM_M_readB:           0
# opcode 00101, rd  1, rs  0, rt  0, shamt  0, aluop 00001, immediate       4, target 000010000000000000000000100
# instrucion: add: 0, addi: 1, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# dmem_address    4, dmem_data_in:           0 or 00000000000000000000000000000000, dmem_we: 0, dmem_out: 00000000000000000000000001000001, M_bex_taken: 0, curr rstatus:          0, next rstatus:         15
# WRITEBACK STAGE
# MW_W_op:           0, MW_W_data: 00000000000000001011010100000100
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# reg_we: 0, write reg:  0, data           0
# register[1]:           0
# register[2]:           0
# register[3]:           0
# register[4]:           0
# register[5]:           0
# register[6]:           0
# register[7]:           0
# register[8]:           0
# register[9]:           0
# register[10]:           0
# register[11]:           0
# register[12]:           0
# register[13]:           0
# register[14]:           0
# register[15]:           0
# register[16]:           0
# register[17]:           0
# register[18]:           0
# register[19]:           0
# register[20]:           0
# register[21]:           0
# register[22]:           0
# register[23]:           0
# register[24]:           0
# register[25]:           0
# register[26]:           0
# register[27]:           0
# register[28]:           0
# register[29]:           0
# register[30]:           0
# register[31]:           0
#  p.PC_we 1,p.FD_we 1,p.DX_we 1,p.XM_we 1,p.MW_we 1
# <<<NEGEDGE>>>
# FETCH STAGE
# curr_PC,          4, next_PC:          5
# chosen PC:    4, PC_jump: 0, PC_branch: 0, intialize PC: 0
# p.F/D F instruction: 00000001000001100010000000000100
# DECODE STAGE
# opcode 00000, rd  4, rs  3, rt  2, shamt  0, aluop 00001, immediate    8196, target 001000001100010000000000100
# instrucion: add: 0, addi: 0, sub: 1, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# readAReg:  3, readBReg:  2, writeReg:  1
# EXECUTE STAGE
# DX_X_readA:          0, DX_X_readB:          0
# opcode 00101, rd  3, rs  1, rt  0, shamt  0, real aluop: 00000, aluop 00101, immediate      20, target 000110000100000000000010100
# instrucion: add: 0, addi: 1, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
#  p.readAmemWrite: 0, p.readBmemWrite: 0, p.Amemequal: 0, p.Bmemequal: 0
# p.readAwbWrite: 1, p.readBwbWrite: 0, p.Awbequal: 1, p.Bwbequal: 0
# multdiv_status: 0, toggle_multdiv_status: 0, just_started: 0, multdiv_ready: 0, multdiv_ready,p.start_mul 0, p.start_div 0, p.my_multdiv.count  4
# data_operandA:           4, data_operandB:          20
# X_alu_result:         24, X_multdiv_result:          0
# ot equal: 1, less than: 0
# MEMORY STAGE
# XM_M_op:           8, XM_M_readB:           4
# opcode 00000, rd  2, rs  1, rt  1, shamt  0, aluop 00000, immediate    4096, target 000100000100001000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# dmem_address    8, dmem_data_in:           4 or 00000000000000000000000000000100, dmem_we: 0, dmem_out: 00000000000000000000000001000001, M_bex_taken: 0, curr rstatus:          0, next rstatus:         15
# WRITEBACK STAGE
# MW_W_op:           4, MW_W_data: 00000000000000000000000001000001
# opcode 00101, rd  1, rs  0, rt  0, shamt  0, aluop 00001, immediate       4, target 000010000000000000000000100
# instrucion: add: 0, addi: 1, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# reg_we: 1, write reg:  1, data           4
# register[1]:           0
# register[2]:           0
# register[3]:           0
# register[4]:           0
# register[5]:           0
# register[6]:           0
# register[7]:           0
# register[8]:           0
# register[9]:           0
# register[10]:           0
# register[11]:           0
# register[12]:           0
# register[13]:           0
# register[14]:           0
# register[15]:           0
# register[16]:           0
# register[17]:           0
# register[18]:           0
# register[19]:           0
# register[20]:           0
# register[21]:           0
# register[22]:           0
# register[23]:           0
# register[24]:           0
# register[25]:           0
# register[26]:           0
# register[27]:           0
# register[28]:           0
# register[29]:           0
# register[30]:           0
# register[31]:           0
#  p.PC_we 1,p.FD_we 1,p.DX_we 1,p.XM_we 1,p.MW_we 1
# <<<NEGEDGE>>>
# FETCH STAGE
# curr_PC,          4, next_PC:          5
# chosen PC:    4, PC_jump: 0, PC_branch: 0, intialize PC: 0
# p.F/D F instruction: 00000001010010000001000000001000
# DECODE STAGE
# opcode 00000, rd  4, rs  3, rt  2, shamt  0, aluop 00001, immediate    8196, target 001000001100010000000000100
# instrucion: add: 0, addi: 0, sub: 1, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# readAReg:  3, readBReg:  2, writeReg:  1
# EXECUTE STAGE
# DX_X_readA:          0, DX_X_readB:          0
# opcode 00101, rd  3, rs  1, rt  0, shamt  0, real aluop: 00000, aluop 00101, immediate      20, target 000110000100000000000010100
# instrucion: add: 0, addi: 1, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
#  p.readAmemWrite: 0, p.readBmemWrite: 0, p.Amemequal: 0, p.Bmemequal: 0
# p.readAwbWrite: 1, p.readBwbWrite: 0, p.Awbequal: 1, p.Bwbequal: 0
# multdiv_status: 0, toggle_multdiv_status: 0, just_started: 0, multdiv_ready: 0, multdiv_ready,p.start_mul 0, p.start_div 0, p.my_multdiv.count  4
# data_operandA:           4, data_operandB:          20
# X_alu_result:         24, X_multdiv_result:          0
# ot equal: 1, less than: 0
# MEMORY STAGE
# XM_M_op:           8, XM_M_readB:           4
# opcode 00000, rd  2, rs  1, rt  1, shamt  0, aluop 00000, immediate    4096, target 000100000100001000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# dmem_address    8, dmem_data_in:           4 or 00000000000000000000000000000100, dmem_we: 0, dmem_out: 00000000000000000000000001010011, M_bex_taken: 0, curr rstatus:          0, next rstatus:         15
# WRITEBACK STAGE
# MW_W_op:           4, MW_W_data: 00000000000000000000000001000001
# opcode 00101, rd  1, rs  0, rt  0, shamt  0, aluop 00001, immediate       4, target 000010000000000000000000100
# instrucion: add: 0, addi: 1, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# reg_we: 1, write reg:  1, data           4
# register[1]:           4
# register[2]:           0
# register[3]:           0
# register[4]:           0
# register[5]:           0
# register[6]:           0
# register[7]:           0
# register[8]:           0
# register[9]:           0
# register[10]:           0
# register[11]:           0
# register[12]:           0
# register[13]:           0
# register[14]:           0
# register[15]:           0
# register[16]:           0
# register[17]:           0
# register[18]:           0
# register[19]:           0
# register[20]:           0
# register[21]:           0
# register[22]:           0
# register[23]:           0
# register[24]:           0
# register[25]:           0
# register[26]:           0
# register[27]:           0
# register[28]:           0
# register[29]:           0
# register[30]:           0
# register[31]:           0
#  p.PC_we 1,p.FD_we 1,p.DX_we 1,p.XM_we 1,p.MW_we 1
# <<<NEGEDGE>>>
# FETCH STAGE
# curr_PC,          5, next_PC:          6
# chosen PC:    5, PC_jump: 0, PC_branch: 0, intialize PC: 0
# p.F/D F instruction: 00000001010010000001000000001000
# DECODE STAGE
# opcode 00000, rd  5, rs  4, rt  1, shamt  0, aluop 00010, immediate    4104, target 001010010000001000000001000
# instrucion: add: 0, addi: 0, sub: 0, and: 1, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# readAReg:  4, readBReg:  1, writeReg:  2
# EXECUTE STAGE
# DX_X_readA:          0, DX_X_readB:          0
# opcode 00000, rd  4, rs  3, rt  2, shamt  0, real aluop: 00001, aluop 00001, immediate    8196, target 001000001100010000000000100
# instrucion: add: 0, addi: 0, sub: 1, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
#  p.readAmemWrite: 1, p.readBmemWrite: 0, p.Amemequal: 1, p.Bmemequal: 0
# p.readAwbWrite: 0, p.readBwbWrite: 1, p.Awbequal: 0, p.Bwbequal: 1
# multdiv_status: 0, toggle_multdiv_status: 0, just_started: 0, multdiv_ready: 0, multdiv_ready,p.start_mul 0, p.start_div 0, p.my_multdiv.count  5
# data_operandA:          24, data_operandB:           8
# X_alu_result:         16, X_multdiv_result:          0
# ot equal: 1, less than: 0
# MEMORY STAGE
# XM_M_op:          24, XM_M_readB:           0
# opcode 00101, rd  3, rs  1, rt  0, shamt  0, aluop 00101, immediate      20, target 000110000100000000000010100
# instrucion: add: 0, addi: 1, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# dmem_address   24, dmem_data_in:           0 or 00000000000000000000000000000000, dmem_we: 0, dmem_out: 00000000000000000000000001010011, M_bex_taken: 0, curr rstatus:          0, next rstatus:         15
# WRITEBACK STAGE
# MW_W_op:           8, MW_W_data: 00000000000000000000000001010011
# opcode 00000, rd  2, rs  1, rt  1, shamt  0, aluop 00000, immediate    4096, target 000100000100001000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# reg_we: 1, write reg:  2, data           8
# register[1]:           4
# register[2]:           0
# register[3]:           0
# register[4]:           0
# register[5]:           0
# register[6]:           0
# register[7]:           0
# register[8]:           0
# register[9]:           0
# register[10]:           0
# register[11]:           0
# register[12]:           0
# register[13]:           0
# register[14]:           0
# register[15]:           0
# register[16]:           0
# register[17]:           0
# register[18]:           0
# register[19]:           0
# register[20]:           0
# register[21]:           0
# register[22]:           0
# register[23]:           0
# register[24]:           0
# register[25]:           0
# register[26]:           0
# register[27]:           0
# register[28]:           0
# register[29]:           0
# register[30]:           0
# register[31]:           0
#  p.PC_we 1,p.FD_we 1,p.DX_we 1,p.XM_we 1,p.MW_we 1
# <<<NEGEDGE>>>
# FETCH STAGE
# curr_PC,          5, next_PC:          6
# chosen PC:    5, PC_jump: 0, PC_branch: 0, intialize PC: 0
# p.F/D F instruction: 00000001100010100010000000001100
# DECODE STAGE
# opcode 00000, rd  5, rs  4, rt  1, shamt  0, aluop 00010, immediate    4104, target 001010010000001000000001000
# instrucion: add: 0, addi: 0, sub: 0, and: 1, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# readAReg:  4, readBReg:  1, writeReg:  2
# EXECUTE STAGE
# DX_X_readA:          0, DX_X_readB:          0
# opcode 00000, rd  4, rs  3, rt  2, shamt  0, real aluop: 00001, aluop 00001, immediate    8196, target 001000001100010000000000100
# instrucion: add: 0, addi: 0, sub: 1, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
#  p.readAmemWrite: 1, p.readBmemWrite: 0, p.Amemequal: 1, p.Bmemequal: 0
# p.readAwbWrite: 0, p.readBwbWrite: 1, p.Awbequal: 0, p.Bwbequal: 1
# multdiv_status: 0, toggle_multdiv_status: 0, just_started: 0, multdiv_ready: 0, multdiv_ready,p.start_mul 0, p.start_div 0, p.my_multdiv.count  5
# data_operandA:          24, data_operandB:           8
# X_alu_result:         16, X_multdiv_result:          0
# ot equal: 1, less than: 0
# MEMORY STAGE
# XM_M_op:          24, XM_M_readB:           0
# opcode 00101, rd  3, rs  1, rt  0, shamt  0, aluop 00101, immediate      20, target 000110000100000000000010100
# instrucion: add: 0, addi: 1, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# dmem_address   24, dmem_data_in:           0 or 00000000000000000000000000000000, dmem_we: 0, dmem_out: 00000000000000000000000000000000, M_bex_taken: 0, curr rstatus:          0, next rstatus:         15
# WRITEBACK STAGE
# MW_W_op:           8, MW_W_data: 00000000000000000000000001010011
# opcode 00000, rd  2, rs  1, rt  1, shamt  0, aluop 00000, immediate    4096, target 000100000100001000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# reg_we: 1, write reg:  2, data           8
# register[1]:           4
# register[2]:           8
# register[3]:           0
# register[4]:           0
# register[5]:           0
# register[6]:           0
# register[7]:           0
# register[8]:           0
# register[9]:           0
# register[10]:           0
# register[11]:           0
# register[12]:           0
# register[13]:           0
# register[14]:           0
# register[15]:           0
# register[16]:           0
# register[17]:           0
# register[18]:           0
# register[19]:           0
# register[20]:           0
# register[21]:           0
# register[22]:           0
# register[23]:           0
# register[24]:           0
# register[25]:           0
# register[26]:           0
# register[27]:           0
# register[28]:           0
# register[29]:           0
# register[30]:           0
# register[31]:           0
#  p.PC_we 1,p.FD_we 1,p.DX_we 1,p.XM_we 1,p.MW_we 1
# <<<NEGEDGE>>>
# FETCH STAGE
# curr_PC,          6, next_PC:          7
# chosen PC:    6, PC_jump: 0, PC_branch: 0, intialize PC: 0
# p.F/D F instruction: 00000001100010100010000000001100
# DECODE STAGE
# opcode 00000, rd  6, rs  5, rt  2, shamt  0, aluop 00011, immediate    8204, target 001100010100010000000001100
# instrucion: add: 0, addi: 0, sub: 0, and: 0, or: 1, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# readAReg:  5, readBReg:  2, writeReg:  3
# EXECUTE STAGE
# DX_X_readA:          0, DX_X_readB:          4
# opcode 00000, rd  5, rs  4, rt  1, shamt  0, real aluop: 00010, aluop 00010, immediate    4104, target 001010010000001000000001000
# instrucion: add: 0, addi: 0, sub: 0, and: 1, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
#  p.readAmemWrite: 1, p.readBmemWrite: 0, p.Amemequal: 1, p.Bmemequal: 0
# p.readAwbWrite: 0, p.readBwbWrite: 0, p.Awbequal: 0, p.Bwbequal: 0
# multdiv_status: 0, toggle_multdiv_status: 0, just_started: 0, multdiv_ready: 0, multdiv_ready,p.start_mul 0, p.start_div 0, p.my_multdiv.count  6
# data_operandA:          16, data_operandB:           4
# X_alu_result:          0, X_multdiv_result:          0
# ot equal: 1, less than: 0
# MEMORY STAGE
# XM_M_op:          16, XM_M_readB:           8
# opcode 00000, rd  4, rs  3, rt  2, shamt  0, aluop 00001, immediate    8196, target 001000001100010000000000100
# instrucion: add: 0, addi: 0, sub: 1, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# dmem_address   16, dmem_data_in:           8 or 00000000000000000000000000001000, dmem_we: 0, dmem_out: 00000000000000000000000000000000, M_bex_taken: 0, curr rstatus:          0, next rstatus:         15
# WRITEBACK STAGE
# MW_W_op:          24, MW_W_data: 00000000000000000000000000000000
# opcode 00101, rd  3, rs  1, rt  0, shamt  0, aluop 00101, immediate      20, target 000110000100000000000010100
# instrucion: add: 0, addi: 1, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# reg_we: 1, write reg:  3, data          24
# register[1]:           4
# register[2]:           8
# register[3]:           0
# register[4]:           0
# register[5]:           0
# register[6]:           0
# register[7]:           0
# register[8]:           0
# register[9]:           0
# register[10]:           0
# register[11]:           0
# register[12]:           0
# register[13]:           0
# register[14]:           0
# register[15]:           0
# register[16]:           0
# register[17]:           0
# register[18]:           0
# register[19]:           0
# register[20]:           0
# register[21]:           0
# register[22]:           0
# register[23]:           0
# register[24]:           0
# register[25]:           0
# register[26]:           0
# register[27]:           0
# register[28]:           0
# register[29]:           0
# register[30]:           0
# register[31]:           0
#  p.PC_we 1,p.FD_we 1,p.DX_we 1,p.XM_we 1,p.MW_we 1
# <<<NEGEDGE>>>
# FETCH STAGE
# curr_PC,          6, next_PC:          7
# chosen PC:    6, PC_jump: 0, PC_branch: 0, intialize PC: 0
# p.F/D F instruction: 00000001110010000000000100010000
# DECODE STAGE
# opcode 00000, rd  6, rs  5, rt  2, shamt  0, aluop 00011, immediate    8204, target 001100010100010000000001100
# instrucion: add: 0, addi: 0, sub: 0, and: 0, or: 1, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# readAReg:  5, readBReg:  2, writeReg:  3
# EXECUTE STAGE
# DX_X_readA:          0, DX_X_readB:          4
# opcode 00000, rd  5, rs  4, rt  1, shamt  0, real aluop: 00010, aluop 00010, immediate    4104, target 001010010000001000000001000
# instrucion: add: 0, addi: 0, sub: 0, and: 1, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
#  p.readAmemWrite: 1, p.readBmemWrite: 0, p.Amemequal: 1, p.Bmemequal: 0
# p.readAwbWrite: 0, p.readBwbWrite: 0, p.Awbequal: 0, p.Bwbequal: 0
# multdiv_status: 0, toggle_multdiv_status: 0, just_started: 0, multdiv_ready: 0, multdiv_ready,p.start_mul 0, p.start_div 0, p.my_multdiv.count  6
# data_operandA:          16, data_operandB:           4
# X_alu_result:          0, X_multdiv_result:          0
# ot equal: 1, less than: 0
# MEMORY STAGE
# XM_M_op:          16, XM_M_readB:           8
# opcode 00000, rd  4, rs  3, rt  2, shamt  0, aluop 00001, immediate    8196, target 001000001100010000000000100
# instrucion: add: 0, addi: 0, sub: 1, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# dmem_address   16, dmem_data_in:           8 or 00000000000000000000000000001000, dmem_we: 0, dmem_out: 00000000000000000000000001000001, M_bex_taken: 0, curr rstatus:          0, next rstatus:         15
# WRITEBACK STAGE
# MW_W_op:          24, MW_W_data: 00000000000000000000000000000000
# opcode 00101, rd  3, rs  1, rt  0, shamt  0, aluop 00101, immediate      20, target 000110000100000000000010100
# instrucion: add: 0, addi: 1, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# reg_we: 1, write reg:  3, data          24
# register[1]:           4
# register[2]:           8
# register[3]:          24
# register[4]:           0
# register[5]:           0
# register[6]:           0
# register[7]:           0
# register[8]:           0
# register[9]:           0
# register[10]:           0
# register[11]:           0
# register[12]:           0
# register[13]:           0
# register[14]:           0
# register[15]:           0
# register[16]:           0
# register[17]:           0
# register[18]:           0
# register[19]:           0
# register[20]:           0
# register[21]:           0
# register[22]:           0
# register[23]:           0
# register[24]:           0
# register[25]:           0
# register[26]:           0
# register[27]:           0
# register[28]:           0
# register[29]:           0
# register[30]:           0
# register[31]:           0
#  p.PC_we 1,p.FD_we 1,p.DX_we 1,p.XM_we 1,p.MW_we 1
# <<<NEGEDGE>>>
# FETCH STAGE
# curr_PC,          7, next_PC:          8
# chosen PC:    7, PC_jump: 0, PC_branch: 0, intialize PC: 0
# p.F/D F instruction: 00000001110010000000000100010000
# DECODE STAGE
# opcode 00000, rd  7, rs  4, rt  0, shamt  2, aluop 00100, immediate     272, target 001110010000000000100010000
# instrucion: add: 0, addi: 0, sub: 0, and: 0, or: 0, sll: 1, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# readAReg:  4, readBReg:  0, writeReg:  4
# EXECUTE STAGE
# DX_X_readA:          0, DX_X_readB:          8
# opcode 00000, rd  6, rs  5, rt  2, shamt  0, real aluop: 00011, aluop 00011, immediate    8204, target 001100010100010000000001100
# instrucion: add: 0, addi: 0, sub: 0, and: 0, or: 1, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
#  p.readAmemWrite: 1, p.readBmemWrite: 0, p.Amemequal: 1, p.Bmemequal: 0
# p.readAwbWrite: 0, p.readBwbWrite: 0, p.Awbequal: 0, p.Bwbequal: 0
# multdiv_status: 0, toggle_multdiv_status: 0, just_started: 0, multdiv_ready: 0, multdiv_ready,p.start_mul 0, p.start_div 0, p.my_multdiv.count  7
# data_operandA:           0, data_operandB:           8
# X_alu_result:          8, X_multdiv_result:          0
# ot equal: 1, less than: 0
# MEMORY STAGE
# XM_M_op:           0, XM_M_readB:           4
# opcode 00000, rd  5, rs  4, rt  1, shamt  0, aluop 00010, immediate    4104, target 001010010000001000000001000
# instrucion: add: 0, addi: 0, sub: 0, and: 1, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# dmem_address    0, dmem_data_in:           4 or 00000000000000000000000000000100, dmem_we: 0, dmem_out: 00000000000000000000000001000001, M_bex_taken: 0, curr rstatus:          0, next rstatus:         15
# WRITEBACK STAGE
# MW_W_op:          16, MW_W_data: 00000000000000000000000001000001
# opcode 00000, rd  4, rs  3, rt  2, shamt  0, aluop 00001, immediate    8196, target 001000001100010000000000100
# instrucion: add: 0, addi: 0, sub: 1, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# reg_we: 1, write reg:  4, data          16
# register[1]:           4
# register[2]:           8
# register[3]:          24
# register[4]:           0
# register[5]:           0
# register[6]:           0
# register[7]:           0
# register[8]:           0
# register[9]:           0
# register[10]:           0
# register[11]:           0
# register[12]:           0
# register[13]:           0
# register[14]:           0
# register[15]:           0
# register[16]:           0
# register[17]:           0
# register[18]:           0
# register[19]:           0
# register[20]:           0
# register[21]:           0
# register[22]:           0
# register[23]:           0
# register[24]:           0
# register[25]:           0
# register[26]:           0
# register[27]:           0
# register[28]:           0
# register[29]:           0
# register[30]:           0
# register[31]:           0
#  p.PC_we 1,p.FD_we 1,p.DX_we 1,p.XM_we 1,p.MW_we 1
# <<<NEGEDGE>>>
# FETCH STAGE
# curr_PC,          7, next_PC:          8
# chosen PC:    7, PC_jump: 0, PC_branch: 0, intialize PC: 0
# p.F/D F instruction: 00000010000010000000000100010100
# DECODE STAGE
# opcode 00000, rd  7, rs  4, rt  0, shamt  2, aluop 00100, immediate     272, target 001110010000000000100010000
# instrucion: add: 0, addi: 0, sub: 0, and: 0, or: 0, sll: 1, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# readAReg:  4, readBReg:  0, writeReg:  4
# EXECUTE STAGE
# DX_X_readA:          0, DX_X_readB:          8
# opcode 00000, rd  6, rs  5, rt  2, shamt  0, real aluop: 00011, aluop 00011, immediate    8204, target 001100010100010000000001100
# instrucion: add: 0, addi: 0, sub: 0, and: 0, or: 1, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
#  p.readAmemWrite: 1, p.readBmemWrite: 0, p.Amemequal: 1, p.Bmemequal: 0
# p.readAwbWrite: 0, p.readBwbWrite: 0, p.Awbequal: 0, p.Bwbequal: 0
# multdiv_status: 0, toggle_multdiv_status: 0, just_started: 0, multdiv_ready: 0, multdiv_ready,p.start_mul 0, p.start_div 0, p.my_multdiv.count  7
# data_operandA:           0, data_operandB:           8
# X_alu_result:          8, X_multdiv_result:          0
# ot equal: 1, less than: 0
# MEMORY STAGE
# XM_M_op:           0, XM_M_readB:           4
# opcode 00000, rd  5, rs  4, rt  1, shamt  0, aluop 00010, immediate    4104, target 001010010000001000000001000
# instrucion: add: 0, addi: 0, sub: 0, and: 1, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# dmem_address    0, dmem_data_in:           4 or 00000000000000000000000000000100, dmem_we: 0, dmem_out: 00000000000000001011010100000100, M_bex_taken: 0, curr rstatus:          0, next rstatus:         15
# WRITEBACK STAGE
# MW_W_op:          16, MW_W_data: 00000000000000000000000001000001
# opcode 00000, rd  4, rs  3, rt  2, shamt  0, aluop 00001, immediate    8196, target 001000001100010000000000100
# instrucion: add: 0, addi: 0, sub: 1, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# reg_we: 1, write reg:  4, data          16
# register[1]:           4
# register[2]:           8
# register[3]:          24
# register[4]:          16
# register[5]:           0
# register[6]:           0
# register[7]:           0
# register[8]:           0
# register[9]:           0
# register[10]:           0
# register[11]:           0
# register[12]:           0
# register[13]:           0
# register[14]:           0
# register[15]:           0
# register[16]:           0
# register[17]:           0
# register[18]:           0
# register[19]:           0
# register[20]:           0
# register[21]:           0
# register[22]:           0
# register[23]:           0
# register[24]:           0
# register[25]:           0
# register[26]:           0
# register[27]:           0
# register[28]:           0
# register[29]:           0
# register[30]:           0
# register[31]:           0
#  p.PC_we 1,p.FD_we 1,p.DX_we 1,p.XM_we 1,p.MW_we 1
# <<<NEGEDGE>>>
# FETCH STAGE
# curr_PC,          8, next_PC:          9
# chosen PC:    8, PC_jump: 0, PC_branch: 0, intialize PC: 0
# p.F/D F instruction: 00000010000010000000000100010100
# DECODE STAGE
# opcode 00000, rd  8, rs  4, rt  0, shamt  2, aluop 00101, immediate     276, target 010000010000000000100010100
# instrucion: add: 0, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 1, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# readAReg:  4, readBReg:  0, writeReg:  5
# EXECUTE STAGE
# DX_X_readA:         16, DX_X_readB:          0
# opcode 00000, rd  7, rs  4, rt  0, shamt  2, real aluop: 00100, aluop 00100, immediate     272, target 001110010000000000100010000
# instrucion: add: 0, addi: 0, sub: 0, and: 0, or: 0, sll: 1, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
#  p.readAmemWrite: 0, p.readBmemWrite: 0, p.Amemequal: 0, p.Bmemequal: 0
# p.readAwbWrite: 0, p.readBwbWrite: 0, p.Awbequal: 0, p.Bwbequal: 0
# multdiv_status: 0, toggle_multdiv_status: 0, just_started: 0, multdiv_ready: 0, multdiv_ready,p.start_mul 0, p.start_div 0, p.my_multdiv.count  8
# data_operandA:          16, data_operandB:           0
# X_alu_result:         64, X_multdiv_result:          0
# ot equal: 1, less than: 0
# MEMORY STAGE
# XM_M_op:           8, XM_M_readB:           8
# opcode 00000, rd  6, rs  5, rt  2, shamt  0, aluop 00011, immediate    8204, target 001100010100010000000001100
# instrucion: add: 0, addi: 0, sub: 0, and: 0, or: 1, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# dmem_address    8, dmem_data_in:           8 or 00000000000000000000000000001000, dmem_we: 0, dmem_out: 00000000000000001011010100000100, M_bex_taken: 0, curr rstatus:          0, next rstatus:         15
# WRITEBACK STAGE
# MW_W_op:           0, MW_W_data: 00000000000000001011010100000100
# opcode 00000, rd  5, rs  4, rt  1, shamt  0, aluop 00010, immediate    4104, target 001010010000001000000001000
# instrucion: add: 0, addi: 0, sub: 0, and: 1, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# reg_we: 1, write reg:  5, data           0
# register[1]:           4
# register[2]:           8
# register[3]:          24
# register[4]:          16
# register[5]:           0
# register[6]:           0
# register[7]:           0
# register[8]:           0
# register[9]:           0
# register[10]:           0
# register[11]:           0
# register[12]:           0
# register[13]:           0
# register[14]:           0
# register[15]:           0
# register[16]:           0
# register[17]:           0
# register[18]:           0
# register[19]:           0
# register[20]:           0
# register[21]:           0
# register[22]:           0
# register[23]:           0
# register[24]:           0
# register[25]:           0
# register[26]:           0
# register[27]:           0
# register[28]:           0
# register[29]:           0
# register[30]:           0
# register[31]:           0
#  p.PC_we 1,p.FD_we 1,p.DX_we 1,p.XM_we 1,p.MW_we 1
# <<<NEGEDGE>>>
# FETCH STAGE
# curr_PC,          8, next_PC:          9
# chosen PC:    8, PC_jump: 0, PC_branch: 0, intialize PC: 0
# p.F/D F instruction: 00101000000000000000000000010100
# DECODE STAGE
# opcode 00000, rd  8, rs  4, rt  0, shamt  2, aluop 00101, immediate     276, target 010000010000000000100010100
# instrucion: add: 0, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 1, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# readAReg:  4, readBReg:  0, writeReg:  5
# EXECUTE STAGE
# DX_X_readA:         16, DX_X_readB:          0
# opcode 00000, rd  7, rs  4, rt  0, shamt  2, real aluop: 00100, aluop 00100, immediate     272, target 001110010000000000100010000
# instrucion: add: 0, addi: 0, sub: 0, and: 0, or: 0, sll: 1, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
#  p.readAmemWrite: 0, p.readBmemWrite: 0, p.Amemequal: 0, p.Bmemequal: 0
# p.readAwbWrite: 0, p.readBwbWrite: 0, p.Awbequal: 0, p.Bwbequal: 0
# multdiv_status: 0, toggle_multdiv_status: 0, just_started: 0, multdiv_ready: 0, multdiv_ready,p.start_mul 0, p.start_div 0, p.my_multdiv.count  8
# data_operandA:          16, data_operandB:           0
# X_alu_result:         64, X_multdiv_result:          0
# ot equal: 1, less than: 0
# MEMORY STAGE
# XM_M_op:           8, XM_M_readB:           8
# opcode 00000, rd  6, rs  5, rt  2, shamt  0, aluop 00011, immediate    8204, target 001100010100010000000001100
# instrucion: add: 0, addi: 0, sub: 0, and: 0, or: 1, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# dmem_address    8, dmem_data_in:           8 or 00000000000000000000000000001000, dmem_we: 0, dmem_out: 00000000000000000000000001010011, M_bex_taken: 0, curr rstatus:          0, next rstatus:         15
# WRITEBACK STAGE
# MW_W_op:           0, MW_W_data: 00000000000000001011010100000100
# opcode 00000, rd  5, rs  4, rt  1, shamt  0, aluop 00010, immediate    4104, target 001010010000001000000001000
# instrucion: add: 0, addi: 0, sub: 0, and: 1, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# reg_we: 1, write reg:  5, data           0
# register[1]:           4
# register[2]:           8
# register[3]:          24
# register[4]:          16
# register[5]:           0
# register[6]:           0
# register[7]:           0
# register[8]:           0
# register[9]:           0
# register[10]:           0
# register[11]:           0
# register[12]:           0
# register[13]:           0
# register[14]:           0
# register[15]:           0
# register[16]:           0
# register[17]:           0
# register[18]:           0
# register[19]:           0
# register[20]:           0
# register[21]:           0
# register[22]:           0
# register[23]:           0
# register[24]:           0
# register[25]:           0
# register[26]:           0
# register[27]:           0
# register[28]:           0
# register[29]:           0
# register[30]:           0
# register[31]:           0
#  p.PC_we 1,p.FD_we 1,p.DX_we 1,p.XM_we 1,p.MW_we 1
# <<<NEGEDGE>>>
# FETCH STAGE
# curr_PC,          9, next_PC:         10
# chosen PC:    9, PC_jump: 0, PC_branch: 0, intialize PC: 0
# p.F/D F instruction: 00101000000000000000000000010100
# DECODE STAGE
# opcode 00101, rd  0, rs  0, rt  0, shamt  0, aluop 00101, immediate      20, target 000000000000000000000010100
# instrucion: add: 0, addi: 1, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# readAReg:  0, readBReg:  0, writeReg:  6
# EXECUTE STAGE
# DX_X_readA:         16, DX_X_readB:          0
# opcode 00000, rd  8, rs  4, rt  0, shamt  2, real aluop: 00101, aluop 00101, immediate     276, target 010000010000000000100010100
# instrucion: add: 0, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 1, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
#  p.readAmemWrite: 0, p.readBmemWrite: 0, p.Amemequal: 0, p.Bmemequal: 0
# p.readAwbWrite: 0, p.readBwbWrite: 0, p.Awbequal: 0, p.Bwbequal: 0
# multdiv_status: 0, toggle_multdiv_status: 0, just_started: 0, multdiv_ready: 0, multdiv_ready,p.start_mul 0, p.start_div 0, p.my_multdiv.count  9
# data_operandA:          16, data_operandB:           0
# X_alu_result:          4, X_multdiv_result:          0
# ot equal: 1, less than: 0
# MEMORY STAGE
# XM_M_op:          64, XM_M_readB:           0
# opcode 00000, rd  7, rs  4, rt  0, shamt  2, aluop 00100, immediate     272, target 001110010000000000100010000
# instrucion: add: 0, addi: 0, sub: 0, and: 0, or: 0, sll: 1, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# dmem_address   64, dmem_data_in:           0 or 00000000000000000000000000000000, dmem_we: 0, dmem_out: 00000000000000000000000001010011, M_bex_taken: 0, curr rstatus:          0, next rstatus:         15
# WRITEBACK STAGE
# MW_W_op:           8, MW_W_data: 00000000000000000000000001010011
# opcode 00000, rd  6, rs  5, rt  2, shamt  0, aluop 00011, immediate    8204, target 001100010100010000000001100
# instrucion: add: 0, addi: 0, sub: 0, and: 0, or: 1, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# reg_we: 1, write reg:  6, data           8
# register[1]:           4
# register[2]:           8
# register[3]:          24
# register[4]:          16
# register[5]:           0
# register[6]:           0
# register[7]:           0
# register[8]:           0
# register[9]:           0
# register[10]:           0
# register[11]:           0
# register[12]:           0
# register[13]:           0
# register[14]:           0
# register[15]:           0
# register[16]:           0
# register[17]:           0
# register[18]:           0
# register[19]:           0
# register[20]:           0
# register[21]:           0
# register[22]:           0
# register[23]:           0
# register[24]:           0
# register[25]:           0
# register[26]:           0
# register[27]:           0
# register[28]:           0
# register[29]:           0
# register[30]:           0
# register[31]:           0
#  p.PC_we 1,p.FD_we 1,p.DX_we 1,p.XM_we 1,p.MW_we 1
# <<<NEGEDGE>>>
# FETCH STAGE
# curr_PC,          9, next_PC:         10
# chosen PC:    9, PC_jump: 0, PC_branch: 0, intialize PC: 0
# p.F/D F instruction: 00000010010000000000000000000000
# DECODE STAGE
# opcode 00101, rd  0, rs  0, rt  0, shamt  0, aluop 00101, immediate      20, target 000000000000000000000010100
# instrucion: add: 0, addi: 1, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# readAReg:  0, readBReg:  0, writeReg:  6
# EXECUTE STAGE
# DX_X_readA:         16, DX_X_readB:          0
# opcode 00000, rd  8, rs  4, rt  0, shamt  2, real aluop: 00101, aluop 00101, immediate     276, target 010000010000000000100010100
# instrucion: add: 0, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 1, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
#  p.readAmemWrite: 0, p.readBmemWrite: 0, p.Amemequal: 0, p.Bmemequal: 0
# p.readAwbWrite: 0, p.readBwbWrite: 0, p.Awbequal: 0, p.Bwbequal: 0
# multdiv_status: 0, toggle_multdiv_status: 0, just_started: 0, multdiv_ready: 0, multdiv_ready,p.start_mul 0, p.start_div 0, p.my_multdiv.count  9
# data_operandA:          16, data_operandB:           0
# X_alu_result:          4, X_multdiv_result:          0
# ot equal: 1, less than: 0
# MEMORY STAGE
# XM_M_op:          64, XM_M_readB:           0
# opcode 00000, rd  7, rs  4, rt  0, shamt  2, aluop 00100, immediate     272, target 001110010000000000100010000
# instrucion: add: 0, addi: 0, sub: 0, and: 0, or: 0, sll: 1, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# dmem_address   64, dmem_data_in:           0 or 00000000000000000000000000000000, dmem_we: 0, dmem_out: 00000000000000000000000000000000, M_bex_taken: 0, curr rstatus:          0, next rstatus:         15
# WRITEBACK STAGE
# MW_W_op:           8, MW_W_data: 00000000000000000000000001010011
# opcode 00000, rd  6, rs  5, rt  2, shamt  0, aluop 00011, immediate    8204, target 001100010100010000000001100
# instrucion: add: 0, addi: 0, sub: 0, and: 0, or: 1, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# reg_we: 1, write reg:  6, data           8
# register[1]:           4
# register[2]:           8
# register[3]:          24
# register[4]:          16
# register[5]:           0
# register[6]:           8
# register[7]:           0
# register[8]:           0
# register[9]:           0
# register[10]:           0
# register[11]:           0
# register[12]:           0
# register[13]:           0
# register[14]:           0
# register[15]:           0
# register[16]:           0
# register[17]:           0
# register[18]:           0
# register[19]:           0
# register[20]:           0
# register[21]:           0
# register[22]:           0
# register[23]:           0
# register[24]:           0
# register[25]:           0
# register[26]:           0
# register[27]:           0
# register[28]:           0
# register[29]:           0
# register[30]:           0
# register[31]:           0
#  p.PC_we 1,p.FD_we 1,p.DX_we 1,p.XM_we 1,p.MW_we 1
# <<<NEGEDGE>>>
# FETCH STAGE
# curr_PC,         10, next_PC:         11
# chosen PC:   10, PC_jump: 0, PC_branch: 0, intialize PC: 0
# p.F/D F instruction: 00000010010000000000000000000000
# DECODE STAGE
# opcode 00000, rd  9, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 010010000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# readAReg:  0, readBReg:  0, writeReg:  7
# EXECUTE STAGE
# DX_X_readA:          0, DX_X_readB:          0
# opcode 00101, rd  0, rs  0, rt  0, shamt  0, real aluop: 00000, aluop 00101, immediate      20, target 000000000000000000000010100
# instrucion: add: 0, addi: 1, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
#  p.readAmemWrite: 0, p.readBmemWrite: 0, p.Amemequal: 0, p.Bmemequal: 0
# p.readAwbWrite: 0, p.readBwbWrite: 0, p.Awbequal: 0, p.Bwbequal: 0
# multdiv_status: 0, toggle_multdiv_status: 0, just_started: 0, multdiv_ready: 0, multdiv_ready,p.start_mul 0, p.start_div 0, p.my_multdiv.count 10
# data_operandA:           0, data_operandB:          20
# X_alu_result:         20, X_multdiv_result:          0
# ot equal: 1, less than: 0
# MEMORY STAGE
# XM_M_op:           4, XM_M_readB:           0
# opcode 00000, rd  8, rs  4, rt  0, shamt  2, aluop 00101, immediate     276, target 010000010000000000100010100
# instrucion: add: 0, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 1, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# dmem_address    4, dmem_data_in:           0 or 00000000000000000000000000000000, dmem_we: 0, dmem_out: 00000000000000000000000000000000, M_bex_taken: 0, curr rstatus:          0, next rstatus:         15
# WRITEBACK STAGE
# MW_W_op:          64, MW_W_data: 00000000000000000000000000000000
# opcode 00000, rd  7, rs  4, rt  0, shamt  2, aluop 00100, immediate     272, target 001110010000000000100010000
# instrucion: add: 0, addi: 0, sub: 0, and: 0, or: 0, sll: 1, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# reg_we: 1, write reg:  7, data          64
# register[1]:           4
# register[2]:           8
# register[3]:          24
# register[4]:          16
# register[5]:           0
# register[6]:           8
# register[7]:           0
# register[8]:           0
# register[9]:           0
# register[10]:           0
# register[11]:           0
# register[12]:           0
# register[13]:           0
# register[14]:           0
# register[15]:           0
# register[16]:           0
# register[17]:           0
# register[18]:           0
# register[19]:           0
# register[20]:           0
# register[21]:           0
# register[22]:           0
# register[23]:           0
# register[24]:           0
# register[25]:           0
# register[26]:           0
# register[27]:           0
# register[28]:           0
# register[29]:           0
# register[30]:           0
# register[31]:           0
#  p.PC_we 1,p.FD_we 1,p.DX_we 1,p.XM_we 1,p.MW_we 1
# <<<NEGEDGE>>>
# FETCH STAGE
# curr_PC,         10, next_PC:         11
# chosen PC:   10, PC_jump: 0, PC_branch: 0, intialize PC: 0
# p.F/D F instruction: 00011000000000000000000000010110
# DECODE STAGE
# opcode 00000, rd  9, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 010010000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# readAReg:  0, readBReg:  0, writeReg:  7
# EXECUTE STAGE
# DX_X_readA:          0, DX_X_readB:          0
# opcode 00101, rd  0, rs  0, rt  0, shamt  0, real aluop: 00000, aluop 00101, immediate      20, target 000000000000000000000010100
# instrucion: add: 0, addi: 1, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
#  p.readAmemWrite: 0, p.readBmemWrite: 0, p.Amemequal: 0, p.Bmemequal: 0
# p.readAwbWrite: 0, p.readBwbWrite: 0, p.Awbequal: 0, p.Bwbequal: 0
# multdiv_status: 0, toggle_multdiv_status: 0, just_started: 0, multdiv_ready: 0, multdiv_ready,p.start_mul 0, p.start_div 0, p.my_multdiv.count 10
# data_operandA:           0, data_operandB:          20
# X_alu_result:         20, X_multdiv_result:          0
# ot equal: 1, less than: 0
# MEMORY STAGE
# XM_M_op:           4, XM_M_readB:           0
# opcode 00000, rd  8, rs  4, rt  0, shamt  2, aluop 00101, immediate     276, target 010000010000000000100010100
# instrucion: add: 0, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 1, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# dmem_address    4, dmem_data_in:           0 or 00000000000000000000000000000000, dmem_we: 0, dmem_out: 00000000000000000000000001000001, M_bex_taken: 0, curr rstatus:          0, next rstatus:         15
# WRITEBACK STAGE
# MW_W_op:          64, MW_W_data: 00000000000000000000000000000000
# opcode 00000, rd  7, rs  4, rt  0, shamt  2, aluop 00100, immediate     272, target 001110010000000000100010000
# instrucion: add: 0, addi: 0, sub: 0, and: 0, or: 0, sll: 1, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# reg_we: 1, write reg:  7, data          64
# register[1]:           4
# register[2]:           8
# register[3]:          24
# register[4]:          16
# register[5]:           0
# register[6]:           8
# register[7]:          64
# register[8]:           0
# register[9]:           0
# register[10]:           0
# register[11]:           0
# register[12]:           0
# register[13]:           0
# register[14]:           0
# register[15]:           0
# register[16]:           0
# register[17]:           0
# register[18]:           0
# register[19]:           0
# register[20]:           0
# register[21]:           0
# register[22]:           0
# register[23]:           0
# register[24]:           0
# register[25]:           0
# register[26]:           0
# register[27]:           0
# register[28]:           0
# register[29]:           0
# register[30]:           0
# register[31]:           0
#  p.PC_we 1,p.FD_we 1,p.DX_we 1,p.XM_we 1,p.MW_we 1
# <<<NEGEDGE>>>
# FETCH STAGE
# curr_PC,         11, next_PC:         12
# chosen PC:   11, PC_jump: 0, PC_branch: 0, intialize PC: 0
# p.F/D F instruction: 00011000000000000000000000010110
# DECODE STAGE
# opcode 00011, rd  0, rs  0, rt  0, shamt  0, aluop 00101, immediate      22, target 000000000000000000000010110
# instrucion: add: 0, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 1, jr: 0, blt: 0, bex: 0, setx: 0
# readAReg:  0, readBReg:  0, writeReg:  8
# EXECUTE STAGE
# DX_X_readA:          0, DX_X_readB:          0
# opcode 00000, rd  9, rs  0, rt  0, shamt  0, real aluop: 00000, aluop 00000, immediate       0, target 010010000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
#  p.readAmemWrite: 0, p.readBmemWrite: 0, p.Amemequal: 1, p.Bmemequal: 1
# p.readAwbWrite: 0, p.readBwbWrite: 0, p.Awbequal: 0, p.Bwbequal: 0
# multdiv_status: 0, toggle_multdiv_status: 0, just_started: 0, multdiv_ready: 0, multdiv_ready,p.start_mul 0, p.start_div 0, p.my_multdiv.count 11
# data_operandA:           0, data_operandB:           0
# X_alu_result:          0, X_multdiv_result:          0
# ot equal: 0, less than: 0
# MEMORY STAGE
# XM_M_op:          20, XM_M_readB:           0
# opcode 00101, rd  0, rs  0, rt  0, shamt  0, aluop 00101, immediate      20, target 000000000000000000000010100
# instrucion: add: 0, addi: 1, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# dmem_address   20, dmem_data_in:           0 or 00000000000000000000000000000000, dmem_we: 0, dmem_out: 00000000000000000000000001000001, M_bex_taken: 0, curr rstatus:          0, next rstatus:         15
# WRITEBACK STAGE
# MW_W_op:           4, MW_W_data: 00000000000000000000000001000001
# opcode 00000, rd  8, rs  4, rt  0, shamt  2, aluop 00101, immediate     276, target 010000010000000000100010100
# instrucion: add: 0, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 1, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# reg_we: 1, write reg:  8, data           4
# register[1]:           4
# register[2]:           8
# register[3]:          24
# register[4]:          16
# register[5]:           0
# register[6]:           8
# register[7]:          64
# register[8]:           0
# register[9]:           0
# register[10]:           0
# register[11]:           0
# register[12]:           0
# register[13]:           0
# register[14]:           0
# register[15]:           0
# register[16]:           0
# register[17]:           0
# register[18]:           0
# register[19]:           0
# register[20]:           0
# register[21]:           0
# register[22]:           0
# register[23]:           0
# register[24]:           0
# register[25]:           0
# register[26]:           0
# register[27]:           0
# register[28]:           0
# register[29]:           0
# register[30]:           0
# register[31]:           0
#  p.PC_we 1,p.FD_we 1,p.DX_we 1,p.XM_we 1,p.MW_we 1
# <<<NEGEDGE>>>
# FETCH STAGE
# curr_PC,         11, next_PC:         12
# chosen PC:   11, PC_jump: 0, PC_branch: 0, intialize PC: 0
# p.F/D F instruction: 00101010100000011111111111110110
# DECODE STAGE
# opcode 00011, rd  0, rs  0, rt  0, shamt  0, aluop 00101, immediate      22, target 000000000000000000000010110
# instrucion: add: 0, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 1, jr: 0, blt: 0, bex: 0, setx: 0
# readAReg:  0, readBReg:  0, writeReg:  8
# EXECUTE STAGE
# DX_X_readA:          0, DX_X_readB:          0
# opcode 00000, rd  9, rs  0, rt  0, shamt  0, real aluop: 00000, aluop 00000, immediate       0, target 010010000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
#  p.readAmemWrite: 0, p.readBmemWrite: 0, p.Amemequal: 1, p.Bmemequal: 1
# p.readAwbWrite: 0, p.readBwbWrite: 0, p.Awbequal: 0, p.Bwbequal: 0
# multdiv_status: 0, toggle_multdiv_status: 0, just_started: 0, multdiv_ready: 0, multdiv_ready,p.start_mul 0, p.start_div 0, p.my_multdiv.count 11
# data_operandA:           0, data_operandB:           0
# X_alu_result:          0, X_multdiv_result:          0
# ot equal: 0, less than: 0
# MEMORY STAGE
# XM_M_op:          20, XM_M_readB:           0
# opcode 00101, rd  0, rs  0, rt  0, shamt  0, aluop 00101, immediate      20, target 000000000000000000000010100
# instrucion: add: 0, addi: 1, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# dmem_address   20, dmem_data_in:           0 or 00000000000000000000000000000000, dmem_we: 0, dmem_out: 00000000000000000000000001000001, M_bex_taken: 0, curr rstatus:          0, next rstatus:         15
# WRITEBACK STAGE
# MW_W_op:           4, MW_W_data: 00000000000000000000000001000001
# opcode 00000, rd  8, rs  4, rt  0, shamt  2, aluop 00101, immediate     276, target 010000010000000000100010100
# instrucion: add: 0, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 1, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# reg_we: 1, write reg:  8, data           4
# register[1]:           4
# register[2]:           8
# register[3]:          24
# register[4]:          16
# register[5]:           0
# register[6]:           8
# register[7]:          64
# register[8]:           4
# register[9]:           0
# register[10]:           0
# register[11]:           0
# register[12]:           0
# register[13]:           0
# register[14]:           0
# register[15]:           0
# register[16]:           0
# register[17]:           0
# register[18]:           0
# register[19]:           0
# register[20]:           0
# register[21]:           0
# register[22]:           0
# register[23]:           0
# register[24]:           0
# register[25]:           0
# register[26]:           0
# register[27]:           0
# register[28]:           0
# register[29]:           0
# register[30]:           0
# register[31]:           0
#  p.PC_we 1,p.FD_we 1,p.DX_we 1,p.XM_we 1,p.MW_we 1
# <<<NEGEDGE>>>
# FETCH STAGE
# curr_PC,         12, next_PC:         13
# chosen PC:   12, PC_jump: 0, PC_branch: 0, intialize PC: 0
# p.F/D F instruction: 00101010100000011111111111110110
# DECODE STAGE
# opcode 00101, rd 10, rs  0, rt 31, shamt 31, aluop 11101, immediate     -10, target 010100000011111111111110110
# instrucion: add: 0, addi: 1, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# readAReg:  0, readBReg: 31, writeReg:  0
# EXECUTE STAGE
# DX_X_readA:          0, DX_X_readB:          0
# opcode 00011, rd  0, rs  0, rt  0, shamt  0, real aluop: 00101, aluop 00101, immediate      22, target 000000000000000000000010110
# instrucion: add: 0, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 1, jr: 0, blt: 0, bex: 0, setx: 0
#  p.readAmemWrite: 0, p.readBmemWrite: 0, p.Amemequal: 0, p.Bmemequal: 0
# p.readAwbWrite: 1, p.readBwbWrite: 1, p.Awbequal: 1, p.Bwbequal: 1
# multdiv_status: 0, toggle_multdiv_status: 0, just_started: 0, multdiv_ready: 0, multdiv_ready,p.start_mul 0, p.start_div 0, p.my_multdiv.count 12
# data_operandA:          20, data_operandB:          20
# X_alu_result:         20, X_multdiv_result:          0
# ot equal: 1, less than: 0
# MEMORY STAGE
# XM_M_op:           0, XM_M_readB:           0
# opcode 00000, rd  9, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 010010000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# dmem_address    0, dmem_data_in:           0 or 00000000000000000000000000000000, dmem_we: 0, dmem_out: 00000000000000000000000001000001, M_bex_taken: 0, curr rstatus:          0, next rstatus:         15
# WRITEBACK STAGE
# MW_W_op:          20, MW_W_data: 00000000000000000000000001000001
# opcode 00101, rd  0, rs  0, rt  0, shamt  0, aluop 00101, immediate      20, target 000000000000000000000010100
# instrucion: add: 0, addi: 1, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# reg_we: 1, write reg:  0, data          20
# register[1]:           4
# register[2]:           8
# register[3]:          24
# register[4]:          16
# register[5]:           0
# register[6]:           8
# register[7]:          64
# register[8]:           4
# register[9]:           0
# register[10]:           0
# register[11]:           0
# register[12]:           0
# register[13]:           0
# register[14]:           0
# register[15]:           0
# register[16]:           0
# register[17]:           0
# register[18]:           0
# register[19]:           0
# register[20]:           0
# register[21]:           0
# register[22]:           0
# register[23]:           0
# register[24]:           0
# register[25]:           0
# register[26]:           0
# register[27]:           0
# register[28]:           0
# register[29]:           0
# register[30]:           0
# register[31]:           0
#  p.PC_we 1,p.FD_we 1,p.DX_we 1,p.XM_we 1,p.MW_we 1
# <<<NEGEDGE>>>
# FETCH STAGE
# curr_PC,         12, next_PC:         13
# chosen PC:   12, PC_jump: 0, PC_branch: 0, intialize PC: 0
# p.F/D F instruction: 00101010110000011111111111110101
# DECODE STAGE
# opcode 00101, rd 10, rs  0, rt 31, shamt 31, aluop 11101, immediate     -10, target 010100000011111111111110110
# instrucion: add: 0, addi: 1, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# readAReg:  0, readBReg: 31, writeReg:  0
# EXECUTE STAGE
# DX_X_readA:          0, DX_X_readB:          0
# opcode 00011, rd  0, rs  0, rt  0, shamt  0, real aluop: 00101, aluop 00101, immediate      22, target 000000000000000000000010110
# instrucion: add: 0, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 1, jr: 0, blt: 0, bex: 0, setx: 0
#  p.readAmemWrite: 0, p.readBmemWrite: 0, p.Amemequal: 0, p.Bmemequal: 0
# p.readAwbWrite: 1, p.readBwbWrite: 1, p.Awbequal: 1, p.Bwbequal: 1
# multdiv_status: 0, toggle_multdiv_status: 0, just_started: 0, multdiv_ready: 0, multdiv_ready,p.start_mul 0, p.start_div 0, p.my_multdiv.count 12
# data_operandA:          20, data_operandB:          20
# X_alu_result:         20, X_multdiv_result:          0
# ot equal: 1, less than: 0
# MEMORY STAGE
# XM_M_op:           0, XM_M_readB:           0
# opcode 00000, rd  9, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 010010000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# dmem_address    0, dmem_data_in:           0 or 00000000000000000000000000000000, dmem_we: 0, dmem_out: 00000000000000001011010100000100, M_bex_taken: 0, curr rstatus:          0, next rstatus:         15
# WRITEBACK STAGE
# MW_W_op:          20, MW_W_data: 00000000000000000000000001000001
# opcode 00101, rd  0, rs  0, rt  0, shamt  0, aluop 00101, immediate      20, target 000000000000000000000010100
# instrucion: add: 0, addi: 1, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# reg_we: 1, write reg:  0, data          20
# register[1]:           4
# register[2]:           8
# register[3]:          24
# register[4]:          16
# register[5]:           0
# register[6]:           8
# register[7]:          64
# register[8]:           4
# register[9]:           0
# register[10]:           0
# register[11]:           0
# register[12]:           0
# register[13]:           0
# register[14]:           0
# register[15]:           0
# register[16]:           0
# register[17]:           0
# register[18]:           0
# register[19]:           0
# register[20]:           0
# register[21]:           0
# register[22]:           0
# register[23]:           0
# register[24]:           0
# register[25]:           0
# register[26]:           0
# register[27]:           0
# register[28]:           0
# register[29]:           0
# register[30]:           0
# register[31]:           0
#  p.PC_we 1,p.FD_we 1,p.DX_we 1,p.XM_we 1,p.MW_we 1
# <<<NEGEDGE>>>
# FETCH STAGE
# curr_PC,         13, next_PC:         23
# chosen PC:   22, PC_jump: 1, PC_branch: 0, intialize PC: 0
# p.F/D F instruction: 00101010110000011111111111110101
# DECODE STAGE
# opcode 00101, rd 11, rs  0, rt 31, shamt 31, aluop 11101, immediate     -11, target 010110000011111111111110101
# instrucion: add: 0, addi: 1, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# readAReg:  0, readBReg: 31, writeReg:  9
# EXECUTE STAGE
# DX_X_readA:         20, DX_X_readB:          0
# opcode 00101, rd 10, rs  0, rt 31, shamt 31, real aluop: 00000, aluop 11101, immediate     -10, target 010100000011111111111110110
# instrucion: add: 0, addi: 1, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
#  p.readAmemWrite: 0, p.readBmemWrite: 1, p.Amemequal: 0, p.Bmemequal: 1
# p.readAwbWrite: 0, p.readBwbWrite: 0, p.Awbequal: 0, p.Bwbequal: 0
# multdiv_status: 0, toggle_multdiv_status: 0, just_started: 0, multdiv_ready: 0, multdiv_ready,p.start_mul 0, p.start_div 0, p.my_multdiv.count 13
# data_operandA:          20, data_operandB:         -10
# X_alu_result:         10, X_multdiv_result:          0
# ot equal: 1, less than: 0
# MEMORY STAGE
# XM_M_op:          20, XM_M_readB:          20
# opcode 00011, rd  0, rs  0, rt  0, shamt  0, aluop 00101, immediate      22, target 000000000000000000000010110
# instrucion: add: 0, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 1, jr: 0, blt: 0, bex: 0, setx: 0
# dmem_address   20, dmem_data_in:          20 or 00000000000000000000000000010100, dmem_we: 0, dmem_out: 00000000000000001011010100000100, M_bex_taken: 0, curr rstatus:          0, next rstatus:         15
# WRITEBACK STAGE
# MW_W_op:           0, MW_W_data: 00000000000000001011010100000100
# opcode 00000, rd  9, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 010010000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# reg_we: 1, write reg:  9, data           0
# register[1]:           4
# register[2]:           8
# register[3]:          24
# register[4]:          16
# register[5]:           0
# register[6]:           8
# register[7]:          64
# register[8]:           4
# register[9]:           0
# register[10]:           0
# register[11]:           0
# register[12]:           0
# register[13]:           0
# register[14]:           0
# register[15]:           0
# register[16]:           0
# register[17]:           0
# register[18]:           0
# register[19]:           0
# register[20]:           0
# register[21]:           0
# register[22]:           0
# register[23]:           0
# register[24]:           0
# register[25]:           0
# register[26]:           0
# register[27]:           0
# register[28]:           0
# register[29]:           0
# register[30]:           0
# register[31]:           0
#  p.PC_we 1,p.FD_we 1,p.DX_we 1,p.XM_we 1,p.MW_we 1
# <<<NEGEDGE>>>
# FETCH STAGE
# curr_PC,         13, next_PC:         23
# chosen PC:   22, PC_jump: 1, PC_branch: 0, intialize PC: 0
# p.F/D F instruction: 00101010100000000000000000001010
# DECODE STAGE
# opcode 00101, rd 11, rs  0, rt 31, shamt 31, aluop 11101, immediate     -11, target 010110000011111111111110101
# instrucion: add: 0, addi: 1, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# readAReg:  0, readBReg: 31, writeReg:  9
# EXECUTE STAGE
# DX_X_readA:         20, DX_X_readB:          0
# opcode 00101, rd 10, rs  0, rt 31, shamt 31, real aluop: 00000, aluop 11101, immediate     -10, target 010100000011111111111110110
# instrucion: add: 0, addi: 1, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
#  p.readAmemWrite: 0, p.readBmemWrite: 1, p.Amemequal: 0, p.Bmemequal: 1
# p.readAwbWrite: 0, p.readBwbWrite: 0, p.Awbequal: 0, p.Bwbequal: 0
# multdiv_status: 0, toggle_multdiv_status: 0, just_started: 0, multdiv_ready: 0, multdiv_ready,p.start_mul 0, p.start_div 0, p.my_multdiv.count 13
# data_operandA:          20, data_operandB:         -10
# X_alu_result:         10, X_multdiv_result:          0
# ot equal: 1, less than: 0
# MEMORY STAGE
# XM_M_op:          20, XM_M_readB:          20
# opcode 00011, rd  0, rs  0, rt  0, shamt  0, aluop 00101, immediate      22, target 000000000000000000000010110
# instrucion: add: 0, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 1, jr: 0, blt: 0, bex: 0, setx: 0
# dmem_address   20, dmem_data_in:          20 or 00000000000000000000000000010100, dmem_we: 0, dmem_out: 00000000000000000000000001000001, M_bex_taken: 0, curr rstatus:          0, next rstatus:         15
# WRITEBACK STAGE
# MW_W_op:           0, MW_W_data: 00000000000000001011010100000100
# opcode 00000, rd  9, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 010010000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# reg_we: 1, write reg:  9, data           0
# register[1]:           4
# register[2]:           8
# register[3]:          24
# register[4]:          16
# register[5]:           0
# register[6]:           8
# register[7]:          64
# register[8]:           4
# register[9]:           0
# register[10]:           0
# register[11]:           0
# register[12]:           0
# register[13]:           0
# register[14]:           0
# register[15]:           0
# register[16]:           0
# register[17]:           0
# register[18]:           0
# register[19]:           0
# register[20]:           0
# register[21]:           0
# register[22]:           0
# register[23]:           0
# register[24]:           0
# register[25]:           0
# register[26]:           0
# register[27]:           0
# register[28]:           0
# register[29]:           0
# register[30]:           0
# register[31]:           0
#  p.PC_we 1,p.FD_we 1,p.DX_we 1,p.XM_we 1,p.MW_we 1
# <<<NEGEDGE>>>
# FETCH STAGE
# curr_PC,         23, next_PC:         24
# chosen PC:   23, PC_jump: 0, PC_branch: 0, intialize PC: 0
# p.F/D F instruction: 00101010100000000000000000001010
# DECODE STAGE
# opcode 00101, rd 10, rs  0, rt  0, shamt  0, aluop 00010, immediate      10, target 010100000000000000000001010
# instrucion: add: 0, addi: 1, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# readAReg:  0, readBReg:  0, writeReg: 31
# EXECUTE STAGE
# DX_X_readA:          0, DX_X_readB:          0
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, real aluop: 00000, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
#  p.readAmemWrite: 0, p.readBmemWrite: 0, p.Amemequal: 1, p.Bmemequal: 1
# p.readAwbWrite: 0, p.readBwbWrite: 0, p.Awbequal: 0, p.Bwbequal: 0
# multdiv_status: 0, toggle_multdiv_status: 0, just_started: 0, multdiv_ready: 0, multdiv_ready,p.start_mul 0, p.start_div 0, p.my_multdiv.count 14
# data_operandA:           0, data_operandB:           0
# X_alu_result:          0, X_multdiv_result:          0
# ot equal: 0, less than: 0
# MEMORY STAGE
# XM_M_op:          10, XM_M_readB:          20
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# dmem_address   10, dmem_data_in:          20 or 00000000000000000000000000010100, dmem_we: 0, dmem_out: 00000000000000000000000001000001, M_bex_taken: 0, curr rstatus:          0, next rstatus:         15
# WRITEBACK STAGE
# MW_W_op:          20, MW_W_data: 00000000000000000000000001000001
# opcode 00011, rd  0, rs  0, rt  0, shamt  0, aluop 00101, immediate      22, target 000000000000000000000010110
# instrucion: add: 0, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 1, jr: 0, blt: 0, bex: 0, setx: 0
# reg_we: 1, write reg: 31, data          11
# register[1]:           4
# register[2]:           8
# register[3]:          24
# register[4]:          16
# register[5]:           0
# register[6]:           8
# register[7]:          64
# register[8]:           4
# register[9]:           0
# register[10]:           0
# register[11]:           0
# register[12]:           0
# register[13]:           0
# register[14]:           0
# register[15]:           0
# register[16]:           0
# register[17]:           0
# register[18]:           0
# register[19]:           0
# register[20]:           0
# register[21]:           0
# register[22]:           0
# register[23]:           0
# register[24]:           0
# register[25]:           0
# register[26]:           0
# register[27]:           0
# register[28]:           0
# register[29]:           0
# register[30]:           0
# register[31]:           0
#  p.PC_we 1,p.FD_we 1,p.DX_we 1,p.XM_we 1,p.MW_we 1
# <<<NEGEDGE>>>
# FETCH STAGE
# curr_PC,         23, next_PC:         24
# chosen PC:   23, PC_jump: 0, PC_branch: 0, intialize PC: 0
# p.F/D F instruction: 00101010110000000000000000001011
# DECODE STAGE
# opcode 00101, rd 10, rs  0, rt  0, shamt  0, aluop 00010, immediate      10, target 010100000000000000000001010
# instrucion: add: 0, addi: 1, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# readAReg:  0, readBReg:  0, writeReg: 31
# EXECUTE STAGE
# DX_X_readA:          0, DX_X_readB:          0
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, real aluop: 00000, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
#  p.readAmemWrite: 0, p.readBmemWrite: 0, p.Amemequal: 1, p.Bmemequal: 1
# p.readAwbWrite: 0, p.readBwbWrite: 0, p.Awbequal: 0, p.Bwbequal: 0
# multdiv_status: 0, toggle_multdiv_status: 0, just_started: 0, multdiv_ready: 0, multdiv_ready,p.start_mul 0, p.start_div 0, p.my_multdiv.count 14
# data_operandA:           0, data_operandB:           0
# X_alu_result:          0, X_multdiv_result:          0
# ot equal: 0, less than: 0
# MEMORY STAGE
# XM_M_op:          10, XM_M_readB:          20
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# dmem_address   10, dmem_data_in:          20 or 00000000000000000000000000010100, dmem_we: 0, dmem_out: 00000000000000000000000001000001, M_bex_taken: 0, curr rstatus:          0, next rstatus:         15
# WRITEBACK STAGE
# MW_W_op:          20, MW_W_data: 00000000000000000000000001000001
# opcode 00011, rd  0, rs  0, rt  0, shamt  0, aluop 00101, immediate      22, target 000000000000000000000010110
# instrucion: add: 0, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 1, jr: 0, blt: 0, bex: 0, setx: 0
# reg_we: 1, write reg: 31, data          11
# register[1]:           4
# register[2]:           8
# register[3]:          24
# register[4]:          16
# register[5]:           0
# register[6]:           8
# register[7]:          64
# register[8]:           4
# register[9]:           0
# register[10]:           0
# register[11]:           0
# register[12]:           0
# register[13]:           0
# register[14]:           0
# register[15]:           0
# register[16]:           0
# register[17]:           0
# register[18]:           0
# register[19]:           0
# register[20]:           0
# register[21]:           0
# register[22]:           0
# register[23]:           0
# register[24]:           0
# register[25]:           0
# register[26]:           0
# register[27]:           0
# register[28]:           0
# register[29]:           0
# register[30]:           0
# register[31]:          11
#  p.PC_we 1,p.FD_we 1,p.DX_we 1,p.XM_we 1,p.MW_we 1
# <<<NEGEDGE>>>
# FETCH STAGE
# curr_PC,         24, next_PC:         25
# chosen PC:   24, PC_jump: 0, PC_branch: 0, intialize PC: 0
# p.F/D F instruction: 00101010110000000000000000001011
# DECODE STAGE
# opcode 00101, rd 11, rs  0, rt  0, shamt  0, aluop 00010, immediate      11, target 010110000000000000000001011
# instrucion: add: 0, addi: 1, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# readAReg:  0, readBReg:  0, writeReg:  0
# EXECUTE STAGE
# DX_X_readA:          0, DX_X_readB:          0
# opcode 00101, rd 10, rs  0, rt  0, shamt  0, real aluop: 00000, aluop 00010, immediate      10, target 010100000000000000000001010
# instrucion: add: 0, addi: 1, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
#  p.readAmemWrite: 0, p.readBmemWrite: 0, p.Amemequal: 1, p.Bmemequal: 1
# p.readAwbWrite: 0, p.readBwbWrite: 0, p.Awbequal: 1, p.Bwbequal: 1
# multdiv_status: 0, toggle_multdiv_status: 0, just_started: 0, multdiv_ready: 0, multdiv_ready,p.start_mul 0, p.start_div 0, p.my_multdiv.count 15
# data_operandA:           0, data_operandB:          10
# X_alu_result:         10, X_multdiv_result:          0
# ot equal: 1, less than: 0
# MEMORY STAGE
# XM_M_op:           0, XM_M_readB:           0
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# dmem_address    0, dmem_data_in:           0 or 00000000000000000000000000000000, dmem_we: 0, dmem_out: 00000000000000000000000001000001, M_bex_taken: 0, curr rstatus:          0, next rstatus:         15
# WRITEBACK STAGE
# MW_W_op:          10, MW_W_data: 00000000000000000000000001000001
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# reg_we: 0, write reg:  0, data          10
# register[1]:           4
# register[2]:           8
# register[3]:          24
# register[4]:          16
# register[5]:           0
# register[6]:           8
# register[7]:          64
# register[8]:           4
# register[9]:           0
# register[10]:           0
# register[11]:           0
# register[12]:           0
# register[13]:           0
# register[14]:           0
# register[15]:           0
# register[16]:           0
# register[17]:           0
# register[18]:           0
# register[19]:           0
# register[20]:           0
# register[21]:           0
# register[22]:           0
# register[23]:           0
# register[24]:           0
# register[25]:           0
# register[26]:           0
# register[27]:           0
# register[28]:           0
# register[29]:           0
# register[30]:           0
# register[31]:          11
#  p.PC_we 1,p.FD_we 1,p.DX_we 1,p.XM_we 1,p.MW_we 1
# <<<NEGEDGE>>>
# FETCH STAGE
# curr_PC,         24, next_PC:         25
# chosen PC:   24, PC_jump: 0, PC_branch: 0, intialize PC: 0
# p.F/D F instruction: 00100111110000000000000000000000
# DECODE STAGE
# opcode 00101, rd 11, rs  0, rt  0, shamt  0, aluop 00010, immediate      11, target 010110000000000000000001011
# instrucion: add: 0, addi: 1, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# readAReg:  0, readBReg:  0, writeReg:  0
# EXECUTE STAGE
# DX_X_readA:          0, DX_X_readB:          0
# opcode 00101, rd 10, rs  0, rt  0, shamt  0, real aluop: 00000, aluop 00010, immediate      10, target 010100000000000000000001010
# instrucion: add: 0, addi: 1, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
#  p.readAmemWrite: 0, p.readBmemWrite: 0, p.Amemequal: 1, p.Bmemequal: 1
# p.readAwbWrite: 0, p.readBwbWrite: 0, p.Awbequal: 1, p.Bwbequal: 1
# multdiv_status: 0, toggle_multdiv_status: 0, just_started: 0, multdiv_ready: 0, multdiv_ready,p.start_mul 0, p.start_div 0, p.my_multdiv.count 15
# data_operandA:           0, data_operandB:          10
# X_alu_result:         10, X_multdiv_result:          0
# ot equal: 1, less than: 0
# MEMORY STAGE
# XM_M_op:           0, XM_M_readB:           0
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# dmem_address    0, dmem_data_in:           0 or 00000000000000000000000000000000, dmem_we: 0, dmem_out: 00000000000000001011010100000100, M_bex_taken: 0, curr rstatus:          0, next rstatus:         15
# WRITEBACK STAGE
# MW_W_op:          10, MW_W_data: 00000000000000000000000001000001
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# reg_we: 0, write reg:  0, data          10
# register[1]:           4
# register[2]:           8
# register[3]:          24
# register[4]:          16
# register[5]:           0
# register[6]:           8
# register[7]:          64
# register[8]:           4
# register[9]:           0
# register[10]:           0
# register[11]:           0
# register[12]:           0
# register[13]:           0
# register[14]:           0
# register[15]:           0
# register[16]:           0
# register[17]:           0
# register[18]:           0
# register[19]:           0
# register[20]:           0
# register[21]:           0
# register[22]:           0
# register[23]:           0
# register[24]:           0
# register[25]:           0
# register[26]:           0
# register[27]:           0
# register[28]:           0
# register[29]:           0
# register[30]:           0
# register[31]:          11
#  p.PC_we 1,p.FD_we 1,p.DX_we 1,p.XM_we 1,p.MW_we 1
# <<<NEGEDGE>>>
# FETCH STAGE
# curr_PC,         25, next_PC:         26
# chosen PC:   25, PC_jump: 0, PC_branch: 0, intialize PC: 0
# p.F/D F instruction: 00100111110000000000000000000000
# DECODE STAGE
# opcode 00100, rd 31, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 111110000000000000000000000
# instrucion: add: 0, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 1, blt: 0, bex: 0, setx: 0
# readAReg:  0, readBReg: 31, writeReg:  0
# EXECUTE STAGE
# DX_X_readA:          0, DX_X_readB:          0
# opcode 00101, rd 11, rs  0, rt  0, shamt  0, real aluop: 00000, aluop 00010, immediate      11, target 010110000000000000000001011
# instrucion: add: 0, addi: 1, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
#  p.readAmemWrite: 0, p.readBmemWrite: 0, p.Amemequal: 0, p.Bmemequal: 0
# p.readAwbWrite: 0, p.readBwbWrite: 0, p.Awbequal: 1, p.Bwbequal: 1
# multdiv_status: 0, toggle_multdiv_status: 0, just_started: 0, multdiv_ready: 0, multdiv_ready,p.start_mul 0, p.start_div 0, p.my_multdiv.count 16
# data_operandA:           0, data_operandB:          11
# X_alu_result:         11, X_multdiv_result:          0
# ot equal: 1, less than: 0
# MEMORY STAGE
# XM_M_op:          10, XM_M_readB:           0
# opcode 00101, rd 10, rs  0, rt  0, shamt  0, aluop 00010, immediate      10, target 010100000000000000000001010
# instrucion: add: 0, addi: 1, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# dmem_address   10, dmem_data_in:           0 or 00000000000000000000000000000000, dmem_we: 0, dmem_out: 00000000000000001011010100000100, M_bex_taken: 0, curr rstatus:          0, next rstatus:         15
# WRITEBACK STAGE
# MW_W_op:           0, MW_W_data: 00000000000000001011010100000100
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# reg_we: 0, write reg:  0, data           0
# register[1]:           4
# register[2]:           8
# register[3]:          24
# register[4]:          16
# register[5]:           0
# register[6]:           8
# register[7]:          64
# register[8]:           4
# register[9]:           0
# register[10]:           0
# register[11]:           0
# register[12]:           0
# register[13]:           0
# register[14]:           0
# register[15]:           0
# register[16]:           0
# register[17]:           0
# register[18]:           0
# register[19]:           0
# register[20]:           0
# register[21]:           0
# register[22]:           0
# register[23]:           0
# register[24]:           0
# register[25]:           0
# register[26]:           0
# register[27]:           0
# register[28]:           0
# register[29]:           0
# register[30]:           0
# register[31]:          11
#  p.PC_we 1,p.FD_we 1,p.DX_we 1,p.XM_we 1,p.MW_we 1
# <<<NEGEDGE>>>
# FETCH STAGE
# curr_PC,         25, next_PC:         26
# chosen PC:   25, PC_jump: 0, PC_branch: 0, intialize PC: 0
# p.F/D F instruction: 00101101000000000000011111111111
# DECODE STAGE
# opcode 00100, rd 31, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 111110000000000000000000000
# instrucion: add: 0, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 1, blt: 0, bex: 0, setx: 0
# readAReg:  0, readBReg: 31, writeReg:  0
# EXECUTE STAGE
# DX_X_readA:          0, DX_X_readB:          0
# opcode 00101, rd 11, rs  0, rt  0, shamt  0, real aluop: 00000, aluop 00010, immediate      11, target 010110000000000000000001011
# instrucion: add: 0, addi: 1, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
#  p.readAmemWrite: 0, p.readBmemWrite: 0, p.Amemequal: 0, p.Bmemequal: 0
# p.readAwbWrite: 0, p.readBwbWrite: 0, p.Awbequal: 1, p.Bwbequal: 1
# multdiv_status: 0, toggle_multdiv_status: 0, just_started: 0, multdiv_ready: 0, multdiv_ready,p.start_mul 0, p.start_div 0, p.my_multdiv.count 16
# data_operandA:           0, data_operandB:          11
# X_alu_result:         11, X_multdiv_result:          0
# ot equal: 1, less than: 0
# MEMORY STAGE
# XM_M_op:          10, XM_M_readB:           0
# opcode 00101, rd 10, rs  0, rt  0, shamt  0, aluop 00010, immediate      10, target 010100000000000000000001010
# instrucion: add: 0, addi: 1, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# dmem_address   10, dmem_data_in:           0 or 00000000000000000000000000000000, dmem_we: 0, dmem_out: 00000000000000000000000001000001, M_bex_taken: 0, curr rstatus:          0, next rstatus:         15
# WRITEBACK STAGE
# MW_W_op:           0, MW_W_data: 00000000000000001011010100000100
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# reg_we: 0, write reg:  0, data           0
# register[1]:           4
# register[2]:           8
# register[3]:          24
# register[4]:          16
# register[5]:           0
# register[6]:           8
# register[7]:          64
# register[8]:           4
# register[9]:           0
# register[10]:           0
# register[11]:           0
# register[12]:           0
# register[13]:           0
# register[14]:           0
# register[15]:           0
# register[16]:           0
# register[17]:           0
# register[18]:           0
# register[19]:           0
# register[20]:           0
# register[21]:           0
# register[22]:           0
# register[23]:           0
# register[24]:           0
# register[25]:           0
# register[26]:           0
# register[27]:           0
# register[28]:           0
# register[29]:           0
# register[30]:           0
# register[31]:          11
#  p.PC_we 1,p.FD_we 1,p.DX_we 1,p.XM_we 1,p.MW_we 1
# <<<NEGEDGE>>>
# FETCH STAGE
# curr_PC,         26, next_PC:         27
# chosen PC:   26, PC_jump: 0, PC_branch: 0, intialize PC: 0
# p.F/D F instruction: 00101101000000000000011111111111
# DECODE STAGE
# opcode 00101, rd 20, rs  0, rt  0, shamt 15, aluop 11111, immediate    2047, target 101000000000000011111111111
# instrucion: add: 0, addi: 1, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# readAReg:  0, readBReg:  0, writeReg: 10
# EXECUTE STAGE
# DX_X_readA:          0, DX_X_readB:         11
# opcode 00100, rd 31, rs  0, rt  0, shamt  0, real aluop: 00000, aluop 00000, immediate       0, target 111110000000000000000000000
# instrucion: add: 0, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 1, blt: 0, bex: 0, setx: 0
#  p.readAmemWrite: 0, p.readBmemWrite: 0, p.Amemequal: 0, p.Bmemequal: 0
# p.readAwbWrite: 0, p.readBwbWrite: 0, p.Awbequal: 0, p.Bwbequal: 0
# multdiv_status: 0, toggle_multdiv_status: 0, just_started: 0, multdiv_ready: 0, multdiv_ready,p.start_mul 0, p.start_div 0, p.my_multdiv.count 17
# data_operandA:           0, data_operandB:          11
# X_alu_result:         11, X_multdiv_result:          0
# ot equal: 1, less than: 0
# MEMORY STAGE
# XM_M_op:          11, XM_M_readB:           0
# opcode 00101, rd 11, rs  0, rt  0, shamt  0, aluop 00010, immediate      11, target 010110000000000000000001011
# instrucion: add: 0, addi: 1, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# dmem_address   11, dmem_data_in:           0 or 00000000000000000000000000000000, dmem_we: 0, dmem_out: 00000000000000000000000001000001, M_bex_taken: 0, curr rstatus:          0, next rstatus:         15
# WRITEBACK STAGE
# MW_W_op:          10, MW_W_data: 00000000000000000000000001000001
# opcode 00101, rd 10, rs  0, rt  0, shamt  0, aluop 00010, immediate      10, target 010100000000000000000001010
# instrucion: add: 0, addi: 1, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# reg_we: 1, write reg: 10, data          10
# register[1]:           4
# register[2]:           8
# register[3]:          24
# register[4]:          16
# register[5]:           0
# register[6]:           8
# register[7]:          64
# register[8]:           4
# register[9]:           0
# register[10]:           0
# register[11]:           0
# register[12]:           0
# register[13]:           0
# register[14]:           0
# register[15]:           0
# register[16]:           0
# register[17]:           0
# register[18]:           0
# register[19]:           0
# register[20]:           0
# register[21]:           0
# register[22]:           0
# register[23]:           0
# register[24]:           0
# register[25]:           0
# register[26]:           0
# register[27]:           0
# register[28]:           0
# register[29]:           0
# register[30]:           0
# register[31]:          11
#  p.PC_we 1,p.FD_we 1,p.DX_we 1,p.XM_we 1,p.MW_we 1
# <<<NEGEDGE>>>
# FETCH STAGE
# curr_PC,         26, next_PC:         27
# chosen PC:   26, PC_jump: 0, PC_branch: 0, intialize PC: 0
# p.F/D F instruction: 00000000000000000000000000000000
# DECODE STAGE
# opcode 00101, rd 20, rs  0, rt  0, shamt 15, aluop 11111, immediate    2047, target 101000000000000011111111111
# instrucion: add: 0, addi: 1, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# readAReg:  0, readBReg:  0, writeReg: 10
# EXECUTE STAGE
# DX_X_readA:          0, DX_X_readB:         11
# opcode 00100, rd 31, rs  0, rt  0, shamt  0, real aluop: 00000, aluop 00000, immediate       0, target 111110000000000000000000000
# instrucion: add: 0, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 1, blt: 0, bex: 0, setx: 0
#  p.readAmemWrite: 0, p.readBmemWrite: 0, p.Amemequal: 0, p.Bmemequal: 0
# p.readAwbWrite: 0, p.readBwbWrite: 0, p.Awbequal: 0, p.Bwbequal: 0
# multdiv_status: 0, toggle_multdiv_status: 0, just_started: 0, multdiv_ready: 0, multdiv_ready,p.start_mul 0, p.start_div 0, p.my_multdiv.count 17
# data_operandA:           0, data_operandB:          11
# X_alu_result:         11, X_multdiv_result:          0
# ot equal: 1, less than: 0
# MEMORY STAGE
# XM_M_op:          11, XM_M_readB:           0
# opcode 00101, rd 11, rs  0, rt  0, shamt  0, aluop 00010, immediate      11, target 010110000000000000000001011
# instrucion: add: 0, addi: 1, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# dmem_address   11, dmem_data_in:           0 or 00000000000000000000000000000000, dmem_we: 0, dmem_out: 00000000000000000000000001010011, M_bex_taken: 0, curr rstatus:          0, next rstatus:         15
# WRITEBACK STAGE
# MW_W_op:          10, MW_W_data: 00000000000000000000000001000001
# opcode 00101, rd 10, rs  0, rt  0, shamt  0, aluop 00010, immediate      10, target 010100000000000000000001010
# instrucion: add: 0, addi: 1, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# reg_we: 1, write reg: 10, data          10
# register[1]:           4
# register[2]:           8
# register[3]:          24
# register[4]:          16
# register[5]:           0
# register[6]:           8
# register[7]:          64
# register[8]:           4
# register[9]:           0
# register[10]:          10
# register[11]:           0
# register[12]:           0
# register[13]:           0
# register[14]:           0
# register[15]:           0
# register[16]:           0
# register[17]:           0
# register[18]:           0
# register[19]:           0
# register[20]:           0
# register[21]:           0
# register[22]:           0
# register[23]:           0
# register[24]:           0
# register[25]:           0
# register[26]:           0
# register[27]:           0
# register[28]:           0
# register[29]:           0
# register[30]:           0
# register[31]:          11
#  p.PC_we 1,p.FD_we 1,p.DX_we 1,p.XM_we 1,p.MW_we 1
# <<<NEGEDGE>>>
# FETCH STAGE
# curr_PC,         27, next_PC:         12
# chosen PC:   11, PC_jump: 1, PC_branch: 0, intialize PC: 0
# p.F/D F instruction: 00000000000000000000000000000000
# DECODE STAGE
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# readAReg:  0, readBReg:  0, writeReg: 11
# EXECUTE STAGE
# DX_X_readA:          0, DX_X_readB:          0
# opcode 00101, rd 20, rs  0, rt  0, shamt 15, real aluop: 00000, aluop 11111, immediate    2047, target 101000000000000011111111111
# instrucion: add: 0, addi: 1, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
#  p.readAmemWrite: 0, p.readBmemWrite: 0, p.Amemequal: 0, p.Bmemequal: 0
# p.readAwbWrite: 0, p.readBwbWrite: 0, p.Awbequal: 0, p.Bwbequal: 0
# multdiv_status: 0, toggle_multdiv_status: 0, just_started: 0, multdiv_ready: 0, multdiv_ready,p.start_mul 0, p.start_div 0, p.my_multdiv.count 18
# data_operandA:           0, data_operandB:        2047
# X_alu_result:       2047, X_multdiv_result:          0
# ot equal: 1, less than: 0
# MEMORY STAGE
# XM_M_op:          11, XM_M_readB:          11
# opcode 00100, rd 31, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 111110000000000000000000000
# instrucion: add: 0, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 1, blt: 0, bex: 0, setx: 0
# dmem_address   11, dmem_data_in:          11 or 00000000000000000000000000001011, dmem_we: 0, dmem_out: 00000000000000000000000001010011, M_bex_taken: 0, curr rstatus:          0, next rstatus:         15
# WRITEBACK STAGE
# MW_W_op:          11, MW_W_data: 00000000000000000000000001010011
# opcode 00101, rd 11, rs  0, rt  0, shamt  0, aluop 00010, immediate      11, target 010110000000000000000001011
# instrucion: add: 0, addi: 1, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# reg_we: 1, write reg: 11, data          11
# register[1]:           4
# register[2]:           8
# register[3]:          24
# register[4]:          16
# register[5]:           0
# register[6]:           8
# register[7]:          64
# register[8]:           4
# register[9]:           0
# register[10]:          10
# register[11]:           0
# register[12]:           0
# register[13]:           0
# register[14]:           0
# register[15]:           0
# register[16]:           0
# register[17]:           0
# register[18]:           0
# register[19]:           0
# register[20]:           0
# register[21]:           0
# register[22]:           0
# register[23]:           0
# register[24]:           0
# register[25]:           0
# register[26]:           0
# register[27]:           0
# register[28]:           0
# register[29]:           0
# register[30]:           0
# register[31]:          11
#  p.PC_we 1,p.FD_we 1,p.DX_we 1,p.XM_we 1,p.MW_we 1
# <<<NEGEDGE>>>
# FETCH STAGE
# curr_PC,         27, next_PC:         12
# chosen PC:   11, PC_jump: 1, PC_branch: 0, intialize PC: 0
# p.F/D F instruction: 00101010100000011111111111110110
# DECODE STAGE
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# readAReg:  0, readBReg:  0, writeReg: 11
# EXECUTE STAGE
# DX_X_readA:          0, DX_X_readB:          0
# opcode 00101, rd 20, rs  0, rt  0, shamt 15, real aluop: 00000, aluop 11111, immediate    2047, target 101000000000000011111111111
# instrucion: add: 0, addi: 1, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
#  p.readAmemWrite: 0, p.readBmemWrite: 0, p.Amemequal: 0, p.Bmemequal: 0
# p.readAwbWrite: 0, p.readBwbWrite: 0, p.Awbequal: 0, p.Bwbequal: 0
# multdiv_status: 0, toggle_multdiv_status: 0, just_started: 0, multdiv_ready: 0, multdiv_ready,p.start_mul 0, p.start_div 0, p.my_multdiv.count 18
# data_operandA:           0, data_operandB:        2047
# X_alu_result:       2047, X_multdiv_result:          0
# ot equal: 1, less than: 0
# MEMORY STAGE
# XM_M_op:          11, XM_M_readB:          11
# opcode 00100, rd 31, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 111110000000000000000000000
# instrucion: add: 0, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 1, blt: 0, bex: 0, setx: 0
# dmem_address   11, dmem_data_in:          11 or 00000000000000000000000000001011, dmem_we: 0, dmem_out: 00000000000000000000000001010011, M_bex_taken: 0, curr rstatus:          0, next rstatus:         15
# WRITEBACK STAGE
# MW_W_op:          11, MW_W_data: 00000000000000000000000001010011
# opcode 00101, rd 11, rs  0, rt  0, shamt  0, aluop 00010, immediate      11, target 010110000000000000000001011
# instrucion: add: 0, addi: 1, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# reg_we: 1, write reg: 11, data          11
# register[1]:           4
# register[2]:           8
# register[3]:          24
# register[4]:          16
# register[5]:           0
# register[6]:           8
# register[7]:          64
# register[8]:           4
# register[9]:           0
# register[10]:          10
# register[11]:          11
# register[12]:           0
# register[13]:           0
# register[14]:           0
# register[15]:           0
# register[16]:           0
# register[17]:           0
# register[18]:           0
# register[19]:           0
# register[20]:           0
# register[21]:           0
# register[22]:           0
# register[23]:           0
# register[24]:           0
# register[25]:           0
# register[26]:           0
# register[27]:           0
# register[28]:           0
# register[29]:           0
# register[30]:           0
# register[31]:          11
#  p.PC_we 1,p.FD_we 1,p.DX_we 1,p.XM_we 1,p.MW_we 1
# <<<NEGEDGE>>>
# FETCH STAGE
# curr_PC,         12, next_PC:         13
# chosen PC:   12, PC_jump: 0, PC_branch: 0, intialize PC: 0
# p.F/D F instruction: 00101010100000011111111111110110
# DECODE STAGE
# opcode 00101, rd 10, rs  0, rt 31, shamt 31, aluop 11101, immediate     -10, target 010100000011111111111110110
# instrucion: add: 0, addi: 1, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# readAReg:  0, readBReg: 31, writeReg: 31
# EXECUTE STAGE
# DX_X_readA:          0, DX_X_readB:          0
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, real aluop: 00000, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
#  p.readAmemWrite: 0, p.readBmemWrite: 0, p.Amemequal: 1, p.Bmemequal: 1
# p.readAwbWrite: 0, p.readBwbWrite: 0, p.Awbequal: 0, p.Bwbequal: 0
# multdiv_status: 0, toggle_multdiv_status: 0, just_started: 0, multdiv_ready: 0, multdiv_ready,p.start_mul 0, p.start_div 0, p.my_multdiv.count 19
# data_operandA:           0, data_operandB:           0
# X_alu_result:          0, X_multdiv_result:          0
# ot equal: 0, less than: 0
# MEMORY STAGE
# XM_M_op:        2047, XM_M_readB:           0
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# dmem_address 2047, dmem_data_in:           0 or 00000000000000000000000000000000, dmem_we: 0, dmem_out: 00000000000000000000000001010011, M_bex_taken: 0, curr rstatus:          0, next rstatus:         15
# WRITEBACK STAGE
# MW_W_op:          11, MW_W_data: 00000000000000000000000001010011
# opcode 00100, rd 31, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 111110000000000000000000000
# instrucion: add: 0, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 1, blt: 0, bex: 0, setx: 0
# reg_we: 0, write reg: 31, data          11
# register[1]:           4
# register[2]:           8
# register[3]:          24
# register[4]:          16
# register[5]:           0
# register[6]:           8
# register[7]:          64
# register[8]:           4
# register[9]:           0
# register[10]:          10
# register[11]:          11
# register[12]:           0
# register[13]:           0
# register[14]:           0
# register[15]:           0
# register[16]:           0
# register[17]:           0
# register[18]:           0
# register[19]:           0
# register[20]:           0
# register[21]:           0
# register[22]:           0
# register[23]:           0
# register[24]:           0
# register[25]:           0
# register[26]:           0
# register[27]:           0
# register[28]:           0
# register[29]:           0
# register[30]:           0
# register[31]:          11
#  p.PC_we 1,p.FD_we 1,p.DX_we 1,p.XM_we 1,p.MW_we 1
# <<<NEGEDGE>>>
# FETCH STAGE
# curr_PC,         12, next_PC:         13
# chosen PC:   12, PC_jump: 0, PC_branch: 0, intialize PC: 0
# p.F/D F instruction: 00101010110000011111111111110101
# DECODE STAGE
# opcode 00101, rd 10, rs  0, rt 31, shamt 31, aluop 11101, immediate     -10, target 010100000011111111111110110
# instrucion: add: 0, addi: 1, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# readAReg:  0, readBReg: 31, writeReg: 31
# EXECUTE STAGE
# DX_X_readA:          0, DX_X_readB:          0
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, real aluop: 00000, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
#  p.readAmemWrite: 0, p.readBmemWrite: 0, p.Amemequal: 1, p.Bmemequal: 1
# p.readAwbWrite: 0, p.readBwbWrite: 0, p.Awbequal: 0, p.Bwbequal: 0
# multdiv_status: 0, toggle_multdiv_status: 0, just_started: 0, multdiv_ready: 0, multdiv_ready,p.start_mul 0, p.start_div 0, p.my_multdiv.count 19
# data_operandA:           0, data_operandB:           0
# X_alu_result:          0, X_multdiv_result:          0
# ot equal: 0, less than: 0
# MEMORY STAGE
# XM_M_op:        2047, XM_M_readB:           0
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# dmem_address 2047, dmem_data_in:           0 or 00000000000000000000000000000000, dmem_we: 0, dmem_out: 00000000000000000000000000000000, M_bex_taken: 0, curr rstatus:          0, next rstatus:         15
# WRITEBACK STAGE
# MW_W_op:          11, MW_W_data: 00000000000000000000000001010011
# opcode 00100, rd 31, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 111110000000000000000000000
# instrucion: add: 0, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 1, blt: 0, bex: 0, setx: 0
# reg_we: 0, write reg: 31, data          11
# register[1]:           4
# register[2]:           8
# register[3]:          24
# register[4]:          16
# register[5]:           0
# register[6]:           8
# register[7]:          64
# register[8]:           4
# register[9]:           0
# register[10]:          10
# register[11]:          11
# register[12]:           0
# register[13]:           0
# register[14]:           0
# register[15]:           0
# register[16]:           0
# register[17]:           0
# register[18]:           0
# register[19]:           0
# register[20]:           0
# register[21]:           0
# register[22]:           0
# register[23]:           0
# register[24]:           0
# register[25]:           0
# register[26]:           0
# register[27]:           0
# register[28]:           0
# register[29]:           0
# register[30]:           0
# register[31]:          11
#  p.PC_we 1,p.FD_we 1,p.DX_we 1,p.XM_we 1,p.MW_we 1
# <<<NEGEDGE>>>
# FETCH STAGE
# curr_PC,         13, next_PC:         14
# chosen PC:   13, PC_jump: 0, PC_branch: 0, intialize PC: 0
# p.F/D F instruction: 00101010110000011111111111110101
# DECODE STAGE
# opcode 00101, rd 11, rs  0, rt 31, shamt 31, aluop 11101, immediate     -11, target 010110000011111111111110101
# instrucion: add: 0, addi: 1, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# readAReg:  0, readBReg: 31, writeReg:  0
# EXECUTE STAGE
# DX_X_readA:          0, DX_X_readB:         11
# opcode 00101, rd 10, rs  0, rt 31, shamt 31, real aluop: 00000, aluop 11101, immediate     -10, target 010100000011111111111110110
# instrucion: add: 0, addi: 1, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
#  p.readAmemWrite: 0, p.readBmemWrite: 0, p.Amemequal: 1, p.Bmemequal: 0
# p.readAwbWrite: 0, p.readBwbWrite: 0, p.Awbequal: 1, p.Bwbequal: 0
# multdiv_status: 0, toggle_multdiv_status: 0, just_started: 0, multdiv_ready: 0, multdiv_ready,p.start_mul 0, p.start_div 0, p.my_multdiv.count 20
# data_operandA:           0, data_operandB:         -10
# X_alu_result: 4294967286, X_multdiv_result:          0
# ot equal: 1, less than: 0
# MEMORY STAGE
# XM_M_op:           0, XM_M_readB:           0
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# dmem_address    0, dmem_data_in:           0 or 00000000000000000000000000000000, dmem_we: 0, dmem_out: 00000000000000000000000000000000, M_bex_taken: 0, curr rstatus:          0, next rstatus:         15
# WRITEBACK STAGE
# MW_W_op:        2047, MW_W_data: 00000000000000000000000000000000
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# reg_we: 0, write reg:  0, data        2047
# register[1]:           4
# register[2]:           8
# register[3]:          24
# register[4]:          16
# register[5]:           0
# register[6]:           8
# register[7]:          64
# register[8]:           4
# register[9]:           0
# register[10]:          10
# register[11]:          11
# register[12]:           0
# register[13]:           0
# register[14]:           0
# register[15]:           0
# register[16]:           0
# register[17]:           0
# register[18]:           0
# register[19]:           0
# register[20]:           0
# register[21]:           0
# register[22]:           0
# register[23]:           0
# register[24]:           0
# register[25]:           0
# register[26]:           0
# register[27]:           0
# register[28]:           0
# register[29]:           0
# register[30]:           0
# register[31]:          11
#  p.PC_we 1,p.FD_we 1,p.DX_we 1,p.XM_we 1,p.MW_we 1
# <<<NEGEDGE>>>
# FETCH STAGE
# curr_PC,         13, next_PC:         14
# chosen PC:   13, PC_jump: 0, PC_branch: 0, intialize PC: 0
# p.F/D F instruction: 00010010100101100000000000000001
# DECODE STAGE
# opcode 00101, rd 11, rs  0, rt 31, shamt 31, aluop 11101, immediate     -11, target 010110000011111111111110101
# instrucion: add: 0, addi: 1, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# readAReg:  0, readBReg: 31, writeReg:  0
# EXECUTE STAGE
# DX_X_readA:          0, DX_X_readB:         11
# opcode 00101, rd 10, rs  0, rt 31, shamt 31, real aluop: 00000, aluop 11101, immediate     -10, target 010100000011111111111110110
# instrucion: add: 0, addi: 1, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
#  p.readAmemWrite: 0, p.readBmemWrite: 0, p.Amemequal: 1, p.Bmemequal: 0
# p.readAwbWrite: 0, p.readBwbWrite: 0, p.Awbequal: 1, p.Bwbequal: 0
# multdiv_status: 0, toggle_multdiv_status: 0, just_started: 0, multdiv_ready: 0, multdiv_ready,p.start_mul 0, p.start_div 0, p.my_multdiv.count 20
# data_operandA:           0, data_operandB:         -10
# X_alu_result: 4294967286, X_multdiv_result:          0
# ot equal: 1, less than: 0
# MEMORY STAGE
# XM_M_op:           0, XM_M_readB:           0
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# dmem_address    0, dmem_data_in:           0 or 00000000000000000000000000000000, dmem_we: 0, dmem_out: 00000000000000001011010100000100, M_bex_taken: 0, curr rstatus:          0, next rstatus:         15
# WRITEBACK STAGE
# MW_W_op:        2047, MW_W_data: 00000000000000000000000000000000
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# reg_we: 0, write reg:  0, data        2047
# register[1]:           4
# register[2]:           8
# register[3]:          24
# register[4]:          16
# register[5]:           0
# register[6]:           8
# register[7]:          64
# register[8]:           4
# register[9]:           0
# register[10]:          10
# register[11]:          11
# register[12]:           0
# register[13]:           0
# register[14]:           0
# register[15]:           0
# register[16]:           0
# register[17]:           0
# register[18]:           0
# register[19]:           0
# register[20]:           0
# register[21]:           0
# register[22]:           0
# register[23]:           0
# register[24]:           0
# register[25]:           0
# register[26]:           0
# register[27]:           0
# register[28]:           0
# register[29]:           0
# register[30]:           0
# register[31]:          11
#  p.PC_we 1,p.FD_we 1,p.DX_we 1,p.XM_we 1,p.MW_we 1
# <<<NEGEDGE>>>
# FETCH STAGE
# curr_PC,         14, next_PC:         15
# chosen PC:   14, PC_jump: 0, PC_branch: 0, intialize PC: 0
# p.F/D F instruction: 00010010100101100000000000000001
# DECODE STAGE
# opcode 00010, rd 10, rs 11, rt  0, shamt  0, aluop 00000, immediate       1, target 010100101100000000000000001
# instrucion: add: 0, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 1, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# readAReg: 11, readBReg: 10, writeReg:  0
# EXECUTE STAGE
# DX_X_readA:          0, DX_X_readB:         11
# opcode 00101, rd 11, rs  0, rt 31, shamt 31, real aluop: 00000, aluop 11101, immediate     -11, target 010110000011111111111110101
# instrucion: add: 0, addi: 1, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
#  p.readAmemWrite: 0, p.readBmemWrite: 0, p.Amemequal: 0, p.Bmemequal: 0
# p.readAwbWrite: 0, p.readBwbWrite: 0, p.Awbequal: 1, p.Bwbequal: 0
# multdiv_status: 0, toggle_multdiv_status: 0, just_started: 0, multdiv_ready: 0, multdiv_ready,p.start_mul 0, p.start_div 0, p.my_multdiv.count 21
# data_operandA:           0, data_operandB:         -11
# X_alu_result: 4294967285, X_multdiv_result:          0
# ot equal: 1, less than: 0
# MEMORY STAGE
# XM_M_op:         -10, XM_M_readB:          11
# opcode 00101, rd 10, rs  0, rt 31, shamt 31, aluop 11101, immediate     -10, target 010100000011111111111110110
# instrucion: add: 0, addi: 1, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# dmem_address 4086, dmem_data_in:          11 or 00000000000000000000000000001011, dmem_we: 0, dmem_out: 00000000000000001011010100000100, M_bex_taken: 0, curr rstatus:          0, next rstatus:         15
# WRITEBACK STAGE
# MW_W_op:           0, MW_W_data: 00000000000000001011010100000100
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# reg_we: 0, write reg:  0, data           0
# register[1]:           4
# register[2]:           8
# register[3]:          24
# register[4]:          16
# register[5]:           0
# register[6]:           8
# register[7]:          64
# register[8]:           4
# register[9]:           0
# register[10]:          10
# register[11]:          11
# register[12]:           0
# register[13]:           0
# register[14]:           0
# register[15]:           0
# register[16]:           0
# register[17]:           0
# register[18]:           0
# register[19]:           0
# register[20]:           0
# register[21]:           0
# register[22]:           0
# register[23]:           0
# register[24]:           0
# register[25]:           0
# register[26]:           0
# register[27]:           0
# register[28]:           0
# register[29]:           0
# register[30]:           0
# register[31]:          11
#  p.PC_we 1,p.FD_we 1,p.DX_we 1,p.XM_we 1,p.MW_we 1
# <<<NEGEDGE>>>
# FETCH STAGE
# curr_PC,         14, next_PC:         15
# chosen PC:   14, PC_jump: 0, PC_branch: 0, intialize PC: 0
# p.F/D F instruction: 00101101010000000000011111111111
# DECODE STAGE
# opcode 00010, rd 10, rs 11, rt  0, shamt  0, aluop 00000, immediate       1, target 010100101100000000000000001
# instrucion: add: 0, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 1, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# readAReg: 11, readBReg: 10, writeReg:  0
# EXECUTE STAGE
# DX_X_readA:          0, DX_X_readB:         11
# opcode 00101, rd 11, rs  0, rt 31, shamt 31, real aluop: 00000, aluop 11101, immediate     -11, target 010110000011111111111110101
# instrucion: add: 0, addi: 1, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
#  p.readAmemWrite: 0, p.readBmemWrite: 0, p.Amemequal: 0, p.Bmemequal: 0
# p.readAwbWrite: 0, p.readBwbWrite: 0, p.Awbequal: 1, p.Bwbequal: 0
# multdiv_status: 0, toggle_multdiv_status: 0, just_started: 0, multdiv_ready: 0, multdiv_ready,p.start_mul 0, p.start_div 0, p.my_multdiv.count 21
# data_operandA:           0, data_operandB:         -11
# X_alu_result: 4294967285, X_multdiv_result:          0
# ot equal: 1, less than: 0
# MEMORY STAGE
# XM_M_op:         -10, XM_M_readB:          11
# opcode 00101, rd 10, rs  0, rt 31, shamt 31, aluop 11101, immediate     -10, target 010100000011111111111110110
# instrucion: add: 0, addi: 1, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# dmem_address 4086, dmem_data_in:          11 or 00000000000000000000000000001011, dmem_we: 0, dmem_out: 00000000000000000000000000000000, M_bex_taken: 0, curr rstatus:          0, next rstatus:         15
# WRITEBACK STAGE
# MW_W_op:           0, MW_W_data: 00000000000000001011010100000100
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# reg_we: 0, write reg:  0, data           0
# register[1]:           4
# register[2]:           8
# register[3]:          24
# register[4]:          16
# register[5]:           0
# register[6]:           8
# register[7]:          64
# register[8]:           4
# register[9]:           0
# register[10]:          10
# register[11]:          11
# register[12]:           0
# register[13]:           0
# register[14]:           0
# register[15]:           0
# register[16]:           0
# register[17]:           0
# register[18]:           0
# register[19]:           0
# register[20]:           0
# register[21]:           0
# register[22]:           0
# register[23]:           0
# register[24]:           0
# register[25]:           0
# register[26]:           0
# register[27]:           0
# register[28]:           0
# register[29]:           0
# register[30]:           0
# register[31]:          11
#  p.PC_we 1,p.FD_we 1,p.DX_we 1,p.XM_we 1,p.MW_we 1
# <<<NEGEDGE>>>
# FETCH STAGE
# curr_PC,         15, next_PC:         16
# chosen PC:   15, PC_jump: 0, PC_branch: 0, intialize PC: 0
# p.F/D F instruction: 00101101010000000000011111111111
# DECODE STAGE
# opcode 00101, rd 21, rs  0, rt  0, shamt 15, aluop 11111, immediate    2047, target 101010000000000011111111111
# instrucion: add: 0, addi: 1, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# readAReg:  0, readBReg:  0, writeReg: 10
# EXECUTE STAGE
# DX_X_readA:         11, DX_X_readB:         10
# opcode 00010, rd 10, rs 11, rt  0, shamt  0, real aluop: 00001, aluop 00000, immediate       1, target 010100101100000000000000001
# instrucion: add: 0, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 1, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
#  p.readAmemWrite: 1, p.readBmemWrite: 0, p.Amemequal: 1, p.Bmemequal: 0
# p.readAwbWrite: 0, p.readBwbWrite: 1, p.Awbequal: 0, p.Bwbequal: 1
# multdiv_status: 0, toggle_multdiv_status: 0, just_started: 0, multdiv_ready: 0, multdiv_ready,p.start_mul 0, p.start_div 0, p.my_multdiv.count 22
# data_operandA:         -11, data_operandB:         -10
# X_alu_result: 4294967295, X_multdiv_result:          0
# ot equal: 1, less than: 1
# MEMORY STAGE
# XM_M_op:         -11, XM_M_readB:          11
# opcode 00101, rd 11, rs  0, rt 31, shamt 31, aluop 11101, immediate     -11, target 010110000011111111111110101
# instrucion: add: 0, addi: 1, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# dmem_address 4085, dmem_data_in:          11 or 00000000000000000000000000001011, dmem_we: 0, dmem_out: 00000000000000000000000000000000, M_bex_taken: 0, curr rstatus:          0, next rstatus:         15
# WRITEBACK STAGE
# MW_W_op:         -10, MW_W_data: 00000000000000000000000000000000
# opcode 00101, rd 10, rs  0, rt 31, shamt 31, aluop 11101, immediate     -10, target 010100000011111111111110110
# instrucion: add: 0, addi: 1, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# reg_we: 1, write reg: 10, data         -10
# register[1]:           4
# register[2]:           8
# register[3]:          24
# register[4]:          16
# register[5]:           0
# register[6]:           8
# register[7]:          64
# register[8]:           4
# register[9]:           0
# register[10]:          10
# register[11]:          11
# register[12]:           0
# register[13]:           0
# register[14]:           0
# register[15]:           0
# register[16]:           0
# register[17]:           0
# register[18]:           0
# register[19]:           0
# register[20]:           0
# register[21]:           0
# register[22]:           0
# register[23]:           0
# register[24]:           0
# register[25]:           0
# register[26]:           0
# register[27]:           0
# register[28]:           0
# register[29]:           0
# register[30]:           0
# register[31]:          11
#  p.PC_we 1,p.FD_we 1,p.DX_we 1,p.XM_we 1,p.MW_we 1
# <<<NEGEDGE>>>
# FETCH STAGE
# curr_PC,         15, next_PC:         16
# chosen PC:   15, PC_jump: 0, PC_branch: 0, intialize PC: 0
# p.F/D F instruction: 00101011000000000000000000001100
# DECODE STAGE
# opcode 00101, rd 21, rs  0, rt  0, shamt 15, aluop 11111, immediate    2047, target 101010000000000011111111111
# instrucion: add: 0, addi: 1, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# readAReg:  0, readBReg:  0, writeReg: 10
# EXECUTE STAGE
# DX_X_readA:         11, DX_X_readB:         10
# opcode 00010, rd 10, rs 11, rt  0, shamt  0, real aluop: 00001, aluop 00000, immediate       1, target 010100101100000000000000001
# instrucion: add: 0, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 1, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
#  p.readAmemWrite: 1, p.readBmemWrite: 0, p.Amemequal: 1, p.Bmemequal: 0
# p.readAwbWrite: 0, p.readBwbWrite: 1, p.Awbequal: 0, p.Bwbequal: 1
# multdiv_status: 0, toggle_multdiv_status: 0, just_started: 0, multdiv_ready: 0, multdiv_ready,p.start_mul 0, p.start_div 0, p.my_multdiv.count 22
# data_operandA:         -11, data_operandB:         -10
# X_alu_result: 4294967295, X_multdiv_result:          0
# ot equal: 1, less than: 1
# MEMORY STAGE
# XM_M_op:         -11, XM_M_readB:          11
# opcode 00101, rd 11, rs  0, rt 31, shamt 31, aluop 11101, immediate     -11, target 010110000011111111111110101
# instrucion: add: 0, addi: 1, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# dmem_address 4085, dmem_data_in:          11 or 00000000000000000000000000001011, dmem_we: 0, dmem_out: 00000000000000000000000000000000, M_bex_taken: 0, curr rstatus:          0, next rstatus:         15
# WRITEBACK STAGE
# MW_W_op:         -10, MW_W_data: 00000000000000000000000000000000
# opcode 00101, rd 10, rs  0, rt 31, shamt 31, aluop 11101, immediate     -10, target 010100000011111111111110110
# instrucion: add: 0, addi: 1, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# reg_we: 1, write reg: 10, data         -10
# register[1]:           4
# register[2]:           8
# register[3]:          24
# register[4]:          16
# register[5]:           0
# register[6]:           8
# register[7]:          64
# register[8]:           4
# register[9]:           0
# register[10]:         -10
# register[11]:          11
# register[12]:           0
# register[13]:           0
# register[14]:           0
# register[15]:           0
# register[16]:           0
# register[17]:           0
# register[18]:           0
# register[19]:           0
# register[20]:           0
# register[21]:           0
# register[22]:           0
# register[23]:           0
# register[24]:           0
# register[25]:           0
# register[26]:           0
# register[27]:           0
# register[28]:           0
# register[29]:           0
# register[30]:           0
# register[31]:          11
#  p.PC_we 1,p.FD_we 1,p.DX_we 1,p.XM_we 1,p.MW_we 1
# <<<NEGEDGE>>>
# FETCH STAGE
# curr_PC,         16, next_PC:         16
# chosen PC:   15, PC_jump: 0, PC_branch: 1, intialize PC: 0
# p.F/D F instruction: 00101011000000000000000000001100
# DECODE STAGE
# opcode 00101, rd 12, rs  0, rt  0, shamt  0, aluop 00011, immediate      12, target 011000000000000000000001100
# instrucion: add: 0, addi: 1, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# readAReg:  0, readBReg:  0, writeReg: 11
# EXECUTE STAGE
# DX_X_readA:          0, DX_X_readB:          0
# opcode 00101, rd 21, rs  0, rt  0, shamt 15, real aluop: 00000, aluop 11111, immediate    2047, target 101010000000000011111111111
# instrucion: add: 0, addi: 1, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
#  p.readAmemWrite: 0, p.readBmemWrite: 0, p.Amemequal: 0, p.Bmemequal: 0
# p.readAwbWrite: 0, p.readBwbWrite: 0, p.Awbequal: 0, p.Bwbequal: 0
# multdiv_status: 0, toggle_multdiv_status: 0, just_started: 0, multdiv_ready: 0, multdiv_ready,p.start_mul 0, p.start_div 0, p.my_multdiv.count 23
# data_operandA:           0, data_operandB:        2047
# X_alu_result:       2047, X_multdiv_result:          0
# ot equal: 1, less than: 0
# MEMORY STAGE
# XM_M_op:          -1, XM_M_readB:         -10
# opcode 00010, rd 10, rs 11, rt  0, shamt  0, aluop 00000, immediate       1, target 010100101100000000000000001
# instrucion: add: 0, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 1, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# dmem_address 4095, dmem_data_in:         -10 or 11111111111111111111111111110110, dmem_we: 0, dmem_out: 00000000000000000000000000000000, M_bex_taken: 0, curr rstatus:          0, next rstatus:         15
# WRITEBACK STAGE
# MW_W_op:         -11, MW_W_data: 00000000000000000000000000000000
# opcode 00101, rd 11, rs  0, rt 31, shamt 31, aluop 11101, immediate     -11, target 010110000011111111111110101
# instrucion: add: 0, addi: 1, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# reg_we: 1, write reg: 11, data         -11
# register[1]:           4
# register[2]:           8
# register[3]:          24
# register[4]:          16
# register[5]:           0
# register[6]:           8
# register[7]:          64
# register[8]:           4
# register[9]:           0
# register[10]:         -10
# register[11]:          11
# register[12]:           0
# register[13]:           0
# register[14]:           0
# register[15]:           0
# register[16]:           0
# register[17]:           0
# register[18]:           0
# register[19]:           0
# register[20]:           0
# register[21]:           0
# register[22]:           0
# register[23]:           0
# register[24]:           0
# register[25]:           0
# register[26]:           0
# register[27]:           0
# register[28]:           0
# register[29]:           0
# register[30]:           0
# register[31]:          11
#  p.PC_we 1,p.FD_we 1,p.DX_we 1,p.XM_we 1,p.MW_we 1
# <<<NEGEDGE>>>
# FETCH STAGE
# curr_PC,         16, next_PC:         16
# chosen PC:   15, PC_jump: 0, PC_branch: 1, intialize PC: 0
# p.F/D F instruction: 00101011000000000000000000001100
# DECODE STAGE
# opcode 00101, rd 12, rs  0, rt  0, shamt  0, aluop 00011, immediate      12, target 011000000000000000000001100
# instrucion: add: 0, addi: 1, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# readAReg:  0, readBReg:  0, writeReg: 11
# EXECUTE STAGE
# DX_X_readA:          0, DX_X_readB:          0
# opcode 00101, rd 21, rs  0, rt  0, shamt 15, real aluop: 00000, aluop 11111, immediate    2047, target 101010000000000011111111111
# instrucion: add: 0, addi: 1, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
#  p.readAmemWrite: 0, p.readBmemWrite: 0, p.Amemequal: 0, p.Bmemequal: 0
# p.readAwbWrite: 0, p.readBwbWrite: 0, p.Awbequal: 0, p.Bwbequal: 0
# multdiv_status: 0, toggle_multdiv_status: 0, just_started: 0, multdiv_ready: 0, multdiv_ready,p.start_mul 0, p.start_div 0, p.my_multdiv.count 23
# data_operandA:           0, data_operandB:        2047
# X_alu_result:       2047, X_multdiv_result:          0
# ot equal: 1, less than: 0
# MEMORY STAGE
# XM_M_op:          -1, XM_M_readB:         -10
# opcode 00010, rd 10, rs 11, rt  0, shamt  0, aluop 00000, immediate       1, target 010100101100000000000000001
# instrucion: add: 0, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 1, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# dmem_address 4095, dmem_data_in:         -10 or 11111111111111111111111111110110, dmem_we: 0, dmem_out: 00000000000000000000000000000000, M_bex_taken: 0, curr rstatus:          0, next rstatus:         15
# WRITEBACK STAGE
# MW_W_op:         -11, MW_W_data: 00000000000000000000000000000000
# opcode 00101, rd 11, rs  0, rt 31, shamt 31, aluop 11101, immediate     -11, target 010110000011111111111110101
# instrucion: add: 0, addi: 1, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# reg_we: 1, write reg: 11, data         -11
# register[1]:           4
# register[2]:           8
# register[3]:          24
# register[4]:          16
# register[5]:           0
# register[6]:           8
# register[7]:          64
# register[8]:           4
# register[9]:           0
# register[10]:         -10
# register[11]:         -11
# register[12]:           0
# register[13]:           0
# register[14]:           0
# register[15]:           0
# register[16]:           0
# register[17]:           0
# register[18]:           0
# register[19]:           0
# register[20]:           0
# register[21]:           0
# register[22]:           0
# register[23]:           0
# register[24]:           0
# register[25]:           0
# register[26]:           0
# register[27]:           0
# register[28]:           0
# register[29]:           0
# register[30]:           0
# register[31]:          11
#  p.PC_we 1,p.FD_we 1,p.DX_we 1,p.XM_we 1,p.MW_we 1
# <<<NEGEDGE>>>
# FETCH STAGE
# curr_PC,         16, next_PC:         17
# chosen PC:   16, PC_jump: 0, PC_branch: 0, intialize PC: 0
# p.F/D F instruction: 00101011000000000000000000001100
# DECODE STAGE
# opcode 00101, rd 12, rs  0, rt  0, shamt  0, aluop 00011, immediate      12, target 011000000000000000000001100
# instrucion: add: 0, addi: 1, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# readAReg:  0, readBReg:  0, writeReg: 10
# EXECUTE STAGE
# DX_X_readA:          0, DX_X_readB:          0
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, real aluop: 00000, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
#  p.readAmemWrite: 0, p.readBmemWrite: 0, p.Amemequal: 1, p.Bmemequal: 1
# p.readAwbWrite: 0, p.readBwbWrite: 0, p.Awbequal: 0, p.Bwbequal: 0
# multdiv_status: 0, toggle_multdiv_status: 0, just_started: 0, multdiv_ready: 0, multdiv_ready,p.start_mul 0, p.start_div 0, p.my_multdiv.count 24
# data_operandA:           0, data_operandB:           0
# X_alu_result:          0, X_multdiv_result:          0
# ot equal: 0, less than: 0
# MEMORY STAGE
# XM_M_op:        2047, XM_M_readB:           0
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# dmem_address 2047, dmem_data_in:           0 or 00000000000000000000000000000000, dmem_we: 0, dmem_out: 00000000000000000000000000000000, M_bex_taken: 0, curr rstatus:          0, next rstatus:         15
# WRITEBACK STAGE
# MW_W_op:          -1, MW_W_data: 00000000000000000000000000000000
# opcode 00010, rd 10, rs 11, rt  0, shamt  0, aluop 00000, immediate       1, target 010100101100000000000000001
# instrucion: add: 0, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 1, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# reg_we: 0, write reg: 10, data          -1
# register[1]:           4
# register[2]:           8
# register[3]:          24
# register[4]:          16
# register[5]:           0
# register[6]:           8
# register[7]:          64
# register[8]:           4
# register[9]:           0
# register[10]:         -10
# register[11]:         -11
# register[12]:           0
# register[13]:           0
# register[14]:           0
# register[15]:           0
# register[16]:           0
# register[17]:           0
# register[18]:           0
# register[19]:           0
# register[20]:           0
# register[21]:           0
# register[22]:           0
# register[23]:           0
# register[24]:           0
# register[25]:           0
# register[26]:           0
# register[27]:           0
# register[28]:           0
# register[29]:           0
# register[30]:           0
# register[31]:          11
#  p.PC_we 1,p.FD_we 1,p.DX_we 1,p.XM_we 1,p.MW_we 1
# <<<NEGEDGE>>>
# FETCH STAGE
# curr_PC,         16, next_PC:         17
# chosen PC:   16, PC_jump: 0, PC_branch: 0, intialize PC: 0
# p.F/D F instruction: 00111011000000011111110110000000
# DECODE STAGE
# opcode 00101, rd 12, rs  0, rt  0, shamt  0, aluop 00011, immediate      12, target 011000000000000000000001100
# instrucion: add: 0, addi: 1, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# readAReg:  0, readBReg:  0, writeReg: 10
# EXECUTE STAGE
# DX_X_readA:          0, DX_X_readB:          0
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, real aluop: 00000, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
#  p.readAmemWrite: 0, p.readBmemWrite: 0, p.Amemequal: 1, p.Bmemequal: 1
# p.readAwbWrite: 0, p.readBwbWrite: 0, p.Awbequal: 0, p.Bwbequal: 0
# multdiv_status: 0, toggle_multdiv_status: 0, just_started: 0, multdiv_ready: 0, multdiv_ready,p.start_mul 0, p.start_div 0, p.my_multdiv.count 24
# data_operandA:           0, data_operandB:           0
# X_alu_result:          0, X_multdiv_result:          0
# ot equal: 0, less than: 0
# MEMORY STAGE
# XM_M_op:        2047, XM_M_readB:           0
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# dmem_address 2047, dmem_data_in:           0 or 00000000000000000000000000000000, dmem_we: 0, dmem_out: 00000000000000000000000000000000, M_bex_taken: 0, curr rstatus:          0, next rstatus:         15
# WRITEBACK STAGE
# MW_W_op:          -1, MW_W_data: 00000000000000000000000000000000
# opcode 00010, rd 10, rs 11, rt  0, shamt  0, aluop 00000, immediate       1, target 010100101100000000000000001
# instrucion: add: 0, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 1, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# reg_we: 0, write reg: 10, data          -1
# register[1]:           4
# register[2]:           8
# register[3]:          24
# register[4]:          16
# register[5]:           0
# register[6]:           8
# register[7]:          64
# register[8]:           4
# register[9]:           0
# register[10]:         -10
# register[11]:         -11
# register[12]:           0
# register[13]:           0
# register[14]:           0
# register[15]:           0
# register[16]:           0
# register[17]:           0
# register[18]:           0
# register[19]:           0
# register[20]:           0
# register[21]:           0
# register[22]:           0
# register[23]:           0
# register[24]:           0
# register[25]:           0
# register[26]:           0
# register[27]:           0
# register[28]:           0
# register[29]:           0
# register[30]:           0
# register[31]:          11
#  p.PC_we 1,p.FD_we 1,p.DX_we 1,p.XM_we 1,p.MW_we 1
# <<<NEGEDGE>>>
# FETCH STAGE
# curr_PC,         17, next_PC:         18
# chosen PC:   17, PC_jump: 0, PC_branch: 0, intialize PC: 0
# p.F/D F instruction: 00111011000000011111110110000000
# DECODE STAGE
# opcode 00111, rd 12, rs  0, rt 31, shamt 27, aluop 00000, immediate    -640, target 011000000011111110110000000
# instrucion: add: 0, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 1, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# readAReg:  0, readBReg: 12, writeReg:  0
# EXECUTE STAGE
# DX_X_readA:          0, DX_X_readB:          0
# opcode 00101, rd 12, rs  0, rt  0, shamt  0, real aluop: 00000, aluop 00011, immediate      12, target 011000000000000000000001100
# instrucion: add: 0, addi: 1, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
#  p.readAmemWrite: 0, p.readBmemWrite: 0, p.Amemequal: 1, p.Bmemequal: 1
# p.readAwbWrite: 0, p.readBwbWrite: 0, p.Awbequal: 1, p.Bwbequal: 1
# multdiv_status: 0, toggle_multdiv_status: 0, just_started: 0, multdiv_ready: 0, multdiv_ready,p.start_mul 0, p.start_div 0, p.my_multdiv.count 25
# data_operandA:           0, data_operandB:          12
# X_alu_result:         12, X_multdiv_result:          0
# ot equal: 1, less than: 0
# MEMORY STAGE
# XM_M_op:           0, XM_M_readB:           0
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# dmem_address    0, dmem_data_in:           0 or 00000000000000000000000000000000, dmem_we: 0, dmem_out: 00000000000000000000000000000000, M_bex_taken: 0, curr rstatus:          0, next rstatus:         15
# WRITEBACK STAGE
# MW_W_op:        2047, MW_W_data: 00000000000000000000000000000000
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# reg_we: 0, write reg:  0, data        2047
# register[1]:           4
# register[2]:           8
# register[3]:          24
# register[4]:          16
# register[5]:           0
# register[6]:           8
# register[7]:          64
# register[8]:           4
# register[9]:           0
# register[10]:         -10
# register[11]:         -11
# register[12]:           0
# register[13]:           0
# register[14]:           0
# register[15]:           0
# register[16]:           0
# register[17]:           0
# register[18]:           0
# register[19]:           0
# register[20]:           0
# register[21]:           0
# register[22]:           0
# register[23]:           0
# register[24]:           0
# register[25]:           0
# register[26]:           0
# register[27]:           0
# register[28]:           0
# register[29]:           0
# register[30]:           0
# register[31]:          11
#  p.PC_we 1,p.FD_we 1,p.DX_we 1,p.XM_we 1,p.MW_we 1
# <<<NEGEDGE>>>
# FETCH STAGE
# curr_PC,         17, next_PC:         18
# chosen PC:   17, PC_jump: 0, PC_branch: 0, intialize PC: 0
# p.F/D F instruction: 01000011010000011111110110000000
# DECODE STAGE
# opcode 00111, rd 12, rs  0, rt 31, shamt 27, aluop 00000, immediate    -640, target 011000000011111110110000000
# instrucion: add: 0, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 1, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# readAReg:  0, readBReg: 12, writeReg:  0
# EXECUTE STAGE
# DX_X_readA:          0, DX_X_readB:          0
# opcode 00101, rd 12, rs  0, rt  0, shamt  0, real aluop: 00000, aluop 00011, immediate      12, target 011000000000000000000001100
# instrucion: add: 0, addi: 1, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
#  p.readAmemWrite: 0, p.readBmemWrite: 0, p.Amemequal: 1, p.Bmemequal: 1
# p.readAwbWrite: 0, p.readBwbWrite: 0, p.Awbequal: 1, p.Bwbequal: 1
# multdiv_status: 0, toggle_multdiv_status: 0, just_started: 0, multdiv_ready: 0, multdiv_ready,p.start_mul 0, p.start_div 0, p.my_multdiv.count 25
# data_operandA:           0, data_operandB:          12
# X_alu_result:         12, X_multdiv_result:          0
# ot equal: 1, less than: 0
# MEMORY STAGE
# XM_M_op:           0, XM_M_readB:           0
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# dmem_address    0, dmem_data_in:           0 or 00000000000000000000000000000000, dmem_we: 0, dmem_out: 00000000000000001011010100000100, M_bex_taken: 0, curr rstatus:          0, next rstatus:         15
# WRITEBACK STAGE
# MW_W_op:        2047, MW_W_data: 00000000000000000000000000000000
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# reg_we: 0, write reg:  0, data        2047
# register[1]:           4
# register[2]:           8
# register[3]:          24
# register[4]:          16
# register[5]:           0
# register[6]:           8
# register[7]:          64
# register[8]:           4
# register[9]:           0
# register[10]:         -10
# register[11]:         -11
# register[12]:           0
# register[13]:           0
# register[14]:           0
# register[15]:           0
# register[16]:           0
# register[17]:           0
# register[18]:           0
# register[19]:           0
# register[20]:           0
# register[21]:           0
# register[22]:           0
# register[23]:           0
# register[24]:           0
# register[25]:           0
# register[26]:           0
# register[27]:           0
# register[28]:           0
# register[29]:           0
# register[30]:           0
# register[31]:          11
#  p.PC_we 1,p.FD_we 1,p.DX_we 1,p.XM_we 1,p.MW_we 1
# <<<NEGEDGE>>>
# FETCH STAGE
# curr_PC,         18, next_PC:         19
# chosen PC:   18, PC_jump: 0, PC_branch: 0, intialize PC: 0
# p.F/D F instruction: 01000011010000011111110110000000
# DECODE STAGE
# opcode 01000, rd 13, rs  0, rt 31, shamt 27, aluop 00000, immediate    -640, target 011010000011111110110000000
# instrucion: add: 0, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 1, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# readAReg:  0, readBReg: 13, writeReg:  0
# EXECUTE STAGE
# DX_X_readA:          0, DX_X_readB:          0
# opcode 00111, rd 12, rs  0, rt 31, shamt 27, real aluop: 00000, aluop 00000, immediate    -640, target 011000000011111110110000000
# instrucion: add: 0, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 1, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
#  p.readAmemWrite: 0, p.readBmemWrite: 1, p.Amemequal: 0, p.Bmemequal: 1
# p.readAwbWrite: 0, p.readBwbWrite: 0, p.Awbequal: 1, p.Bwbequal: 0
# multdiv_status: 0, toggle_multdiv_status: 0, just_started: 0, multdiv_ready: 0, multdiv_ready,p.start_mul 0, p.start_div 0, p.my_multdiv.count 26
# data_operandA:           0, data_operandB:        -640
# X_alu_result: 4294966656, X_multdiv_result:          0
# ot equal: 1, less than: 0
# MEMORY STAGE
# XM_M_op:          12, XM_M_readB:           0
# opcode 00101, rd 12, rs  0, rt  0, shamt  0, aluop 00011, immediate      12, target 011000000000000000000001100
# instrucion: add: 0, addi: 1, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# dmem_address   12, dmem_data_in:           0 or 00000000000000000000000000000000, dmem_we: 0, dmem_out: 00000000000000001011010100000100, M_bex_taken: 0, curr rstatus:          0, next rstatus:         15
# WRITEBACK STAGE
# MW_W_op:           0, MW_W_data: 00000000000000001011010100000100
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# reg_we: 0, write reg:  0, data           0
# register[1]:           4
# register[2]:           8
# register[3]:          24
# register[4]:          16
# register[5]:           0
# register[6]:           8
# register[7]:          64
# register[8]:           4
# register[9]:           0
# register[10]:         -10
# register[11]:         -11
# register[12]:           0
# register[13]:           0
# register[14]:           0
# register[15]:           0
# register[16]:           0
# register[17]:           0
# register[18]:           0
# register[19]:           0
# register[20]:           0
# register[21]:           0
# register[22]:           0
# register[23]:           0
# register[24]:           0
# register[25]:           0
# register[26]:           0
# register[27]:           0
# register[28]:           0
# register[29]:           0
# register[30]:           0
# register[31]:          11
#  p.PC_we 1,p.FD_we 1,p.DX_we 1,p.XM_we 1,p.MW_we 1
# <<<NEGEDGE>>>
# FETCH STAGE
# curr_PC,         18, next_PC:         19
# chosen PC:   18, PC_jump: 0, PC_branch: 0, intialize PC: 0
# p.F/D F instruction: 10110000000000000000000000010110
# DECODE STAGE
# opcode 01000, rd 13, rs  0, rt 31, shamt 27, aluop 00000, immediate    -640, target 011010000011111110110000000
# instrucion: add: 0, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 1, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# readAReg:  0, readBReg: 13, writeReg:  0
# EXECUTE STAGE
# DX_X_readA:          0, DX_X_readB:          0
# opcode 00111, rd 12, rs  0, rt 31, shamt 27, real aluop: 00000, aluop 00000, immediate    -640, target 011000000011111110110000000
# instrucion: add: 0, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 1, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
#  p.readAmemWrite: 0, p.readBmemWrite: 1, p.Amemequal: 0, p.Bmemequal: 1
# p.readAwbWrite: 0, p.readBwbWrite: 0, p.Awbequal: 1, p.Bwbequal: 0
# multdiv_status: 0, toggle_multdiv_status: 0, just_started: 0, multdiv_ready: 0, multdiv_ready,p.start_mul 0, p.start_div 0, p.my_multdiv.count 26
# data_operandA:           0, data_operandB:        -640
# X_alu_result: 4294966656, X_multdiv_result:          0
# ot equal: 1, less than: 0
# MEMORY STAGE
# XM_M_op:          12, XM_M_readB:           0
# opcode 00101, rd 12, rs  0, rt  0, shamt  0, aluop 00011, immediate      12, target 011000000000000000000001100
# instrucion: add: 0, addi: 1, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# dmem_address   12, dmem_data_in:           0 or 00000000000000000000000000000000, dmem_we: 0, dmem_out: 00000000000000000000000001000100, M_bex_taken: 0, curr rstatus:          0, next rstatus:         15
# WRITEBACK STAGE
# MW_W_op:           0, MW_W_data: 00000000000000001011010100000100
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# reg_we: 0, write reg:  0, data           0
# register[1]:           4
# register[2]:           8
# register[3]:          24
# register[4]:          16
# register[5]:           0
# register[6]:           8
# register[7]:          64
# register[8]:           4
# register[9]:           0
# register[10]:         -10
# register[11]:         -11
# register[12]:           0
# register[13]:           0
# register[14]:           0
# register[15]:           0
# register[16]:           0
# register[17]:           0
# register[18]:           0
# register[19]:           0
# register[20]:           0
# register[21]:           0
# register[22]:           0
# register[23]:           0
# register[24]:           0
# register[25]:           0
# register[26]:           0
# register[27]:           0
# register[28]:           0
# register[29]:           0
# register[30]:           0
# register[31]:          11
#  p.PC_we 1,p.FD_we 1,p.DX_we 1,p.XM_we 1,p.MW_we 1
# <<<NEGEDGE>>>
# FETCH STAGE
# curr_PC,         19, next_PC:         20
# chosen PC:   19, PC_jump: 0, PC_branch: 0, intialize PC: 0
# p.F/D F instruction: 10110000000000000000000000010110
# DECODE STAGE
# opcode 10110, rd  0, rs  0, rt  0, shamt  0, aluop 00101, immediate      22, target 000000000000000000000010110
# instrucion: add: 0, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 1, setx: 0
# readAReg:  0, readBReg:  0, writeReg: 12
# EXECUTE STAGE
# DX_X_readA:          0, DX_X_readB:          0
# opcode 01000, rd 13, rs  0, rt 31, shamt 27, real aluop: 00000, aluop 00000, immediate    -640, target 011010000011111110110000000
# instrucion: add: 0, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 1, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
#  p.readAmemWrite: 0, p.readBmemWrite: 0, p.Amemequal: 0, p.Bmemequal: 0
# p.readAwbWrite: 0, p.readBwbWrite: 0, p.Awbequal: 0, p.Bwbequal: 0
# multdiv_status: 0, toggle_multdiv_status: 0, just_started: 0, multdiv_ready: 0, multdiv_ready,p.start_mul 0, p.start_div 0, p.my_multdiv.count 27
# data_operandA:           0, data_operandB:        -640
# X_alu_result: 4294966656, X_multdiv_result:          0
# ot equal: 1, less than: 0
# MEMORY STAGE
# XM_M_op:        -640, XM_M_readB:          12
# opcode 00111, rd 12, rs  0, rt 31, shamt 27, aluop 00000, immediate    -640, target 011000000011111110110000000
# instrucion: add: 0, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 1, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# dmem_address 3456, dmem_data_in:          12 or 00000000000000000000000000001100, dmem_we: 1, dmem_out: 00000000000000000000000001000100, M_bex_taken: 0, curr rstatus:          0, next rstatus:         15
# WRITEBACK STAGE
# MW_W_op:          12, MW_W_data: 00000000000000000000000001000100
# opcode 00101, rd 12, rs  0, rt  0, shamt  0, aluop 00011, immediate      12, target 011000000000000000000001100
# instrucion: add: 0, addi: 1, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# reg_we: 1, write reg: 12, data          12
# register[1]:           4
# register[2]:           8
# register[3]:          24
# register[4]:          16
# register[5]:           0
# register[6]:           8
# register[7]:          64
# register[8]:           4
# register[9]:           0
# register[10]:         -10
# register[11]:         -11
# register[12]:           0
# register[13]:           0
# register[14]:           0
# register[15]:           0
# register[16]:           0
# register[17]:           0
# register[18]:           0
# register[19]:           0
# register[20]:           0
# register[21]:           0
# register[22]:           0
# register[23]:           0
# register[24]:           0
# register[25]:           0
# register[26]:           0
# register[27]:           0
# register[28]:           0
# register[29]:           0
# register[30]:           0
# register[31]:          11
#  p.PC_we 1,p.FD_we 1,p.DX_we 1,p.XM_we 1,p.MW_we 1
# <<<NEGEDGE>>>
# FETCH STAGE
# curr_PC,         19, next_PC:         20
# chosen PC:   19, PC_jump: 0, PC_branch: 0, intialize PC: 0
# p.F/D F instruction: 10101000000000000000000000000010
# DECODE STAGE
# opcode 10110, rd  0, rs  0, rt  0, shamt  0, aluop 00101, immediate      22, target 000000000000000000000010110
# instrucion: add: 0, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 1, setx: 0
# readAReg:  0, readBReg:  0, writeReg: 12
# EXECUTE STAGE
# DX_X_readA:          0, DX_X_readB:          0
# opcode 01000, rd 13, rs  0, rt 31, shamt 27, real aluop: 00000, aluop 00000, immediate    -640, target 011010000011111110110000000
# instrucion: add: 0, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 1, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
#  p.readAmemWrite: 0, p.readBmemWrite: 0, p.Amemequal: 0, p.Bmemequal: 0
# p.readAwbWrite: 0, p.readBwbWrite: 0, p.Awbequal: 0, p.Bwbequal: 0
# multdiv_status: 0, toggle_multdiv_status: 0, just_started: 0, multdiv_ready: 0, multdiv_ready,p.start_mul 0, p.start_div 0, p.my_multdiv.count 27
# data_operandA:           0, data_operandB:        -640
# X_alu_result: 4294966656, X_multdiv_result:          0
# ot equal: 1, less than: 0
# MEMORY STAGE
# XM_M_op:        -640, XM_M_readB:          12
# opcode 00111, rd 12, rs  0, rt 31, shamt 27, aluop 00000, immediate    -640, target 011000000011111110110000000
# instrucion: add: 0, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 1, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# dmem_address 3456, dmem_data_in:          12 or 00000000000000000000000000001100, dmem_we: 1, dmem_out: 00000000000000000000000000001100, M_bex_taken: 0, curr rstatus:          0, next rstatus:         15
# WRITEBACK STAGE
# MW_W_op:          12, MW_W_data: 00000000000000000000000001000100
# opcode 00101, rd 12, rs  0, rt  0, shamt  0, aluop 00011, immediate      12, target 011000000000000000000001100
# instrucion: add: 0, addi: 1, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# reg_we: 1, write reg: 12, data          12
# register[1]:           4
# register[2]:           8
# register[3]:          24
# register[4]:          16
# register[5]:           0
# register[6]:           8
# register[7]:          64
# register[8]:           4
# register[9]:           0
# register[10]:         -10
# register[11]:         -11
# register[12]:          12
# register[13]:           0
# register[14]:           0
# register[15]:           0
# register[16]:           0
# register[17]:           0
# register[18]:           0
# register[19]:           0
# register[20]:           0
# register[21]:           0
# register[22]:           0
# register[23]:           0
# register[24]:           0
# register[25]:           0
# register[26]:           0
# register[27]:           0
# register[28]:           0
# register[29]:           0
# register[30]:           0
# register[31]:          11
#  p.PC_we 1,p.FD_we 1,p.DX_we 1,p.XM_we 1,p.MW_we 1
# <<<NEGEDGE>>>
# FETCH STAGE
# curr_PC,         20, next_PC:         21
# chosen PC:   20, PC_jump: 0, PC_branch: 0, intialize PC: 0
# p.F/D F instruction: 10101000000000000000000000000010
# DECODE STAGE
# opcode 10101, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       2, target 000000000000000000000000010
# instrucion: add: 0, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 1
# readAReg:  0, readBReg:  0, writeReg: 12
# EXECUTE STAGE
# DX_X_readA:          0, DX_X_readB:          0
# opcode 10110, rd  0, rs  0, rt  0, shamt  0, real aluop: 00101, aluop 00101, immediate      22, target 000000000000000000000010110
# instrucion: add: 0, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 1, setx: 0
#  p.readAmemWrite: 0, p.readBmemWrite: 0, p.Amemequal: 0, p.Bmemequal: 0
# p.readAwbWrite: 0, p.readBwbWrite: 0, p.Awbequal: 0, p.Bwbequal: 0
# multdiv_status: 0, toggle_multdiv_status: 0, just_started: 0, multdiv_ready: 0, multdiv_ready,p.start_mul 0, p.start_div 0, p.my_multdiv.count 28
# data_operandA:           0, data_operandB:           0
# X_alu_result:          0, X_multdiv_result:          0
# ot equal: 0, less than: 0
# MEMORY STAGE
# XM_M_op:        -640, XM_M_readB:           0
# opcode 01000, rd 13, rs  0, rt 31, shamt 27, aluop 00000, immediate    -640, target 011010000011111110110000000
# instrucion: add: 0, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 1, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# dmem_address 3456, dmem_data_in:           0 or 00000000000000000000000000000000, dmem_we: 0, dmem_out: 00000000000000000000000000001100, M_bex_taken: 0, curr rstatus:          0, next rstatus:         15
# WRITEBACK STAGE
# MW_W_op:        -640, MW_W_data: 00000000000000000000000000001100
# opcode 00111, rd 12, rs  0, rt 31, shamt 27, aluop 00000, immediate    -640, target 011000000011111110110000000
# instrucion: add: 0, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 1, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# reg_we: 0, write reg: 12, data        -640
# register[1]:           4
# register[2]:           8
# register[3]:          24
# register[4]:          16
# register[5]:           0
# register[6]:           8
# register[7]:          64
# register[8]:           4
# register[9]:           0
# register[10]:         -10
# register[11]:         -11
# register[12]:          12
# register[13]:           0
# register[14]:           0
# register[15]:           0
# register[16]:           0
# register[17]:           0
# register[18]:           0
# register[19]:           0
# register[20]:           0
# register[21]:           0
# register[22]:           0
# register[23]:           0
# register[24]:           0
# register[25]:           0
# register[26]:           0
# register[27]:           0
# register[28]:           0
# register[29]:           0
# register[30]:           0
# register[31]:          11
#  p.PC_we 1,p.FD_we 1,p.DX_we 1,p.XM_we 1,p.MW_we 1
# <<<NEGEDGE>>>
# FETCH STAGE
# curr_PC,         20, next_PC:         21
# chosen PC:   20, PC_jump: 0, PC_branch: 0, intialize PC: 0
# p.F/D F instruction: 10110000000000000000000000011001
# DECODE STAGE
# opcode 10101, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       2, target 000000000000000000000000010
# instrucion: add: 0, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 1
# readAReg:  0, readBReg:  0, writeReg: 12
# EXECUTE STAGE
# DX_X_readA:          0, DX_X_readB:          0
# opcode 10110, rd  0, rs  0, rt  0, shamt  0, real aluop: 00101, aluop 00101, immediate      22, target 000000000000000000000010110
# instrucion: add: 0, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 1, setx: 0
#  p.readAmemWrite: 0, p.readBmemWrite: 0, p.Amemequal: 0, p.Bmemequal: 0
# p.readAwbWrite: 0, p.readBwbWrite: 0, p.Awbequal: 0, p.Bwbequal: 0
# multdiv_status: 0, toggle_multdiv_status: 0, just_started: 0, multdiv_ready: 0, multdiv_ready,p.start_mul 0, p.start_div 0, p.my_multdiv.count 28
# data_operandA:           0, data_operandB:           0
# X_alu_result:          0, X_multdiv_result:          0
# ot equal: 0, less than: 0
# MEMORY STAGE
# XM_M_op:        -640, XM_M_readB:           0
# opcode 01000, rd 13, rs  0, rt 31, shamt 27, aluop 00000, immediate    -640, target 011010000011111110110000000
# instrucion: add: 0, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 1, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# dmem_address 3456, dmem_data_in:           0 or 00000000000000000000000000000000, dmem_we: 0, dmem_out: 00000000000000000000000000001100, M_bex_taken: 0, curr rstatus:          0, next rstatus:         15
# WRITEBACK STAGE
# MW_W_op:        -640, MW_W_data: 00000000000000000000000000001100
# opcode 00111, rd 12, rs  0, rt 31, shamt 27, aluop 00000, immediate    -640, target 011000000011111110110000000
# instrucion: add: 0, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 1, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# reg_we: 0, write reg: 12, data        -640
# register[1]:           4
# register[2]:           8
# register[3]:          24
# register[4]:          16
# register[5]:           0
# register[6]:           8
# register[7]:          64
# register[8]:           4
# register[9]:           0
# register[10]:         -10
# register[11]:         -11
# register[12]:          12
# register[13]:           0
# register[14]:           0
# register[15]:           0
# register[16]:           0
# register[17]:           0
# register[18]:           0
# register[19]:           0
# register[20]:           0
# register[21]:           0
# register[22]:           0
# register[23]:           0
# register[24]:           0
# register[25]:           0
# register[26]:           0
# register[27]:           0
# register[28]:           0
# register[29]:           0
# register[30]:           0
# register[31]:          11
#  p.PC_we 1,p.FD_we 1,p.DX_we 1,p.XM_we 1,p.MW_we 1
# <<<NEGEDGE>>>
# FETCH STAGE
# curr_PC,         21, next_PC:         22
# chosen PC:   21, PC_jump: 0, PC_branch: 0, intialize PC: 0
# p.F/D F instruction: 10110000000000000000000000011001
# DECODE STAGE
# opcode 10110, rd  0, rs  0, rt  0, shamt  0, aluop 00110, immediate      25, target 000000000000000000000011001
# instrucion: add: 0, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 1, setx: 0
# readAReg:  0, readBReg:  0, writeReg: 13
# EXECUTE STAGE
# DX_X_readA:          0, DX_X_readB:          0
# opcode 10101, rd  0, rs  0, rt  0, shamt  0, real aluop: 00000, aluop 00000, immediate       2, target 000000000000000000000000010
# instrucion: add: 0, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 1
#  p.readAmemWrite: 0, p.readBmemWrite: 0, p.Amemequal: 1, p.Bmemequal: 1
# p.readAwbWrite: 0, p.readBwbWrite: 0, p.Awbequal: 0, p.Bwbequal: 0
# multdiv_status: 0, toggle_multdiv_status: 0, just_started: 0, multdiv_ready: 0, multdiv_ready,p.start_mul 0, p.start_div 0, p.my_multdiv.count 29
# data_operandA:           0, data_operandB:           0
# X_alu_result:          0, X_multdiv_result:          0
# ot equal: 0, less than: 0
# MEMORY STAGE
# XM_M_op:           0, XM_M_readB:           0
# opcode 10110, rd  0, rs  0, rt  0, shamt  0, aluop 00101, immediate      22, target 000000000000000000000010110
# instrucion: add: 0, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 1, setx: 0
# dmem_address    0, dmem_data_in:           0 or 00000000000000000000000000000000, dmem_we: 0, dmem_out: 00000000000000000000000000001100, M_bex_taken: 0, curr rstatus:          0, next rstatus:          2
# WRITEBACK STAGE
# MW_W_op:        -640, MW_W_data: 00000000000000000000000000001100
# opcode 01000, rd 13, rs  0, rt 31, shamt 27, aluop 00000, immediate    -640, target 011010000011111110110000000
# instrucion: add: 0, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 1, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# reg_we: 1, write reg: 13, data          12
# register[1]:           4
# register[2]:           8
# register[3]:          24
# register[4]:          16
# register[5]:           0
# register[6]:           8
# register[7]:          64
# register[8]:           4
# register[9]:           0
# register[10]:         -10
# register[11]:         -11
# register[12]:          12
# register[13]:           0
# register[14]:           0
# register[15]:           0
# register[16]:           0
# register[17]:           0
# register[18]:           0
# register[19]:           0
# register[20]:           0
# register[21]:           0
# register[22]:           0
# register[23]:           0
# register[24]:           0
# register[25]:           0
# register[26]:           0
# register[27]:           0
# register[28]:           0
# register[29]:           0
# register[30]:           0
# register[31]:          11
#  p.PC_we 1,p.FD_we 1,p.DX_we 1,p.XM_we 1,p.MW_we 1
# <<<NEGEDGE>>>
# FETCH STAGE
# curr_PC,         21, next_PC:         22
# chosen PC:   21, PC_jump: 0, PC_branch: 0, intialize PC: 0
# p.F/D F instruction: 00101101100000000000011111111111
# DECODE STAGE
# opcode 10110, rd  0, rs  0, rt  0, shamt  0, aluop 00110, immediate      25, target 000000000000000000000011001
# instrucion: add: 0, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 1, setx: 0
# readAReg:  0, readBReg:  0, writeReg: 13
# EXECUTE STAGE
# DX_X_readA:          0, DX_X_readB:          0
# opcode 10101, rd  0, rs  0, rt  0, shamt  0, real aluop: 00000, aluop 00000, immediate       2, target 000000000000000000000000010
# instrucion: add: 0, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 1
#  p.readAmemWrite: 0, p.readBmemWrite: 0, p.Amemequal: 1, p.Bmemequal: 1
# p.readAwbWrite: 0, p.readBwbWrite: 0, p.Awbequal: 0, p.Bwbequal: 0
# multdiv_status: 0, toggle_multdiv_status: 0, just_started: 0, multdiv_ready: 0, multdiv_ready,p.start_mul 0, p.start_div 0, p.my_multdiv.count 29
# data_operandA:           0, data_operandB:           0
# X_alu_result:          0, X_multdiv_result:          0
# ot equal: 0, less than: 0
# MEMORY STAGE
# XM_M_op:           0, XM_M_readB:           0
# opcode 10110, rd  0, rs  0, rt  0, shamt  0, aluop 00101, immediate      22, target 000000000000000000000010110
# instrucion: add: 0, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 1, setx: 0
# dmem_address    0, dmem_data_in:           0 or 00000000000000000000000000000000, dmem_we: 0, dmem_out: 00000000000000001011010100000100, M_bex_taken: 0, curr rstatus:          2, next rstatus:          2
# WRITEBACK STAGE
# MW_W_op:        -640, MW_W_data: 00000000000000000000000000001100
# opcode 01000, rd 13, rs  0, rt 31, shamt 27, aluop 00000, immediate    -640, target 011010000011111110110000000
# instrucion: add: 0, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 1, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# reg_we: 1, write reg: 13, data          12
# register[1]:           4
# register[2]:           8
# register[3]:          24
# register[4]:          16
# register[5]:           0
# register[6]:           8
# register[7]:          64
# register[8]:           4
# register[9]:           0
# register[10]:         -10
# register[11]:         -11
# register[12]:          12
# register[13]:          12
# register[14]:           0
# register[15]:           0
# register[16]:           0
# register[17]:           0
# register[18]:           0
# register[19]:           0
# register[20]:           0
# register[21]:           0
# register[22]:           0
# register[23]:           0
# register[24]:           0
# register[25]:           0
# register[26]:           0
# register[27]:           0
# register[28]:           0
# register[29]:           0
# register[30]:           2
# register[31]:          11
#  p.PC_we 1,p.FD_we 1,p.DX_we 1,p.XM_we 1,p.MW_we 1
# <<<NEGEDGE>>>
# FETCH STAGE
# curr_PC,         22, next_PC:         23
# chosen PC:   22, PC_jump: 0, PC_branch: 0, intialize PC: 0
# p.F/D F instruction: 00101101100000000000011111111111
# DECODE STAGE
# opcode 00101, rd 22, rs  0, rt  0, shamt 15, aluop 11111, immediate    2047, target 101100000000000011111111111
# instrucion: add: 0, addi: 1, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# readAReg:  0, readBReg:  0, writeReg:  0
# EXECUTE STAGE
# DX_X_readA:          0, DX_X_readB:          0
# opcode 10110, rd  0, rs  0, rt  0, shamt  0, real aluop: 00110, aluop 00110, immediate      25, target 000000000000000000000011001
# instrucion: add: 0, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 1, setx: 0
#  p.readAmemWrite: 0, p.readBmemWrite: 0, p.Amemequal: 1, p.Bmemequal: 1
# p.readAwbWrite: 0, p.readBwbWrite: 0, p.Awbequal: 1, p.Bwbequal: 1
# multdiv_status: 0, toggle_multdiv_status: 0, just_started: 0, multdiv_ready: 0, multdiv_ready,p.start_mul 0, p.start_div 0, p.my_multdiv.count 30
# data_operandA:           0, data_operandB:           0
# X_alu_result:          z, X_multdiv_result:          0
# ot equal: 0, less than: 0
# MEMORY STAGE
# XM_M_op:           0, XM_M_readB:           0
# opcode 10101, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       2, target 000000000000000000000000010
# instrucion: add: 0, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 1
# dmem_address    0, dmem_data_in:           0 or 00000000000000000000000000000000, dmem_we: 0, dmem_out: 00000000000000001011010100000100, M_bex_taken: 0, curr rstatus:          2, next rstatus:         15
# WRITEBACK STAGE
# MW_W_op:           0, MW_W_data: 00000000000000001011010100000100
# opcode 10110, rd  0, rs  0, rt  0, shamt  0, aluop 00101, immediate      22, target 000000000000000000000010110
# instrucion: add: 0, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 1, setx: 0
# reg_we: 0, write reg:  0, data           0
# register[1]:           4
# register[2]:           8
# register[3]:          24
# register[4]:          16
# register[5]:           0
# register[6]:           8
# register[7]:          64
# register[8]:           4
# register[9]:           0
# register[10]:         -10
# register[11]:         -11
# register[12]:          12
# register[13]:          12
# register[14]:           0
# register[15]:           0
# register[16]:           0
# register[17]:           0
# register[18]:           0
# register[19]:           0
# register[20]:           0
# register[21]:           0
# register[22]:           0
# register[23]:           0
# register[24]:           0
# register[25]:           0
# register[26]:           0
# register[27]:           0
# register[28]:           0
# register[29]:           0
# register[30]:           2
# register[31]:          11
#  p.PC_we 1,p.FD_we 1,p.DX_we 1,p.XM_we 1,p.MW_we 1
# <<<NEGEDGE>>>
# FETCH STAGE
# curr_PC,         22, next_PC:         23
# chosen PC:   22, PC_jump: 0, PC_branch: 0, intialize PC: 0
# p.F/D F instruction: 00101010100000000000000000001010
# DECODE STAGE
# opcode 00101, rd 22, rs  0, rt  0, shamt 15, aluop 11111, immediate    2047, target 101100000000000011111111111
# instrucion: add: 0, addi: 1, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# readAReg:  0, readBReg:  0, writeReg:  0
# EXECUTE STAGE
# DX_X_readA:          0, DX_X_readB:          0
# opcode 10110, rd  0, rs  0, rt  0, shamt  0, real aluop: 00110, aluop 00110, immediate      25, target 000000000000000000000011001
# instrucion: add: 0, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 1, setx: 0
#  p.readAmemWrite: 0, p.readBmemWrite: 0, p.Amemequal: 1, p.Bmemequal: 1
# p.readAwbWrite: 0, p.readBwbWrite: 0, p.Awbequal: 1, p.Bwbequal: 1
# multdiv_status: 0, toggle_multdiv_status: 0, just_started: 0, multdiv_ready: 0, multdiv_ready,p.start_mul 0, p.start_div 0, p.my_multdiv.count 30
# data_operandA:           0, data_operandB:           0
# X_alu_result:          z, X_multdiv_result:          0
# ot equal: 0, less than: 0
# MEMORY STAGE
# XM_M_op:           0, XM_M_readB:           0
# opcode 10101, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       2, target 000000000000000000000000010
# instrucion: add: 0, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 1
# dmem_address    0, dmem_data_in:           0 or 00000000000000000000000000000000, dmem_we: 0, dmem_out: 00000000000000001011010100000100, M_bex_taken: 0, curr rstatus:          2, next rstatus:         15
# WRITEBACK STAGE
# MW_W_op:           0, MW_W_data: 00000000000000001011010100000100
# opcode 10110, rd  0, rs  0, rt  0, shamt  0, aluop 00101, immediate      22, target 000000000000000000000010110
# instrucion: add: 0, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 1, setx: 0
# reg_we: 0, write reg:  0, data           0
# register[1]:           4
# register[2]:           8
# register[3]:          24
# register[4]:          16
# register[5]:           0
# register[6]:           8
# register[7]:          64
# register[8]:           4
# register[9]:           0
# register[10]:         -10
# register[11]:         -11
# register[12]:          12
# register[13]:          12
# register[14]:           0
# register[15]:           0
# register[16]:           0
# register[17]:           0
# register[18]:           0
# register[19]:           0
# register[20]:           0
# register[21]:           0
# register[22]:           0
# register[23]:           0
# register[24]:           0
# register[25]:           0
# register[26]:           0
# register[27]:           0
# register[28]:           0
# register[29]:           0
# register[30]:           2
# register[31]:          11
#  p.PC_we 1,p.FD_we 1,p.DX_we 1,p.XM_we 1,p.MW_we 1
# <<<NEGEDGE>>>
# FETCH STAGE
# curr_PC,         23, next_PC:         26
# chosen PC:   25, PC_jump: 1, PC_branch: 0, intialize PC: 0
# p.F/D F instruction: 00101010100000000000000000001010
# DECODE STAGE
# opcode 00101, rd 10, rs  0, rt  0, shamt  0, aluop 00010, immediate      10, target 010100000000000000000001010
# instrucion: add: 0, addi: 1, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# readAReg:  0, readBReg:  0, writeReg:  0
# EXECUTE STAGE
# DX_X_readA:          0, DX_X_readB:          0
# opcode 00101, rd 22, rs  0, rt  0, shamt 15, real aluop: 00000, aluop 11111, immediate    2047, target 101100000000000011111111111
# instrucion: add: 0, addi: 1, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
#  p.readAmemWrite: 0, p.readBmemWrite: 0, p.Amemequal: 1, p.Bmemequal: 1
# p.readAwbWrite: 0, p.readBwbWrite: 0, p.Awbequal: 1, p.Bwbequal: 1
# multdiv_status: 0, toggle_multdiv_status: 0, just_started: 0, multdiv_ready: 0, multdiv_ready,p.start_mul 0, p.start_div 0, p.my_multdiv.count 31
# data_operandA:           0, data_operandB:        2047
# X_alu_result:       2047, X_multdiv_result:          0
# ot equal: 1, less than: 0
# MEMORY STAGE
# XM_M_op:           z, XM_M_readB:           0
# opcode 10110, rd  0, rs  0, rt  0, shamt  0, aluop 00110, immediate      25, target 000000000000000000000011001
# instrucion: add: 0, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 1, setx: 0
# dmem_address    z, dmem_data_in:           0 or 00000000000000000000000000000000, dmem_we: 0, dmem_out: 00000000000000001011010100000100, M_bex_taken: 1, curr rstatus:          2, next rstatus:         15
# WRITEBACK STAGE
# MW_W_op:           0, MW_W_data: 00000000000000001011010100000100
# opcode 10101, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       2, target 000000000000000000000000010
# instrucion: add: 0, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 1
# reg_we: 0, write reg:  0, data           0
# register[1]:           4
# register[2]:           8
# register[3]:          24
# register[4]:          16
# register[5]:           0
# register[6]:           8
# register[7]:          64
# register[8]:           4
# register[9]:           0
# register[10]:         -10
# register[11]:         -11
# register[12]:          12
# register[13]:          12
# register[14]:           0
# register[15]:           0
# register[16]:           0
# register[17]:           0
# register[18]:           0
# register[19]:           0
# register[20]:           0
# register[21]:           0
# register[22]:           0
# register[23]:           0
# register[24]:           0
# register[25]:           0
# register[26]:           0
# register[27]:           0
# register[28]:           0
# register[29]:           0
# register[30]:           2
# register[31]:          11
#  p.PC_we 1,p.FD_we 1,p.DX_we 1,p.XM_we 1,p.MW_we 1
# <<<NEGEDGE>>>
# FETCH STAGE
# curr_PC,         23, next_PC:         26
# chosen PC:   25, PC_jump: 1, PC_branch: 0, intialize PC: 0
# p.F/D F instruction: 00101101000000000000011111111111
# DECODE STAGE
# opcode 00101, rd 10, rs  0, rt  0, shamt  0, aluop 00010, immediate      10, target 010100000000000000000001010
# instrucion: add: 0, addi: 1, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# readAReg:  0, readBReg:  0, writeReg:  0
# EXECUTE STAGE
# DX_X_readA:          0, DX_X_readB:          0
# opcode 00101, rd 22, rs  0, rt  0, shamt 15, real aluop: 00000, aluop 11111, immediate    2047, target 101100000000000011111111111
# instrucion: add: 0, addi: 1, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
#  p.readAmemWrite: 0, p.readBmemWrite: 0, p.Amemequal: 1, p.Bmemequal: 1
# p.readAwbWrite: 0, p.readBwbWrite: 0, p.Awbequal: 1, p.Bwbequal: 1
# multdiv_status: 0, toggle_multdiv_status: 0, just_started: 0, multdiv_ready: 0, multdiv_ready,p.start_mul 0, p.start_div 0, p.my_multdiv.count 31
# data_operandA:           0, data_operandB:        2047
# X_alu_result:       2047, X_multdiv_result:          0
# ot equal: 1, less than: 0
# MEMORY STAGE
# XM_M_op:           z, XM_M_readB:           0
# opcode 10110, rd  0, rs  0, rt  0, shamt  0, aluop 00110, immediate      25, target 000000000000000000000011001
# instrucion: add: 0, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 1, setx: 0
# dmem_address    z, dmem_data_in:           0 or 00000000000000000000000000000000, dmem_we: 0, dmem_out: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, M_bex_taken: 1, curr rstatus:          2, next rstatus:         15
# WRITEBACK STAGE
# MW_W_op:           0, MW_W_data: 00000000000000001011010100000100
# opcode 10101, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       2, target 000000000000000000000000010
# instrucion: add: 0, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 1
# reg_we: 0, write reg:  0, data           0
# register[1]:           4
# register[2]:           8
# register[3]:          24
# register[4]:          16
# register[5]:           0
# register[6]:           8
# register[7]:          64
# register[8]:           4
# register[9]:           0
# register[10]:         -10
# register[11]:         -11
# register[12]:          12
# register[13]:          12
# register[14]:           0
# register[15]:           0
# register[16]:           0
# register[17]:           0
# register[18]:           0
# register[19]:           0
# register[20]:           0
# register[21]:           0
# register[22]:           0
# register[23]:           0
# register[24]:           0
# register[25]:           0
# register[26]:           0
# register[27]:           0
# register[28]:           0
# register[29]:           0
# register[30]:           2
# register[31]:          11
#  p.PC_we 1,p.FD_we 1,p.DX_we 1,p.XM_we 1,p.MW_we 1
# <<<NEGEDGE>>>
# FETCH STAGE
# curr_PC,         26, next_PC:         27
# chosen PC:   26, PC_jump: 0, PC_branch: 0, intialize PC: 0
# p.F/D F instruction: 00101101000000000000011111111111
# DECODE STAGE
# opcode 00101, rd 20, rs  0, rt  0, shamt 15, aluop 11111, immediate    2047, target 101000000000000011111111111
# instrucion: add: 0, addi: 1, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# readAReg:  0, readBReg:  0, writeReg:  0
# EXECUTE STAGE
# DX_X_readA:          0, DX_X_readB:          0
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, real aluop: 00000, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
#  p.readAmemWrite: 0, p.readBmemWrite: 0, p.Amemequal: 1, p.Bmemequal: 1
# p.readAwbWrite: 0, p.readBwbWrite: 0, p.Awbequal: 1, p.Bwbequal: 1
# multdiv_status: 0, toggle_multdiv_status: 0, just_started: 0, multdiv_ready: 0, multdiv_ready,p.start_mul 0, p.start_div 0, p.my_multdiv.count 31
# data_operandA:           0, data_operandB:           0
# X_alu_result:          0, X_multdiv_result:          0
# ot equal: 0, less than: 0
# MEMORY STAGE
# XM_M_op:        2047, XM_M_readB:           0
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# dmem_address 2047, dmem_data_in:           0 or 00000000000000000000000000000000, dmem_we: 0, dmem_out: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, M_bex_taken: 0, curr rstatus:          2, next rstatus:         15
# WRITEBACK STAGE
# MW_W_op:           z, MW_W_data: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# opcode 10110, rd  0, rs  0, rt  0, shamt  0, aluop 00110, immediate      25, target 000000000000000000000011001
# instrucion: add: 0, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 1, setx: 0
# reg_we: 0, write reg:  0, data           z
# register[1]:           4
# register[2]:           8
# register[3]:          24
# register[4]:          16
# register[5]:           0
# register[6]:           8
# register[7]:          64
# register[8]:           4
# register[9]:           0
# register[10]:         -10
# register[11]:         -11
# register[12]:          12
# register[13]:          12
# register[14]:           0
# register[15]:           0
# register[16]:           0
# register[17]:           0
# register[18]:           0
# register[19]:           0
# register[20]:           0
# register[21]:           0
# register[22]:           0
# register[23]:           0
# register[24]:           0
# register[25]:           0
# register[26]:           0
# register[27]:           0
# register[28]:           0
# register[29]:           0
# register[30]:           2
# register[31]:          11
#  p.PC_we 1,p.FD_we 1,p.DX_we 1,p.XM_we 1,p.MW_we 1
# <<<NEGEDGE>>>
# FETCH STAGE
# curr_PC,         26, next_PC:         27
# chosen PC:   26, PC_jump: 0, PC_branch: 0, intialize PC: 0
# p.F/D F instruction: 00000000000000000000000000000000
# DECODE STAGE
# opcode 00101, rd 20, rs  0, rt  0, shamt 15, aluop 11111, immediate    2047, target 101000000000000011111111111
# instrucion: add: 0, addi: 1, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# readAReg:  0, readBReg:  0, writeReg:  0
# EXECUTE STAGE
# DX_X_readA:          0, DX_X_readB:          0
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, real aluop: 00000, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
#  p.readAmemWrite: 0, p.readBmemWrite: 0, p.Amemequal: 1, p.Bmemequal: 1
# p.readAwbWrite: 0, p.readBwbWrite: 0, p.Awbequal: 1, p.Bwbequal: 1
# multdiv_status: 0, toggle_multdiv_status: 0, just_started: 0, multdiv_ready: 0, multdiv_ready,p.start_mul 0, p.start_div 0, p.my_multdiv.count 31
# data_operandA:           0, data_operandB:           0
# X_alu_result:          0, X_multdiv_result:          0
# ot equal: 0, less than: 0
# MEMORY STAGE
# XM_M_op:        2047, XM_M_readB:           0
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# dmem_address 2047, dmem_data_in:           0 or 00000000000000000000000000000000, dmem_we: 0, dmem_out: 00000000000000000000000000000000, M_bex_taken: 0, curr rstatus:          2, next rstatus:         15
# WRITEBACK STAGE
# MW_W_op:           z, MW_W_data: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# opcode 10110, rd  0, rs  0, rt  0, shamt  0, aluop 00110, immediate      25, target 000000000000000000000011001
# instrucion: add: 0, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 1, setx: 0
# reg_we: 0, write reg:  0, data           z
# register[1]:           4
# register[2]:           8
# register[3]:          24
# register[4]:          16
# register[5]:           0
# register[6]:           8
# register[7]:          64
# register[8]:           4
# register[9]:           0
# register[10]:         -10
# register[11]:         -11
# register[12]:          12
# register[13]:          12
# register[14]:           0
# register[15]:           0
# register[16]:           0
# register[17]:           0
# register[18]:           0
# register[19]:           0
# register[20]:           0
# register[21]:           0
# register[22]:           0
# register[23]:           0
# register[24]:           0
# register[25]:           0
# register[26]:           0
# register[27]:           0
# register[28]:           0
# register[29]:           0
# register[30]:           2
# register[31]:          11
#  p.PC_we 1,p.FD_we 1,p.DX_we 1,p.XM_we 1,p.MW_we 1
# <<<NEGEDGE>>>
# FETCH STAGE
# curr_PC,         27, next_PC:         28
# chosen PC:   27, PC_jump: 0, PC_branch: 0, intialize PC: 0
# p.F/D F instruction: 00000000000000000000000000000000
# DECODE STAGE
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# readAReg:  0, readBReg:  0, writeReg:  0
# EXECUTE STAGE
# DX_X_readA:          0, DX_X_readB:          0
# opcode 00101, rd 20, rs  0, rt  0, shamt 15, real aluop: 00000, aluop 11111, immediate    2047, target 101000000000000011111111111
# instrucion: add: 0, addi: 1, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
#  p.readAmemWrite: 0, p.readBmemWrite: 0, p.Amemequal: 1, p.Bmemequal: 1
# p.readAwbWrite: 0, p.readBwbWrite: 0, p.Awbequal: 1, p.Bwbequal: 1
# multdiv_status: 0, toggle_multdiv_status: 0, just_started: 0, multdiv_ready: 0, multdiv_ready,p.start_mul 0, p.start_div 0, p.my_multdiv.count 31
# data_operandA:           0, data_operandB:        2047
# X_alu_result:       2047, X_multdiv_result:          0
# ot equal: 1, less than: 0
# MEMORY STAGE
# XM_M_op:           0, XM_M_readB:           0
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# dmem_address    0, dmem_data_in:           0 or 00000000000000000000000000000000, dmem_we: 0, dmem_out: 00000000000000000000000000000000, M_bex_taken: 0, curr rstatus:          2, next rstatus:         15
# WRITEBACK STAGE
# MW_W_op:        2047, MW_W_data: 00000000000000000000000000000000
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# reg_we: 0, write reg:  0, data        2047
# register[1]:           4
# register[2]:           8
# register[3]:          24
# register[4]:          16
# register[5]:           0
# register[6]:           8
# register[7]:          64
# register[8]:           4
# register[9]:           0
# register[10]:         -10
# register[11]:         -11
# register[12]:          12
# register[13]:          12
# register[14]:           0
# register[15]:           0
# register[16]:           0
# register[17]:           0
# register[18]:           0
# register[19]:           0
# register[20]:           0
# register[21]:           0
# register[22]:           0
# register[23]:           0
# register[24]:           0
# register[25]:           0
# register[26]:           0
# register[27]:           0
# register[28]:           0
# register[29]:           0
# register[30]:           2
# register[31]:          11
#  p.PC_we 1,p.FD_we 1,p.DX_we 1,p.XM_we 1,p.MW_we 1
# <<<NEGEDGE>>>
# FETCH STAGE
# curr_PC,         27, next_PC:         28
# chosen PC:   27, PC_jump: 0, PC_branch: 0, intialize PC: 0
# p.F/D F instruction: 00000000000000000000000000000000
# DECODE STAGE
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# readAReg:  0, readBReg:  0, writeReg:  0
# EXECUTE STAGE
# DX_X_readA:          0, DX_X_readB:          0
# opcode 00101, rd 20, rs  0, rt  0, shamt 15, real aluop: 00000, aluop 11111, immediate    2047, target 101000000000000011111111111
# instrucion: add: 0, addi: 1, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
#  p.readAmemWrite: 0, p.readBmemWrite: 0, p.Amemequal: 1, p.Bmemequal: 1
# p.readAwbWrite: 0, p.readBwbWrite: 0, p.Awbequal: 1, p.Bwbequal: 1
# multdiv_status: 0, toggle_multdiv_status: 0, just_started: 0, multdiv_ready: 0, multdiv_ready,p.start_mul 0, p.start_div 0, p.my_multdiv.count 31
# data_operandA:           0, data_operandB:        2047
# X_alu_result:       2047, X_multdiv_result:          0
# ot equal: 1, less than: 0
# MEMORY STAGE
# XM_M_op:           0, XM_M_readB:           0
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# dmem_address    0, dmem_data_in:           0 or 00000000000000000000000000000000, dmem_we: 0, dmem_out: 00000000000000001011010100000100, M_bex_taken: 0, curr rstatus:          2, next rstatus:         15
# WRITEBACK STAGE
# MW_W_op:        2047, MW_W_data: 00000000000000000000000000000000
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# reg_we: 0, write reg:  0, data        2047
# register[1]:           4
# register[2]:           8
# register[3]:          24
# register[4]:          16
# register[5]:           0
# register[6]:           8
# register[7]:          64
# register[8]:           4
# register[9]:           0
# register[10]:         -10
# register[11]:         -11
# register[12]:          12
# register[13]:          12
# register[14]:           0
# register[15]:           0
# register[16]:           0
# register[17]:           0
# register[18]:           0
# register[19]:           0
# register[20]:           0
# register[21]:           0
# register[22]:           0
# register[23]:           0
# register[24]:           0
# register[25]:           0
# register[26]:           0
# register[27]:           0
# register[28]:           0
# register[29]:           0
# register[30]:           2
# register[31]:          11
#  p.PC_we 1,p.FD_we 1,p.DX_we 1,p.XM_we 1,p.MW_we 1
# <<<NEGEDGE>>>
# FETCH STAGE
# curr_PC,         28, next_PC:         29
# chosen PC:   28, PC_jump: 0, PC_branch: 0, intialize PC: 0
# p.F/D F instruction: 00000000000000000000000000000000
# DECODE STAGE
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# readAReg:  0, readBReg:  0, writeReg:  0
# EXECUTE STAGE
# DX_X_readA:          0, DX_X_readB:          0
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, real aluop: 00000, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
#  p.readAmemWrite: 0, p.readBmemWrite: 0, p.Amemequal: 0, p.Bmemequal: 0
# p.readAwbWrite: 0, p.readBwbWrite: 0, p.Awbequal: 1, p.Bwbequal: 1
# multdiv_status: 0, toggle_multdiv_status: 0, just_started: 0, multdiv_ready: 0, multdiv_ready,p.start_mul 0, p.start_div 0, p.my_multdiv.count 31
# data_operandA:           0, data_operandB:           0
# X_alu_result:          0, X_multdiv_result:          0
# ot equal: 0, less than: 0
# MEMORY STAGE
# XM_M_op:        2047, XM_M_readB:           0
# opcode 00101, rd 20, rs  0, rt  0, shamt 15, aluop 11111, immediate    2047, target 101000000000000011111111111
# instrucion: add: 0, addi: 1, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# dmem_address 2047, dmem_data_in:           0 or 00000000000000000000000000000000, dmem_we: 0, dmem_out: 00000000000000001011010100000100, M_bex_taken: 0, curr rstatus:          2, next rstatus:         15
# WRITEBACK STAGE
# MW_W_op:           0, MW_W_data: 00000000000000001011010100000100
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# reg_we: 0, write reg:  0, data           0
# register[1]:           4
# register[2]:           8
# register[3]:          24
# register[4]:          16
# register[5]:           0
# register[6]:           8
# register[7]:          64
# register[8]:           4
# register[9]:           0
# register[10]:         -10
# register[11]:         -11
# register[12]:          12
# register[13]:          12
# register[14]:           0
# register[15]:           0
# register[16]:           0
# register[17]:           0
# register[18]:           0
# register[19]:           0
# register[20]:           0
# register[21]:           0
# register[22]:           0
# register[23]:           0
# register[24]:           0
# register[25]:           0
# register[26]:           0
# register[27]:           0
# register[28]:           0
# register[29]:           0
# register[30]:           2
# register[31]:          11
#  p.PC_we 1,p.FD_we 1,p.DX_we 1,p.XM_we 1,p.MW_we 1
# <<<NEGEDGE>>>
# FETCH STAGE
# curr_PC,         28, next_PC:         29
# chosen PC:   28, PC_jump: 0, PC_branch: 0, intialize PC: 0
# p.F/D F instruction: 00000000000000000000000000000000
# DECODE STAGE
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# readAReg:  0, readBReg:  0, writeReg:  0
# EXECUTE STAGE
# DX_X_readA:          0, DX_X_readB:          0
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, real aluop: 00000, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
#  p.readAmemWrite: 0, p.readBmemWrite: 0, p.Amemequal: 0, p.Bmemequal: 0
# p.readAwbWrite: 0, p.readBwbWrite: 0, p.Awbequal: 1, p.Bwbequal: 1
# multdiv_status: 0, toggle_multdiv_status: 0, just_started: 0, multdiv_ready: 0, multdiv_ready,p.start_mul 0, p.start_div 0, p.my_multdiv.count 31
# data_operandA:           0, data_operandB:           0
# X_alu_result:          0, X_multdiv_result:          0
# ot equal: 0, less than: 0
# MEMORY STAGE
# XM_M_op:        2047, XM_M_readB:           0
# opcode 00101, rd 20, rs  0, rt  0, shamt 15, aluop 11111, immediate    2047, target 101000000000000011111111111
# instrucion: add: 0, addi: 1, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# dmem_address 2047, dmem_data_in:           0 or 00000000000000000000000000000000, dmem_we: 0, dmem_out: 00000000000000000000000000000000, M_bex_taken: 0, curr rstatus:          2, next rstatus:         15
# WRITEBACK STAGE
# MW_W_op:           0, MW_W_data: 00000000000000001011010100000100
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# reg_we: 0, write reg:  0, data           0
# register[1]:           4
# register[2]:           8
# register[3]:          24
# register[4]:          16
# register[5]:           0
# register[6]:           8
# register[7]:          64
# register[8]:           4
# register[9]:           0
# register[10]:         -10
# register[11]:         -11
# register[12]:          12
# register[13]:          12
# register[14]:           0
# register[15]:           0
# register[16]:           0
# register[17]:           0
# register[18]:           0
# register[19]:           0
# register[20]:           0
# register[21]:           0
# register[22]:           0
# register[23]:           0
# register[24]:           0
# register[25]:           0
# register[26]:           0
# register[27]:           0
# register[28]:           0
# register[29]:           0
# register[30]:           2
# register[31]:          11
#  p.PC_we 1,p.FD_we 1,p.DX_we 1,p.XM_we 1,p.MW_we 1
# <<<NEGEDGE>>>
# FETCH STAGE
# curr_PC,         29, next_PC:         30
# chosen PC:   29, PC_jump: 0, PC_branch: 0, intialize PC: 0
# p.F/D F instruction: 00000000000000000000000000000000
# DECODE STAGE
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# readAReg:  0, readBReg:  0, writeReg: 20
# EXECUTE STAGE
# DX_X_readA:          0, DX_X_readB:          0
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, real aluop: 00000, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
#  p.readAmemWrite: 0, p.readBmemWrite: 0, p.Amemequal: 1, p.Bmemequal: 1
# p.readAwbWrite: 0, p.readBwbWrite: 0, p.Awbequal: 0, p.Bwbequal: 0
# multdiv_status: 0, toggle_multdiv_status: 0, just_started: 0, multdiv_ready: 0, multdiv_ready,p.start_mul 0, p.start_div 0, p.my_multdiv.count 31
# data_operandA:           0, data_operandB:           0
# X_alu_result:          0, X_multdiv_result:          0
# ot equal: 0, less than: 0
# MEMORY STAGE
# XM_M_op:           0, XM_M_readB:           0
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# dmem_address    0, dmem_data_in:           0 or 00000000000000000000000000000000, dmem_we: 0, dmem_out: 00000000000000000000000000000000, M_bex_taken: 0, curr rstatus:          2, next rstatus:         15
# WRITEBACK STAGE
# MW_W_op:        2047, MW_W_data: 00000000000000000000000000000000
# opcode 00101, rd 20, rs  0, rt  0, shamt 15, aluop 11111, immediate    2047, target 101000000000000011111111111
# instrucion: add: 0, addi: 1, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# reg_we: 1, write reg: 20, data        2047
# register[1]:           4
# register[2]:           8
# register[3]:          24
# register[4]:          16
# register[5]:           0
# register[6]:           8
# register[7]:          64
# register[8]:           4
# register[9]:           0
# register[10]:         -10
# register[11]:         -11
# register[12]:          12
# register[13]:          12
# register[14]:           0
# register[15]:           0
# register[16]:           0
# register[17]:           0
# register[18]:           0
# register[19]:           0
# register[20]:           0
# register[21]:           0
# register[22]:           0
# register[23]:           0
# register[24]:           0
# register[25]:           0
# register[26]:           0
# register[27]:           0
# register[28]:           0
# register[29]:           0
# register[30]:           2
# register[31]:          11
#  p.PC_we 1,p.FD_we 1,p.DX_we 1,p.XM_we 1,p.MW_we 1
# <<<NEGEDGE>>>
# FETCH STAGE
# curr_PC,         29, next_PC:         30
# chosen PC:   29, PC_jump: 0, PC_branch: 0, intialize PC: 0
# p.F/D F instruction: 00000000000000000000000000000000
# DECODE STAGE
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# readAReg:  0, readBReg:  0, writeReg: 20
# EXECUTE STAGE
# DX_X_readA:          0, DX_X_readB:          0
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, real aluop: 00000, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
#  p.readAmemWrite: 0, p.readBmemWrite: 0, p.Amemequal: 1, p.Bmemequal: 1
# p.readAwbWrite: 0, p.readBwbWrite: 0, p.Awbequal: 0, p.Bwbequal: 0
# multdiv_status: 0, toggle_multdiv_status: 0, just_started: 0, multdiv_ready: 0, multdiv_ready,p.start_mul 0, p.start_div 0, p.my_multdiv.count 31
# data_operandA:           0, data_operandB:           0
# X_alu_result:          0, X_multdiv_result:          0
# ot equal: 0, less than: 0
# MEMORY STAGE
# XM_M_op:           0, XM_M_readB:           0
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# dmem_address    0, dmem_data_in:           0 or 00000000000000000000000000000000, dmem_we: 0, dmem_out: 00000000000000001011010100000100, M_bex_taken: 0, curr rstatus:          2, next rstatus:         15
# WRITEBACK STAGE
# MW_W_op:        2047, MW_W_data: 00000000000000000000000000000000
# opcode 00101, rd 20, rs  0, rt  0, shamt 15, aluop 11111, immediate    2047, target 101000000000000011111111111
# instrucion: add: 0, addi: 1, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# reg_we: 1, write reg: 20, data        2047
# register[1]:           4
# register[2]:           8
# register[3]:          24
# register[4]:          16
# register[5]:           0
# register[6]:           8
# register[7]:          64
# register[8]:           4
# register[9]:           0
# register[10]:         -10
# register[11]:         -11
# register[12]:          12
# register[13]:          12
# register[14]:           0
# register[15]:           0
# register[16]:           0
# register[17]:           0
# register[18]:           0
# register[19]:           0
# register[20]:        2047
# register[21]:           0
# register[22]:           0
# register[23]:           0
# register[24]:           0
# register[25]:           0
# register[26]:           0
# register[27]:           0
# register[28]:           0
# register[29]:           0
# register[30]:           2
# register[31]:          11
#  p.PC_we 1,p.FD_we 1,p.DX_we 1,p.XM_we 1,p.MW_we 1
# <<<NEGEDGE>>>
# FETCH STAGE
# curr_PC,         30, next_PC:         31
# chosen PC:   30, PC_jump: 0, PC_branch: 0, intialize PC: 0
# p.F/D F instruction: 00000000000000000000000000000000
# DECODE STAGE
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# readAReg:  0, readBReg:  0, writeReg:  0
# EXECUTE STAGE
# DX_X_readA:          0, DX_X_readB:          0
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, real aluop: 00000, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
#  p.readAmemWrite: 0, p.readBmemWrite: 0, p.Amemequal: 1, p.Bmemequal: 1
# p.readAwbWrite: 0, p.readBwbWrite: 0, p.Awbequal: 1, p.Bwbequal: 1
# multdiv_status: 0, toggle_multdiv_status: 0, just_started: 0, multdiv_ready: 0, multdiv_ready,p.start_mul 0, p.start_div 0, p.my_multdiv.count 31
# data_operandA:           0, data_operandB:           0
# X_alu_result:          0, X_multdiv_result:          0
# ot equal: 0, less than: 0
# MEMORY STAGE
# XM_M_op:           0, XM_M_readB:           0
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# dmem_address    0, dmem_data_in:           0 or 00000000000000000000000000000000, dmem_we: 0, dmem_out: 00000000000000001011010100000100, M_bex_taken: 0, curr rstatus:          2, next rstatus:         15
# WRITEBACK STAGE
# MW_W_op:           0, MW_W_data: 00000000000000001011010100000100
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# reg_we: 0, write reg:  0, data           0
# register[1]:           4
# register[2]:           8
# register[3]:          24
# register[4]:          16
# register[5]:           0
# register[6]:           8
# register[7]:          64
# register[8]:           4
# register[9]:           0
# register[10]:         -10
# register[11]:         -11
# register[12]:          12
# register[13]:          12
# register[14]:           0
# register[15]:           0
# register[16]:           0
# register[17]:           0
# register[18]:           0
# register[19]:           0
# register[20]:        2047
# register[21]:           0
# register[22]:           0
# register[23]:           0
# register[24]:           0
# register[25]:           0
# register[26]:           0
# register[27]:           0
# register[28]:           0
# register[29]:           0
# register[30]:           2
# register[31]:          11
#  p.PC_we 1,p.FD_we 1,p.DX_we 1,p.XM_we 1,p.MW_we 1
# <<<NEGEDGE>>>
# FETCH STAGE
# curr_PC,         31, next_PC:         32
# chosen PC:   31, PC_jump: 0, PC_branch: 0, intialize PC: 0
# p.F/D F instruction: 00000000000000000000000000000000
# DECODE STAGE
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# readAReg:  0, readBReg:  0, writeReg:  0
# EXECUTE STAGE
# DX_X_readA:          0, DX_X_readB:          0
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, real aluop: 00000, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
#  p.readAmemWrite: 0, p.readBmemWrite: 0, p.Amemequal: 1, p.Bmemequal: 1
# p.readAwbWrite: 0, p.readBwbWrite: 0, p.Awbequal: 1, p.Bwbequal: 1
# multdiv_status: 0, toggle_multdiv_status: 0, just_started: 0, multdiv_ready: 0, multdiv_ready,p.start_mul 0, p.start_div 0, p.my_multdiv.count 31
# data_operandA:           0, data_operandB:           0
# X_alu_result:          0, X_multdiv_result:          0
# ot equal: 0, less than: 0
# MEMORY STAGE
# XM_M_op:           0, XM_M_readB:           0
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# dmem_address    0, dmem_data_in:           0 or 00000000000000000000000000000000, dmem_we: 0, dmem_out: 00000000000000001011010100000100, M_bex_taken: 0, curr rstatus:          2, next rstatus:         15
# WRITEBACK STAGE
# MW_W_op:           0, MW_W_data: 00000000000000001011010100000100
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# reg_we: 0, write reg:  0, data           0
# register[1]:           4
# register[2]:           8
# register[3]:          24
# register[4]:          16
# register[5]:           0
# register[6]:           8
# register[7]:          64
# register[8]:           4
# register[9]:           0
# register[10]:         -10
# register[11]:         -11
# register[12]:          12
# register[13]:          12
# register[14]:           0
# register[15]:           0
# register[16]:           0
# register[17]:           0
# register[18]:           0
# register[19]:           0
# register[20]:        2047
# register[21]:           0
# register[22]:           0
# register[23]:           0
# register[24]:           0
# register[25]:           0
# register[26]:           0
# register[27]:           0
# register[28]:           0
# register[29]:           0
# register[30]:           2
# register[31]:          11
#  p.PC_we 1,p.FD_we 1,p.DX_we 1,p.XM_we 1,p.MW_we 1
# <<<NEGEDGE>>>
# FETCH STAGE
# curr_PC,         32, next_PC:         33
# chosen PC:   32, PC_jump: 0, PC_branch: 0, intialize PC: 0
# p.F/D F instruction: 00000000000000000000000000000000
# DECODE STAGE
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# readAReg:  0, readBReg:  0, writeReg:  0
# EXECUTE STAGE
# DX_X_readA:          0, DX_X_readB:          0
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, real aluop: 00000, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
#  p.readAmemWrite: 0, p.readBmemWrite: 0, p.Amemequal: 1, p.Bmemequal: 1
# p.readAwbWrite: 0, p.readBwbWrite: 0, p.Awbequal: 1, p.Bwbequal: 1
# multdiv_status: 0, toggle_multdiv_status: 0, just_started: 0, multdiv_ready: 0, multdiv_ready,p.start_mul 0, p.start_div 0, p.my_multdiv.count 31
# data_operandA:           0, data_operandB:           0
# X_alu_result:          0, X_multdiv_result:          0
# ot equal: 0, less than: 0
# MEMORY STAGE
# XM_M_op:           0, XM_M_readB:           0
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# dmem_address    0, dmem_data_in:           0 or 00000000000000000000000000000000, dmem_we: 0, dmem_out: 00000000000000001011010100000100, M_bex_taken: 0, curr rstatus:          2, next rstatus:         15
# WRITEBACK STAGE
# MW_W_op:           0, MW_W_data: 00000000000000001011010100000100
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# reg_we: 0, write reg:  0, data           0
# register[1]:           4
# register[2]:           8
# register[3]:          24
# register[4]:          16
# register[5]:           0
# register[6]:           8
# register[7]:          64
# register[8]:           4
# register[9]:           0
# register[10]:         -10
# register[11]:         -11
# register[12]:          12
# register[13]:          12
# register[14]:           0
# register[15]:           0
# register[16]:           0
# register[17]:           0
# register[18]:           0
# register[19]:           0
# register[20]:        2047
# register[21]:           0
# register[22]:           0
# register[23]:           0
# register[24]:           0
# register[25]:           0
# register[26]:           0
# register[27]:           0
# register[28]:           0
# register[29]:           0
# register[30]:           2
# register[31]:          11
#  p.PC_we 1,p.FD_we 1,p.DX_we 1,p.XM_we 1,p.MW_we 1
# <<<NEGEDGE>>>
# FETCH STAGE
# curr_PC,         33, next_PC:         34
# chosen PC:   33, PC_jump: 0, PC_branch: 0, intialize PC: 0
# p.F/D F instruction: 00000000000000000000000000000000
# DECODE STAGE
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# readAReg:  0, readBReg:  0, writeReg:  0
# EXECUTE STAGE
# DX_X_readA:          0, DX_X_readB:          0
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, real aluop: 00000, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
#  p.readAmemWrite: 0, p.readBmemWrite: 0, p.Amemequal: 1, p.Bmemequal: 1
# p.readAwbWrite: 0, p.readBwbWrite: 0, p.Awbequal: 1, p.Bwbequal: 1
# multdiv_status: 0, toggle_multdiv_status: 0, just_started: 0, multdiv_ready: 0, multdiv_ready,p.start_mul 0, p.start_div 0, p.my_multdiv.count 31
# data_operandA:           0, data_operandB:           0
# X_alu_result:          0, X_multdiv_result:          0
# ot equal: 0, less than: 0
# MEMORY STAGE
# XM_M_op:           0, XM_M_readB:           0
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# dmem_address    0, dmem_data_in:           0 or 00000000000000000000000000000000, dmem_we: 0, dmem_out: 00000000000000001011010100000100, M_bex_taken: 0, curr rstatus:          2, next rstatus:         15
# WRITEBACK STAGE
# MW_W_op:           0, MW_W_data: 00000000000000001011010100000100
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# reg_we: 0, write reg:  0, data           0
# register[1]:           4
# register[2]:           8
# register[3]:          24
# register[4]:          16
# register[5]:           0
# register[6]:           8
# register[7]:          64
# register[8]:           4
# register[9]:           0
# register[10]:         -10
# register[11]:         -11
# register[12]:          12
# register[13]:          12
# register[14]:           0
# register[15]:           0
# register[16]:           0
# register[17]:           0
# register[18]:           0
# register[19]:           0
# register[20]:        2047
# register[21]:           0
# register[22]:           0
# register[23]:           0
# register[24]:           0
# register[25]:           0
# register[26]:           0
# register[27]:           0
# register[28]:           0
# register[29]:           0
# register[30]:           2
# register[31]:          11
#  p.PC_we 1,p.FD_we 1,p.DX_we 1,p.XM_we 1,p.MW_we 1
# <<<NEGEDGE>>>
# FETCH STAGE
# curr_PC,         34, next_PC:         35
# chosen PC:   34, PC_jump: 0, PC_branch: 0, intialize PC: 0
# p.F/D F instruction: 00000000000000000000000000000000
# DECODE STAGE
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# readAReg:  0, readBReg:  0, writeReg:  0
# EXECUTE STAGE
# DX_X_readA:          0, DX_X_readB:          0
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, real aluop: 00000, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
#  p.readAmemWrite: 0, p.readBmemWrite: 0, p.Amemequal: 1, p.Bmemequal: 1
# p.readAwbWrite: 0, p.readBwbWrite: 0, p.Awbequal: 1, p.Bwbequal: 1
# multdiv_status: 0, toggle_multdiv_status: 0, just_started: 0, multdiv_ready: 0, multdiv_ready,p.start_mul 0, p.start_div 0, p.my_multdiv.count 31
# data_operandA:           0, data_operandB:           0
# X_alu_result:          0, X_multdiv_result:          0
# ot equal: 0, less than: 0
# MEMORY STAGE
# XM_M_op:           0, XM_M_readB:           0
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# dmem_address    0, dmem_data_in:           0 or 00000000000000000000000000000000, dmem_we: 0, dmem_out: 00000000000000001011010100000100, M_bex_taken: 0, curr rstatus:          2, next rstatus:         15
# WRITEBACK STAGE
# MW_W_op:           0, MW_W_data: 00000000000000001011010100000100
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# reg_we: 0, write reg:  0, data           0
# register[1]:           4
# register[2]:           8
# register[3]:          24
# register[4]:          16
# register[5]:           0
# register[6]:           8
# register[7]:          64
# register[8]:           4
# register[9]:           0
# register[10]:         -10
# register[11]:         -11
# register[12]:          12
# register[13]:          12
# register[14]:           0
# register[15]:           0
# register[16]:           0
# register[17]:           0
# register[18]:           0
# register[19]:           0
# register[20]:        2047
# register[21]:           0
# register[22]:           0
# register[23]:           0
# register[24]:           0
# register[25]:           0
# register[26]:           0
# register[27]:           0
# register[28]:           0
# register[29]:           0
# register[30]:           2
# register[31]:          11
#  p.PC_we 1,p.FD_we 1,p.DX_we 1,p.XM_we 1,p.MW_we 1
# <<<NEGEDGE>>>
# FETCH STAGE
# curr_PC,         35, next_PC:         36
# chosen PC:   35, PC_jump: 0, PC_branch: 0, intialize PC: 0
# p.F/D F instruction: 00000000000000000000000000000000
# DECODE STAGE
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# readAReg:  0, readBReg:  0, writeReg:  0
# EXECUTE STAGE
# DX_X_readA:          0, DX_X_readB:          0
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, real aluop: 00000, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
#  p.readAmemWrite: 0, p.readBmemWrite: 0, p.Amemequal: 1, p.Bmemequal: 1
# p.readAwbWrite: 0, p.readBwbWrite: 0, p.Awbequal: 1, p.Bwbequal: 1
# multdiv_status: 0, toggle_multdiv_status: 0, just_started: 0, multdiv_ready: 0, multdiv_ready,p.start_mul 0, p.start_div 0, p.my_multdiv.count 31
# data_operandA:           0, data_operandB:           0
# X_alu_result:          0, X_multdiv_result:          0
# ot equal: 0, less than: 0
# MEMORY STAGE
# XM_M_op:           0, XM_M_readB:           0
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# dmem_address    0, dmem_data_in:           0 or 00000000000000000000000000000000, dmem_we: 0, dmem_out: 00000000000000001011010100000100, M_bex_taken: 0, curr rstatus:          2, next rstatus:         15
# WRITEBACK STAGE
# MW_W_op:           0, MW_W_data: 00000000000000001011010100000100
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# reg_we: 0, write reg:  0, data           0
# register[1]:           4
# register[2]:           8
# register[3]:          24
# register[4]:          16
# register[5]:           0
# register[6]:           8
# register[7]:          64
# register[8]:           4
# register[9]:           0
# register[10]:         -10
# register[11]:         -11
# register[12]:          12
# register[13]:          12
# register[14]:           0
# register[15]:           0
# register[16]:           0
# register[17]:           0
# register[18]:           0
# register[19]:           0
# register[20]:        2047
# register[21]:           0
# register[22]:           0
# register[23]:           0
# register[24]:           0
# register[25]:           0
# register[26]:           0
# register[27]:           0
# register[28]:           0
# register[29]:           0
# register[30]:           2
# register[31]:          11
#  p.PC_we 1,p.FD_we 1,p.DX_we 1,p.XM_we 1,p.MW_we 1
# <<<NEGEDGE>>>
# FETCH STAGE
# curr_PC,         36, next_PC:         37
# chosen PC:   36, PC_jump: 0, PC_branch: 0, intialize PC: 0
# p.F/D F instruction: 00000000000000000000000000000000
# DECODE STAGE
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# readAReg:  0, readBReg:  0, writeReg:  0
# EXECUTE STAGE
# DX_X_readA:          0, DX_X_readB:          0
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, real aluop: 00000, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
#  p.readAmemWrite: 0, p.readBmemWrite: 0, p.Amemequal: 1, p.Bmemequal: 1
# p.readAwbWrite: 0, p.readBwbWrite: 0, p.Awbequal: 1, p.Bwbequal: 1
# multdiv_status: 0, toggle_multdiv_status: 0, just_started: 0, multdiv_ready: 0, multdiv_ready,p.start_mul 0, p.start_div 0, p.my_multdiv.count 31
# data_operandA:           0, data_operandB:           0
# X_alu_result:          0, X_multdiv_result:          0
# ot equal: 0, less than: 0
# MEMORY STAGE
# XM_M_op:           0, XM_M_readB:           0
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# dmem_address    0, dmem_data_in:           0 or 00000000000000000000000000000000, dmem_we: 0, dmem_out: 00000000000000001011010100000100, M_bex_taken: 0, curr rstatus:          2, next rstatus:         15
# WRITEBACK STAGE
# MW_W_op:           0, MW_W_data: 00000000000000001011010100000100
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# reg_we: 0, write reg:  0, data           0
# register[1]:           4
# register[2]:           8
# register[3]:          24
# register[4]:          16
# register[5]:           0
# register[6]:           8
# register[7]:          64
# register[8]:           4
# register[9]:           0
# register[10]:         -10
# register[11]:         -11
# register[12]:          12
# register[13]:          12
# register[14]:           0
# register[15]:           0
# register[16]:           0
# register[17]:           0
# register[18]:           0
# register[19]:           0
# register[20]:        2047
# register[21]:           0
# register[22]:           0
# register[23]:           0
# register[24]:           0
# register[25]:           0
# register[26]:           0
# register[27]:           0
# register[28]:           0
# register[29]:           0
# register[30]:           2
# register[31]:          11
#  p.PC_we 1,p.FD_we 1,p.DX_we 1,p.XM_we 1,p.MW_we 1
# <<<NEGEDGE>>>
# FETCH STAGE
# curr_PC,         37, next_PC:         38
# chosen PC:   37, PC_jump: 0, PC_branch: 0, intialize PC: 0
# p.F/D F instruction: 00000000000000000000000000000000
# DECODE STAGE
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# readAReg:  0, readBReg:  0, writeReg:  0
# EXECUTE STAGE
# DX_X_readA:          0, DX_X_readB:          0
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, real aluop: 00000, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
#  p.readAmemWrite: 0, p.readBmemWrite: 0, p.Amemequal: 1, p.Bmemequal: 1
# p.readAwbWrite: 0, p.readBwbWrite: 0, p.Awbequal: 1, p.Bwbequal: 1
# multdiv_status: 0, toggle_multdiv_status: 0, just_started: 0, multdiv_ready: 0, multdiv_ready,p.start_mul 0, p.start_div 0, p.my_multdiv.count 31
# data_operandA:           0, data_operandB:           0
# X_alu_result:          0, X_multdiv_result:          0
# ot equal: 0, less than: 0
# MEMORY STAGE
# XM_M_op:           0, XM_M_readB:           0
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# dmem_address    0, dmem_data_in:           0 or 00000000000000000000000000000000, dmem_we: 0, dmem_out: 00000000000000001011010100000100, M_bex_taken: 0, curr rstatus:          2, next rstatus:         15
# WRITEBACK STAGE
# MW_W_op:           0, MW_W_data: 00000000000000001011010100000100
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# reg_we: 0, write reg:  0, data           0
# register[1]:           4
# register[2]:           8
# register[3]:          24
# register[4]:          16
# register[5]:           0
# register[6]:           8
# register[7]:          64
# register[8]:           4
# register[9]:           0
# register[10]:         -10
# register[11]:         -11
# register[12]:          12
# register[13]:          12
# register[14]:           0
# register[15]:           0
# register[16]:           0
# register[17]:           0
# register[18]:           0
# register[19]:           0
# register[20]:        2047
# register[21]:           0
# register[22]:           0
# register[23]:           0
# register[24]:           0
# register[25]:           0
# register[26]:           0
# register[27]:           0
# register[28]:           0
# register[29]:           0
# register[30]:           2
# register[31]:          11
#  p.PC_we 1,p.FD_we 1,p.DX_we 1,p.XM_we 1,p.MW_we 1
# <<<NEGEDGE>>>
# FETCH STAGE
# curr_PC,         38, next_PC:         39
# chosen PC:   38, PC_jump: 0, PC_branch: 0, intialize PC: 0
# p.F/D F instruction: 00000000000000000000000000000000
# DECODE STAGE
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# readAReg:  0, readBReg:  0, writeReg:  0
# EXECUTE STAGE
# DX_X_readA:          0, DX_X_readB:          0
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, real aluop: 00000, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
#  p.readAmemWrite: 0, p.readBmemWrite: 0, p.Amemequal: 1, p.Bmemequal: 1
# p.readAwbWrite: 0, p.readBwbWrite: 0, p.Awbequal: 1, p.Bwbequal: 1
# multdiv_status: 0, toggle_multdiv_status: 0, just_started: 0, multdiv_ready: 0, multdiv_ready,p.start_mul 0, p.start_div 0, p.my_multdiv.count 31
# data_operandA:           0, data_operandB:           0
# X_alu_result:          0, X_multdiv_result:          0
# ot equal: 0, less than: 0
# MEMORY STAGE
# XM_M_op:           0, XM_M_readB:           0
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# dmem_address    0, dmem_data_in:           0 or 00000000000000000000000000000000, dmem_we: 0, dmem_out: 00000000000000001011010100000100, M_bex_taken: 0, curr rstatus:          2, next rstatus:         15
# WRITEBACK STAGE
# MW_W_op:           0, MW_W_data: 00000000000000001011010100000100
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# reg_we: 0, write reg:  0, data           0
# register[1]:           4
# register[2]:           8
# register[3]:          24
# register[4]:          16
# register[5]:           0
# register[6]:           8
# register[7]:          64
# register[8]:           4
# register[9]:           0
# register[10]:         -10
# register[11]:         -11
# register[12]:          12
# register[13]:          12
# register[14]:           0
# register[15]:           0
# register[16]:           0
# register[17]:           0
# register[18]:           0
# register[19]:           0
# register[20]:        2047
# register[21]:           0
# register[22]:           0
# register[23]:           0
# register[24]:           0
# register[25]:           0
# register[26]:           0
# register[27]:           0
# register[28]:           0
# register[29]:           0
# register[30]:           2
# register[31]:          11
#  p.PC_we 1,p.FD_we 1,p.DX_we 1,p.XM_we 1,p.MW_we 1
# <<<NEGEDGE>>>
# FETCH STAGE
# curr_PC,         39, next_PC:         40
# chosen PC:   39, PC_jump: 0, PC_branch: 0, intialize PC: 0
# p.F/D F instruction: 00000000000000000000000000000000
# DECODE STAGE
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# readAReg:  0, readBReg:  0, writeReg:  0
# EXECUTE STAGE
# DX_X_readA:          0, DX_X_readB:          0
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, real aluop: 00000, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
#  p.readAmemWrite: 0, p.readBmemWrite: 0, p.Amemequal: 1, p.Bmemequal: 1
# p.readAwbWrite: 0, p.readBwbWrite: 0, p.Awbequal: 1, p.Bwbequal: 1
# multdiv_status: 0, toggle_multdiv_status: 0, just_started: 0, multdiv_ready: 0, multdiv_ready,p.start_mul 0, p.start_div 0, p.my_multdiv.count 31
# data_operandA:           0, data_operandB:           0
# X_alu_result:          0, X_multdiv_result:          0
# ot equal: 0, less than: 0
# MEMORY STAGE
# XM_M_op:           0, XM_M_readB:           0
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# dmem_address    0, dmem_data_in:           0 or 00000000000000000000000000000000, dmem_we: 0, dmem_out: 00000000000000001011010100000100, M_bex_taken: 0, curr rstatus:          2, next rstatus:         15
# WRITEBACK STAGE
# MW_W_op:           0, MW_W_data: 00000000000000001011010100000100
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# reg_we: 0, write reg:  0, data           0
# register[1]:           4
# register[2]:           8
# register[3]:          24
# register[4]:          16
# register[5]:           0
# register[6]:           8
# register[7]:          64
# register[8]:           4
# register[9]:           0
# register[10]:         -10
# register[11]:         -11
# register[12]:          12
# register[13]:          12
# register[14]:           0
# register[15]:           0
# register[16]:           0
# register[17]:           0
# register[18]:           0
# register[19]:           0
# register[20]:        2047
# register[21]:           0
# register[22]:           0
# register[23]:           0
# register[24]:           0
# register[25]:           0
# register[26]:           0
# register[27]:           0
# register[28]:           0
# register[29]:           0
# register[30]:           2
# register[31]:          11
#  p.PC_we 1,p.FD_we 1,p.DX_we 1,p.XM_we 1,p.MW_we 1
# <<<NEGEDGE>>>
# FETCH STAGE
# curr_PC,         40, next_PC:         41
# chosen PC:   40, PC_jump: 0, PC_branch: 0, intialize PC: 0
# p.F/D F instruction: 00000000000000000000000000000000
# DECODE STAGE
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# readAReg:  0, readBReg:  0, writeReg:  0
# EXECUTE STAGE
# DX_X_readA:          0, DX_X_readB:          0
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, real aluop: 00000, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
#  p.readAmemWrite: 0, p.readBmemWrite: 0, p.Amemequal: 1, p.Bmemequal: 1
# p.readAwbWrite: 0, p.readBwbWrite: 0, p.Awbequal: 1, p.Bwbequal: 1
# multdiv_status: 0, toggle_multdiv_status: 0, just_started: 0, multdiv_ready: 0, multdiv_ready,p.start_mul 0, p.start_div 0, p.my_multdiv.count 31
# data_operandA:           0, data_operandB:           0
# X_alu_result:          0, X_multdiv_result:          0
# ot equal: 0, less than: 0
# MEMORY STAGE
# XM_M_op:           0, XM_M_readB:           0
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# dmem_address    0, dmem_data_in:           0 or 00000000000000000000000000000000, dmem_we: 0, dmem_out: 00000000000000001011010100000100, M_bex_taken: 0, curr rstatus:          2, next rstatus:         15
# WRITEBACK STAGE
# MW_W_op:           0, MW_W_data: 00000000000000001011010100000100
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# reg_we: 0, write reg:  0, data           0
# register[1]:           4
# register[2]:           8
# register[3]:          24
# register[4]:          16
# register[5]:           0
# register[6]:           8
# register[7]:          64
# register[8]:           4
# register[9]:           0
# register[10]:         -10
# register[11]:         -11
# register[12]:          12
# register[13]:          12
# register[14]:           0
# register[15]:           0
# register[16]:           0
# register[17]:           0
# register[18]:           0
# register[19]:           0
# register[20]:        2047
# register[21]:           0
# register[22]:           0
# register[23]:           0
# register[24]:           0
# register[25]:           0
# register[26]:           0
# register[27]:           0
# register[28]:           0
# register[29]:           0
# register[30]:           2
# register[31]:          11
#  p.PC_we 1,p.FD_we 1,p.DX_we 1,p.XM_we 1,p.MW_we 1
# <<<NEGEDGE>>>
# FETCH STAGE
# curr_PC,         41, next_PC:         42
# chosen PC:   41, PC_jump: 0, PC_branch: 0, intialize PC: 0
# p.F/D F instruction: 00000000000000000000000000000000
# DECODE STAGE
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# readAReg:  0, readBReg:  0, writeReg:  0
# EXECUTE STAGE
# DX_X_readA:          0, DX_X_readB:          0
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, real aluop: 00000, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
#  p.readAmemWrite: 0, p.readBmemWrite: 0, p.Amemequal: 1, p.Bmemequal: 1
# p.readAwbWrite: 0, p.readBwbWrite: 0, p.Awbequal: 1, p.Bwbequal: 1
# multdiv_status: 0, toggle_multdiv_status: 0, just_started: 0, multdiv_ready: 0, multdiv_ready,p.start_mul 0, p.start_div 0, p.my_multdiv.count 31
# data_operandA:           0, data_operandB:           0
# X_alu_result:          0, X_multdiv_result:          0
# ot equal: 0, less than: 0
# MEMORY STAGE
# XM_M_op:           0, XM_M_readB:           0
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# dmem_address    0, dmem_data_in:           0 or 00000000000000000000000000000000, dmem_we: 0, dmem_out: 00000000000000001011010100000100, M_bex_taken: 0, curr rstatus:          2, next rstatus:         15
# WRITEBACK STAGE
# MW_W_op:           0, MW_W_data: 00000000000000001011010100000100
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# reg_we: 0, write reg:  0, data           0
# register[1]:           4
# register[2]:           8
# register[3]:          24
# register[4]:          16
# register[5]:           0
# register[6]:           8
# register[7]:          64
# register[8]:           4
# register[9]:           0
# register[10]:         -10
# register[11]:         -11
# register[12]:          12
# register[13]:          12
# register[14]:           0
# register[15]:           0
# register[16]:           0
# register[17]:           0
# register[18]:           0
# register[19]:           0
# register[20]:        2047
# register[21]:           0
# register[22]:           0
# register[23]:           0
# register[24]:           0
# register[25]:           0
# register[26]:           0
# register[27]:           0
# register[28]:           0
# register[29]:           0
# register[30]:           2
# register[31]:          11
#  p.PC_we 1,p.FD_we 1,p.DX_we 1,p.XM_we 1,p.MW_we 1
# <<<NEGEDGE>>>
# FETCH STAGE
# curr_PC,         42, next_PC:         43
# chosen PC:   42, PC_jump: 0, PC_branch: 0, intialize PC: 0
# p.F/D F instruction: 00000000000000000000000000000000
# DECODE STAGE
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# readAReg:  0, readBReg:  0, writeReg:  0
# EXECUTE STAGE
# DX_X_readA:          0, DX_X_readB:          0
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, real aluop: 00000, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
#  p.readAmemWrite: 0, p.readBmemWrite: 0, p.Amemequal: 1, p.Bmemequal: 1
# p.readAwbWrite: 0, p.readBwbWrite: 0, p.Awbequal: 1, p.Bwbequal: 1
# multdiv_status: 0, toggle_multdiv_status: 0, just_started: 0, multdiv_ready: 0, multdiv_ready,p.start_mul 0, p.start_div 0, p.my_multdiv.count 31
# data_operandA:           0, data_operandB:           0
# X_alu_result:          0, X_multdiv_result:          0
# ot equal: 0, less than: 0
# MEMORY STAGE
# XM_M_op:           0, XM_M_readB:           0
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# dmem_address    0, dmem_data_in:           0 or 00000000000000000000000000000000, dmem_we: 0, dmem_out: 00000000000000001011010100000100, M_bex_taken: 0, curr rstatus:          2, next rstatus:         15
# WRITEBACK STAGE
# MW_W_op:           0, MW_W_data: 00000000000000001011010100000100
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# reg_we: 0, write reg:  0, data           0
# register[1]:           4
# register[2]:           8
# register[3]:          24
# register[4]:          16
# register[5]:           0
# register[6]:           8
# register[7]:          64
# register[8]:           4
# register[9]:           0
# register[10]:         -10
# register[11]:         -11
# register[12]:          12
# register[13]:          12
# register[14]:           0
# register[15]:           0
# register[16]:           0
# register[17]:           0
# register[18]:           0
# register[19]:           0
# register[20]:        2047
# register[21]:           0
# register[22]:           0
# register[23]:           0
# register[24]:           0
# register[25]:           0
# register[26]:           0
# register[27]:           0
# register[28]:           0
# register[29]:           0
# register[30]:           2
# register[31]:          11
#  p.PC_we 1,p.FD_we 1,p.DX_we 1,p.XM_we 1,p.MW_we 1
# <<<NEGEDGE>>>
# FETCH STAGE
# curr_PC,         43, next_PC:         44
# chosen PC:   43, PC_jump: 0, PC_branch: 0, intialize PC: 0
# p.F/D F instruction: 00000000000000000000000000000000
# DECODE STAGE
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# readAReg:  0, readBReg:  0, writeReg:  0
# EXECUTE STAGE
# DX_X_readA:          0, DX_X_readB:          0
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, real aluop: 00000, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
#  p.readAmemWrite: 0, p.readBmemWrite: 0, p.Amemequal: 1, p.Bmemequal: 1
# p.readAwbWrite: 0, p.readBwbWrite: 0, p.Awbequal: 1, p.Bwbequal: 1
# multdiv_status: 0, toggle_multdiv_status: 0, just_started: 0, multdiv_ready: 0, multdiv_ready,p.start_mul 0, p.start_div 0, p.my_multdiv.count 31
# data_operandA:           0, data_operandB:           0
# X_alu_result:          0, X_multdiv_result:          0
# ot equal: 0, less than: 0
# MEMORY STAGE
# XM_M_op:           0, XM_M_readB:           0
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# dmem_address    0, dmem_data_in:           0 or 00000000000000000000000000000000, dmem_we: 0, dmem_out: 00000000000000001011010100000100, M_bex_taken: 0, curr rstatus:          2, next rstatus:         15
# WRITEBACK STAGE
# MW_W_op:           0, MW_W_data: 00000000000000001011010100000100
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# reg_we: 0, write reg:  0, data           0
# register[1]:           4
# register[2]:           8
# register[3]:          24
# register[4]:          16
# register[5]:           0
# register[6]:           8
# register[7]:          64
# register[8]:           4
# register[9]:           0
# register[10]:         -10
# register[11]:         -11
# register[12]:          12
# register[13]:          12
# register[14]:           0
# register[15]:           0
# register[16]:           0
# register[17]:           0
# register[18]:           0
# register[19]:           0
# register[20]:        2047
# register[21]:           0
# register[22]:           0
# register[23]:           0
# register[24]:           0
# register[25]:           0
# register[26]:           0
# register[27]:           0
# register[28]:           0
# register[29]:           0
# register[30]:           2
# register[31]:          11
#  p.PC_we 1,p.FD_we 1,p.DX_we 1,p.XM_we 1,p.MW_we 1
# <<<NEGEDGE>>>
# FETCH STAGE
# curr_PC,         44, next_PC:         45
# chosen PC:   44, PC_jump: 0, PC_branch: 0, intialize PC: 0
# p.F/D F instruction: 00000000000000000000000000000000
# DECODE STAGE
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# readAReg:  0, readBReg:  0, writeReg:  0
# EXECUTE STAGE
# DX_X_readA:          0, DX_X_readB:          0
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, real aluop: 00000, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
#  p.readAmemWrite: 0, p.readBmemWrite: 0, p.Amemequal: 1, p.Bmemequal: 1
# p.readAwbWrite: 0, p.readBwbWrite: 0, p.Awbequal: 1, p.Bwbequal: 1
# multdiv_status: 0, toggle_multdiv_status: 0, just_started: 0, multdiv_ready: 0, multdiv_ready,p.start_mul 0, p.start_div 0, p.my_multdiv.count 31
# data_operandA:           0, data_operandB:           0
# X_alu_result:          0, X_multdiv_result:          0
# ot equal: 0, less than: 0
# MEMORY STAGE
# XM_M_op:           0, XM_M_readB:           0
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# dmem_address    0, dmem_data_in:           0 or 00000000000000000000000000000000, dmem_we: 0, dmem_out: 00000000000000001011010100000100, M_bex_taken: 0, curr rstatus:          2, next rstatus:         15
# WRITEBACK STAGE
# MW_W_op:           0, MW_W_data: 00000000000000001011010100000100
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# reg_we: 0, write reg:  0, data           0
# register[1]:           4
# register[2]:           8
# register[3]:          24
# register[4]:          16
# register[5]:           0
# register[6]:           8
# register[7]:          64
# register[8]:           4
# register[9]:           0
# register[10]:         -10
# register[11]:         -11
# register[12]:          12
# register[13]:          12
# register[14]:           0
# register[15]:           0
# register[16]:           0
# register[17]:           0
# register[18]:           0
# register[19]:           0
# register[20]:        2047
# register[21]:           0
# register[22]:           0
# register[23]:           0
# register[24]:           0
# register[25]:           0
# register[26]:           0
# register[27]:           0
# register[28]:           0
# register[29]:           0
# register[30]:           2
# register[31]:          11
#  p.PC_we 1,p.FD_we 1,p.DX_we 1,p.XM_we 1,p.MW_we 1
# <<<NEGEDGE>>>
# FETCH STAGE
# curr_PC,         45, next_PC:         46
# chosen PC:   45, PC_jump: 0, PC_branch: 0, intialize PC: 0
# p.F/D F instruction: 00000000000000000000000000000000
# DECODE STAGE
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# readAReg:  0, readBReg:  0, writeReg:  0
# EXECUTE STAGE
# DX_X_readA:          0, DX_X_readB:          0
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, real aluop: 00000, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
#  p.readAmemWrite: 0, p.readBmemWrite: 0, p.Amemequal: 1, p.Bmemequal: 1
# p.readAwbWrite: 0, p.readBwbWrite: 0, p.Awbequal: 1, p.Bwbequal: 1
# multdiv_status: 0, toggle_multdiv_status: 0, just_started: 0, multdiv_ready: 0, multdiv_ready,p.start_mul 0, p.start_div 0, p.my_multdiv.count 31
# data_operandA:           0, data_operandB:           0
# X_alu_result:          0, X_multdiv_result:          0
# ot equal: 0, less than: 0
# MEMORY STAGE
# XM_M_op:           0, XM_M_readB:           0
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# dmem_address    0, dmem_data_in:           0 or 00000000000000000000000000000000, dmem_we: 0, dmem_out: 00000000000000001011010100000100, M_bex_taken: 0, curr rstatus:          2, next rstatus:         15
# WRITEBACK STAGE
# MW_W_op:           0, MW_W_data: 00000000000000001011010100000100
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# reg_we: 0, write reg:  0, data           0
# register[1]:           4
# register[2]:           8
# register[3]:          24
# register[4]:          16
# register[5]:           0
# register[6]:           8
# register[7]:          64
# register[8]:           4
# register[9]:           0
# register[10]:         -10
# register[11]:         -11
# register[12]:          12
# register[13]:          12
# register[14]:           0
# register[15]:           0
# register[16]:           0
# register[17]:           0
# register[18]:           0
# register[19]:           0
# register[20]:        2047
# register[21]:           0
# register[22]:           0
# register[23]:           0
# register[24]:           0
# register[25]:           0
# register[26]:           0
# register[27]:           0
# register[28]:           0
# register[29]:           0
# register[30]:           2
# register[31]:          11
#  p.PC_we 1,p.FD_we 1,p.DX_we 1,p.XM_we 1,p.MW_we 1
# <<<NEGEDGE>>>
# FETCH STAGE
# curr_PC,         46, next_PC:         47
# chosen PC:   46, PC_jump: 0, PC_branch: 0, intialize PC: 0
# p.F/D F instruction: 00000000000000000000000000000000
# DECODE STAGE
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# readAReg:  0, readBReg:  0, writeReg:  0
# EXECUTE STAGE
# DX_X_readA:          0, DX_X_readB:          0
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, real aluop: 00000, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
#  p.readAmemWrite: 0, p.readBmemWrite: 0, p.Amemequal: 1, p.Bmemequal: 1
# p.readAwbWrite: 0, p.readBwbWrite: 0, p.Awbequal: 1, p.Bwbequal: 1
# multdiv_status: 0, toggle_multdiv_status: 0, just_started: 0, multdiv_ready: 0, multdiv_ready,p.start_mul 0, p.start_div 0, p.my_multdiv.count 31
# data_operandA:           0, data_operandB:           0
# X_alu_result:          0, X_multdiv_result:          0
# ot equal: 0, less than: 0
# MEMORY STAGE
# XM_M_op:           0, XM_M_readB:           0
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# dmem_address    0, dmem_data_in:           0 or 00000000000000000000000000000000, dmem_we: 0, dmem_out: 00000000000000001011010100000100, M_bex_taken: 0, curr rstatus:          2, next rstatus:         15
# WRITEBACK STAGE
# MW_W_op:           0, MW_W_data: 00000000000000001011010100000100
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# reg_we: 0, write reg:  0, data           0
# register[1]:           4
# register[2]:           8
# register[3]:          24
# register[4]:          16
# register[5]:           0
# register[6]:           8
# register[7]:          64
# register[8]:           4
# register[9]:           0
# register[10]:         -10
# register[11]:         -11
# register[12]:          12
# register[13]:          12
# register[14]:           0
# register[15]:           0
# register[16]:           0
# register[17]:           0
# register[18]:           0
# register[19]:           0
# register[20]:        2047
# register[21]:           0
# register[22]:           0
# register[23]:           0
# register[24]:           0
# register[25]:           0
# register[26]:           0
# register[27]:           0
# register[28]:           0
# register[29]:           0
# register[30]:           2
# register[31]:          11
#  p.PC_we 1,p.FD_we 1,p.DX_we 1,p.XM_we 1,p.MW_we 1
# <<<NEGEDGE>>>
# FETCH STAGE
# curr_PC,         47, next_PC:         48
# chosen PC:   47, PC_jump: 0, PC_branch: 0, intialize PC: 0
# p.F/D F instruction: 00000000000000000000000000000000
# DECODE STAGE
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# readAReg:  0, readBReg:  0, writeReg:  0
# EXECUTE STAGE
# DX_X_readA:          0, DX_X_readB:          0
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, real aluop: 00000, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
#  p.readAmemWrite: 0, p.readBmemWrite: 0, p.Amemequal: 1, p.Bmemequal: 1
# p.readAwbWrite: 0, p.readBwbWrite: 0, p.Awbequal: 1, p.Bwbequal: 1
# multdiv_status: 0, toggle_multdiv_status: 0, just_started: 0, multdiv_ready: 0, multdiv_ready,p.start_mul 0, p.start_div 0, p.my_multdiv.count 31
# data_operandA:           0, data_operandB:           0
# X_alu_result:          0, X_multdiv_result:          0
# ot equal: 0, less than: 0
# MEMORY STAGE
# XM_M_op:           0, XM_M_readB:           0
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# dmem_address    0, dmem_data_in:           0 or 00000000000000000000000000000000, dmem_we: 0, dmem_out: 00000000000000001011010100000100, M_bex_taken: 0, curr rstatus:          2, next rstatus:         15
# WRITEBACK STAGE
# MW_W_op:           0, MW_W_data: 00000000000000001011010100000100
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# reg_we: 0, write reg:  0, data           0
# register[1]:           4
# register[2]:           8
# register[3]:          24
# register[4]:          16
# register[5]:           0
# register[6]:           8
# register[7]:          64
# register[8]:           4
# register[9]:           0
# register[10]:         -10
# register[11]:         -11
# register[12]:          12
# register[13]:          12
# register[14]:           0
# register[15]:           0
# register[16]:           0
# register[17]:           0
# register[18]:           0
# register[19]:           0
# register[20]:        2047
# register[21]:           0
# register[22]:           0
# register[23]:           0
# register[24]:           0
# register[25]:           0
# register[26]:           0
# register[27]:           0
# register[28]:           0
# register[29]:           0
# register[30]:           2
# register[31]:          11
#  p.PC_we 1,p.FD_we 1,p.DX_we 1,p.XM_we 1,p.MW_we 1
# <<<NEGEDGE>>>
# FETCH STAGE
# curr_PC,         48, next_PC:         49
# chosen PC:   48, PC_jump: 0, PC_branch: 0, intialize PC: 0
# p.F/D F instruction: 00000000000000000000000000000000
# DECODE STAGE
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# readAReg:  0, readBReg:  0, writeReg:  0
# EXECUTE STAGE
# DX_X_readA:          0, DX_X_readB:          0
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, real aluop: 00000, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
#  p.readAmemWrite: 0, p.readBmemWrite: 0, p.Amemequal: 1, p.Bmemequal: 1
# p.readAwbWrite: 0, p.readBwbWrite: 0, p.Awbequal: 1, p.Bwbequal: 1
# multdiv_status: 0, toggle_multdiv_status: 0, just_started: 0, multdiv_ready: 0, multdiv_ready,p.start_mul 0, p.start_div 0, p.my_multdiv.count 31
# data_operandA:           0, data_operandB:           0
# X_alu_result:          0, X_multdiv_result:          0
# ot equal: 0, less than: 0
# MEMORY STAGE
# XM_M_op:           0, XM_M_readB:           0
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# dmem_address    0, dmem_data_in:           0 or 00000000000000000000000000000000, dmem_we: 0, dmem_out: 00000000000000001011010100000100, M_bex_taken: 0, curr rstatus:          2, next rstatus:         15
# WRITEBACK STAGE
# MW_W_op:           0, MW_W_data: 00000000000000001011010100000100
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# reg_we: 0, write reg:  0, data           0
# register[1]:           4
# register[2]:           8
# register[3]:          24
# register[4]:          16
# register[5]:           0
# register[6]:           8
# register[7]:          64
# register[8]:           4
# register[9]:           0
# register[10]:         -10
# register[11]:         -11
# register[12]:          12
# register[13]:          12
# register[14]:           0
# register[15]:           0
# register[16]:           0
# register[17]:           0
# register[18]:           0
# register[19]:           0
# register[20]:        2047
# register[21]:           0
# register[22]:           0
# register[23]:           0
# register[24]:           0
# register[25]:           0
# register[26]:           0
# register[27]:           0
# register[28]:           0
# register[29]:           0
# register[30]:           2
# register[31]:          11
#  p.PC_we 1,p.FD_we 1,p.DX_we 1,p.XM_we 1,p.MW_we 1
# <<<NEGEDGE>>>
# FETCH STAGE
# curr_PC,         49, next_PC:         50
# chosen PC:   49, PC_jump: 0, PC_branch: 0, intialize PC: 0
# p.F/D F instruction: 00000000000000000000000000000000
# DECODE STAGE
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# readAReg:  0, readBReg:  0, writeReg:  0
# EXECUTE STAGE
# DX_X_readA:          0, DX_X_readB:          0
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, real aluop: 00000, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
#  p.readAmemWrite: 0, p.readBmemWrite: 0, p.Amemequal: 1, p.Bmemequal: 1
# p.readAwbWrite: 0, p.readBwbWrite: 0, p.Awbequal: 1, p.Bwbequal: 1
# multdiv_status: 0, toggle_multdiv_status: 0, just_started: 0, multdiv_ready: 0, multdiv_ready,p.start_mul 0, p.start_div 0, p.my_multdiv.count 31
# data_operandA:           0, data_operandB:           0
# X_alu_result:          0, X_multdiv_result:          0
# ot equal: 0, less than: 0
# MEMORY STAGE
# XM_M_op:           0, XM_M_readB:           0
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# dmem_address    0, dmem_data_in:           0 or 00000000000000000000000000000000, dmem_we: 0, dmem_out: 00000000000000001011010100000100, M_bex_taken: 0, curr rstatus:          2, next rstatus:         15
# WRITEBACK STAGE
# MW_W_op:           0, MW_W_data: 00000000000000001011010100000100
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# reg_we: 0, write reg:  0, data           0
# register[1]:           4
# register[2]:           8
# register[3]:          24
# register[4]:          16
# register[5]:           0
# register[6]:           8
# register[7]:          64
# register[8]:           4
# register[9]:           0
# register[10]:         -10
# register[11]:         -11
# register[12]:          12
# register[13]:          12
# register[14]:           0
# register[15]:           0
# register[16]:           0
# register[17]:           0
# register[18]:           0
# register[19]:           0
# register[20]:        2047
# register[21]:           0
# register[22]:           0
# register[23]:           0
# register[24]:           0
# register[25]:           0
# register[26]:           0
# register[27]:           0
# register[28]:           0
# register[29]:           0
# register[30]:           2
# register[31]:          11
#  p.PC_we 1,p.FD_we 1,p.DX_we 1,p.XM_we 1,p.MW_we 1
# <<<NEGEDGE>>>
# FETCH STAGE
# curr_PC,         50, next_PC:         51
# chosen PC:   50, PC_jump: 0, PC_branch: 0, intialize PC: 0
# p.F/D F instruction: 00000000000000000000000000000000
# DECODE STAGE
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# readAReg:  0, readBReg:  0, writeReg:  0
# EXECUTE STAGE
# DX_X_readA:          0, DX_X_readB:          0
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, real aluop: 00000, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
#  p.readAmemWrite: 0, p.readBmemWrite: 0, p.Amemequal: 1, p.Bmemequal: 1
# p.readAwbWrite: 0, p.readBwbWrite: 0, p.Awbequal: 1, p.Bwbequal: 1
# multdiv_status: 0, toggle_multdiv_status: 0, just_started: 0, multdiv_ready: 0, multdiv_ready,p.start_mul 0, p.start_div 0, p.my_multdiv.count 31
# data_operandA:           0, data_operandB:           0
# X_alu_result:          0, X_multdiv_result:          0
# ot equal: 0, less than: 0
# MEMORY STAGE
# XM_M_op:           0, XM_M_readB:           0
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# dmem_address    0, dmem_data_in:           0 or 00000000000000000000000000000000, dmem_we: 0, dmem_out: 00000000000000001011010100000100, M_bex_taken: 0, curr rstatus:          2, next rstatus:         15
# WRITEBACK STAGE
# MW_W_op:           0, MW_W_data: 00000000000000001011010100000100
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# reg_we: 0, write reg:  0, data           0
# register[1]:           4
# register[2]:           8
# register[3]:          24
# register[4]:          16
# register[5]:           0
# register[6]:           8
# register[7]:          64
# register[8]:           4
# register[9]:           0
# register[10]:         -10
# register[11]:         -11
# register[12]:          12
# register[13]:          12
# register[14]:           0
# register[15]:           0
# register[16]:           0
# register[17]:           0
# register[18]:           0
# register[19]:           0
# register[20]:        2047
# register[21]:           0
# register[22]:           0
# register[23]:           0
# register[24]:           0
# register[25]:           0
# register[26]:           0
# register[27]:           0
# register[28]:           0
# register[29]:           0
# register[30]:           2
# register[31]:          11
#  p.PC_we 1,p.FD_we 1,p.DX_we 1,p.XM_we 1,p.MW_we 1
# <<<NEGEDGE>>>
# FETCH STAGE
# curr_PC,         51, next_PC:         52
# chosen PC:   51, PC_jump: 0, PC_branch: 0, intialize PC: 0
# p.F/D F instruction: 00000000000000000000000000000000
# DECODE STAGE
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# readAReg:  0, readBReg:  0, writeReg:  0
# EXECUTE STAGE
# DX_X_readA:          0, DX_X_readB:          0
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, real aluop: 00000, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
#  p.readAmemWrite: 0, p.readBmemWrite: 0, p.Amemequal: 1, p.Bmemequal: 1
# p.readAwbWrite: 0, p.readBwbWrite: 0, p.Awbequal: 1, p.Bwbequal: 1
# multdiv_status: 0, toggle_multdiv_status: 0, just_started: 0, multdiv_ready: 0, multdiv_ready,p.start_mul 0, p.start_div 0, p.my_multdiv.count 31
# data_operandA:           0, data_operandB:           0
# X_alu_result:          0, X_multdiv_result:          0
# ot equal: 0, less than: 0
# MEMORY STAGE
# XM_M_op:           0, XM_M_readB:           0
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# dmem_address    0, dmem_data_in:           0 or 00000000000000000000000000000000, dmem_we: 0, dmem_out: 00000000000000001011010100000100, M_bex_taken: 0, curr rstatus:          2, next rstatus:         15
# WRITEBACK STAGE
# MW_W_op:           0, MW_W_data: 00000000000000001011010100000100
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# reg_we: 0, write reg:  0, data           0
# register[1]:           4
# register[2]:           8
# register[3]:          24
# register[4]:          16
# register[5]:           0
# register[6]:           8
# register[7]:          64
# register[8]:           4
# register[9]:           0
# register[10]:         -10
# register[11]:         -11
# register[12]:          12
# register[13]:          12
# register[14]:           0
# register[15]:           0
# register[16]:           0
# register[17]:           0
# register[18]:           0
# register[19]:           0
# register[20]:        2047
# register[21]:           0
# register[22]:           0
# register[23]:           0
# register[24]:           0
# register[25]:           0
# register[26]:           0
# register[27]:           0
# register[28]:           0
# register[29]:           0
# register[30]:           2
# register[31]:          11
#  p.PC_we 1,p.FD_we 1,p.DX_we 1,p.XM_we 1,p.MW_we 1
# <<<NEGEDGE>>>
# FETCH STAGE
# curr_PC,         52, next_PC:         53
# chosen PC:   52, PC_jump: 0, PC_branch: 0, intialize PC: 0
# p.F/D F instruction: 00000000000000000000000000000000
# DECODE STAGE
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# readAReg:  0, readBReg:  0, writeReg:  0
# EXECUTE STAGE
# DX_X_readA:          0, DX_X_readB:          0
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, real aluop: 00000, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
#  p.readAmemWrite: 0, p.readBmemWrite: 0, p.Amemequal: 1, p.Bmemequal: 1
# p.readAwbWrite: 0, p.readBwbWrite: 0, p.Awbequal: 1, p.Bwbequal: 1
# multdiv_status: 0, toggle_multdiv_status: 0, just_started: 0, multdiv_ready: 0, multdiv_ready,p.start_mul 0, p.start_div 0, p.my_multdiv.count 31
# data_operandA:           0, data_operandB:           0
# X_alu_result:          0, X_multdiv_result:          0
# ot equal: 0, less than: 0
# MEMORY STAGE
# XM_M_op:           0, XM_M_readB:           0
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# dmem_address    0, dmem_data_in:           0 or 00000000000000000000000000000000, dmem_we: 0, dmem_out: 00000000000000001011010100000100, M_bex_taken: 0, curr rstatus:          2, next rstatus:         15
# WRITEBACK STAGE
# MW_W_op:           0, MW_W_data: 00000000000000001011010100000100
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# reg_we: 0, write reg:  0, data           0
# register[1]:           4
# register[2]:           8
# register[3]:          24
# register[4]:          16
# register[5]:           0
# register[6]:           8
# register[7]:          64
# register[8]:           4
# register[9]:           0
# register[10]:         -10
# register[11]:         -11
# register[12]:          12
# register[13]:          12
# register[14]:           0
# register[15]:           0
# register[16]:           0
# register[17]:           0
# register[18]:           0
# register[19]:           0
# register[20]:        2047
# register[21]:           0
# register[22]:           0
# register[23]:           0
# register[24]:           0
# register[25]:           0
# register[26]:           0
# register[27]:           0
# register[28]:           0
# register[29]:           0
# register[30]:           2
# register[31]:          11
#  p.PC_we 1,p.FD_we 1,p.DX_we 1,p.XM_we 1,p.MW_we 1
# <<<NEGEDGE>>>
# FETCH STAGE
# curr_PC,         53, next_PC:         54
# chosen PC:   53, PC_jump: 0, PC_branch: 0, intialize PC: 0
# p.F/D F instruction: 00000000000000000000000000000000
# DECODE STAGE
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# readAReg:  0, readBReg:  0, writeReg:  0
# EXECUTE STAGE
# DX_X_readA:          0, DX_X_readB:          0
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, real aluop: 00000, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
#  p.readAmemWrite: 0, p.readBmemWrite: 0, p.Amemequal: 1, p.Bmemequal: 1
# p.readAwbWrite: 0, p.readBwbWrite: 0, p.Awbequal: 1, p.Bwbequal: 1
# multdiv_status: 0, toggle_multdiv_status: 0, just_started: 0, multdiv_ready: 0, multdiv_ready,p.start_mul 0, p.start_div 0, p.my_multdiv.count 31
# data_operandA:           0, data_operandB:           0
# X_alu_result:          0, X_multdiv_result:          0
# ot equal: 0, less than: 0
# MEMORY STAGE
# XM_M_op:           0, XM_M_readB:           0
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# dmem_address    0, dmem_data_in:           0 or 00000000000000000000000000000000, dmem_we: 0, dmem_out: 00000000000000001011010100000100, M_bex_taken: 0, curr rstatus:          2, next rstatus:         15
# WRITEBACK STAGE
# MW_W_op:           0, MW_W_data: 00000000000000001011010100000100
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# reg_we: 0, write reg:  0, data           0
# register[1]:           4
# register[2]:           8
# register[3]:          24
# register[4]:          16
# register[5]:           0
# register[6]:           8
# register[7]:          64
# register[8]:           4
# register[9]:           0
# register[10]:         -10
# register[11]:         -11
# register[12]:          12
# register[13]:          12
# register[14]:           0
# register[15]:           0
# register[16]:           0
# register[17]:           0
# register[18]:           0
# register[19]:           0
# register[20]:        2047
# register[21]:           0
# register[22]:           0
# register[23]:           0
# register[24]:           0
# register[25]:           0
# register[26]:           0
# register[27]:           0
# register[28]:           0
# register[29]:           0
# register[30]:           2
# register[31]:          11
#  p.PC_we 1,p.FD_we 1,p.DX_we 1,p.XM_we 1,p.MW_we 1
# <<<NEGEDGE>>>
# FETCH STAGE
# curr_PC,         54, next_PC:         55
# chosen PC:   54, PC_jump: 0, PC_branch: 0, intialize PC: 0
# p.F/D F instruction: 00000000000000000000000000000000
# DECODE STAGE
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# readAReg:  0, readBReg:  0, writeReg:  0
# EXECUTE STAGE
# DX_X_readA:          0, DX_X_readB:          0
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, real aluop: 00000, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
#  p.readAmemWrite: 0, p.readBmemWrite: 0, p.Amemequal: 1, p.Bmemequal: 1
# p.readAwbWrite: 0, p.readBwbWrite: 0, p.Awbequal: 1, p.Bwbequal: 1
# multdiv_status: 0, toggle_multdiv_status: 0, just_started: 0, multdiv_ready: 0, multdiv_ready,p.start_mul 0, p.start_div 0, p.my_multdiv.count 31
# data_operandA:           0, data_operandB:           0
# X_alu_result:          0, X_multdiv_result:          0
# ot equal: 0, less than: 0
# MEMORY STAGE
# XM_M_op:           0, XM_M_readB:           0
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# dmem_address    0, dmem_data_in:           0 or 00000000000000000000000000000000, dmem_we: 0, dmem_out: 00000000000000001011010100000100, M_bex_taken: 0, curr rstatus:          2, next rstatus:         15
# WRITEBACK STAGE
# MW_W_op:           0, MW_W_data: 00000000000000001011010100000100
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# reg_we: 0, write reg:  0, data           0
# register[1]:           4
# register[2]:           8
# register[3]:          24
# register[4]:          16
# register[5]:           0
# register[6]:           8
# register[7]:          64
# register[8]:           4
# register[9]:           0
# register[10]:         -10
# register[11]:         -11
# register[12]:          12
# register[13]:          12
# register[14]:           0
# register[15]:           0
# register[16]:           0
# register[17]:           0
# register[18]:           0
# register[19]:           0
# register[20]:        2047
# register[21]:           0
# register[22]:           0
# register[23]:           0
# register[24]:           0
# register[25]:           0
# register[26]:           0
# register[27]:           0
# register[28]:           0
# register[29]:           0
# register[30]:           2
# register[31]:          11
#  p.PC_we 1,p.FD_we 1,p.DX_we 1,p.XM_we 1,p.MW_we 1
# <<<NEGEDGE>>>
# FETCH STAGE
# curr_PC,         55, next_PC:         56
# chosen PC:   55, PC_jump: 0, PC_branch: 0, intialize PC: 0
# p.F/D F instruction: 00000000000000000000000000000000
# DECODE STAGE
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# readAReg:  0, readBReg:  0, writeReg:  0
# EXECUTE STAGE
# DX_X_readA:          0, DX_X_readB:          0
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, real aluop: 00000, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
#  p.readAmemWrite: 0, p.readBmemWrite: 0, p.Amemequal: 1, p.Bmemequal: 1
# p.readAwbWrite: 0, p.readBwbWrite: 0, p.Awbequal: 1, p.Bwbequal: 1
# multdiv_status: 0, toggle_multdiv_status: 0, just_started: 0, multdiv_ready: 0, multdiv_ready,p.start_mul 0, p.start_div 0, p.my_multdiv.count 31
# data_operandA:           0, data_operandB:           0
# X_alu_result:          0, X_multdiv_result:          0
# ot equal: 0, less than: 0
# MEMORY STAGE
# XM_M_op:           0, XM_M_readB:           0
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# dmem_address    0, dmem_data_in:           0 or 00000000000000000000000000000000, dmem_we: 0, dmem_out: 00000000000000001011010100000100, M_bex_taken: 0, curr rstatus:          2, next rstatus:         15
# WRITEBACK STAGE
# MW_W_op:           0, MW_W_data: 00000000000000001011010100000100
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# reg_we: 0, write reg:  0, data           0
# register[1]:           4
# register[2]:           8
# register[3]:          24
# register[4]:          16
# register[5]:           0
# register[6]:           8
# register[7]:          64
# register[8]:           4
# register[9]:           0
# register[10]:         -10
# register[11]:         -11
# register[12]:          12
# register[13]:          12
# register[14]:           0
# register[15]:           0
# register[16]:           0
# register[17]:           0
# register[18]:           0
# register[19]:           0
# register[20]:        2047
# register[21]:           0
# register[22]:           0
# register[23]:           0
# register[24]:           0
# register[25]:           0
# register[26]:           0
# register[27]:           0
# register[28]:           0
# register[29]:           0
# register[30]:           2
# register[31]:          11
#  p.PC_we 1,p.FD_we 1,p.DX_we 1,p.XM_we 1,p.MW_we 1
# <<<NEGEDGE>>>
# FETCH STAGE
# curr_PC,         56, next_PC:         57
# chosen PC:   56, PC_jump: 0, PC_branch: 0, intialize PC: 0
# p.F/D F instruction: 00000000000000000000000000000000
# DECODE STAGE
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# readAReg:  0, readBReg:  0, writeReg:  0
# EXECUTE STAGE
# DX_X_readA:          0, DX_X_readB:          0
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, real aluop: 00000, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
#  p.readAmemWrite: 0, p.readBmemWrite: 0, p.Amemequal: 1, p.Bmemequal: 1
# p.readAwbWrite: 0, p.readBwbWrite: 0, p.Awbequal: 1, p.Bwbequal: 1
# multdiv_status: 0, toggle_multdiv_status: 0, just_started: 0, multdiv_ready: 0, multdiv_ready,p.start_mul 0, p.start_div 0, p.my_multdiv.count 31
# data_operandA:           0, data_operandB:           0
# X_alu_result:          0, X_multdiv_result:          0
# ot equal: 0, less than: 0
# MEMORY STAGE
# XM_M_op:           0, XM_M_readB:           0
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# dmem_address    0, dmem_data_in:           0 or 00000000000000000000000000000000, dmem_we: 0, dmem_out: 00000000000000001011010100000100, M_bex_taken: 0, curr rstatus:          2, next rstatus:         15
# WRITEBACK STAGE
# MW_W_op:           0, MW_W_data: 00000000000000001011010100000100
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# reg_we: 0, write reg:  0, data           0
# register[1]:           4
# register[2]:           8
# register[3]:          24
# register[4]:          16
# register[5]:           0
# register[6]:           8
# register[7]:          64
# register[8]:           4
# register[9]:           0
# register[10]:         -10
# register[11]:         -11
# register[12]:          12
# register[13]:          12
# register[14]:           0
# register[15]:           0
# register[16]:           0
# register[17]:           0
# register[18]:           0
# register[19]:           0
# register[20]:        2047
# register[21]:           0
# register[22]:           0
# register[23]:           0
# register[24]:           0
# register[25]:           0
# register[26]:           0
# register[27]:           0
# register[28]:           0
# register[29]:           0
# register[30]:           2
# register[31]:          11
#  p.PC_we 1,p.FD_we 1,p.DX_we 1,p.XM_we 1,p.MW_we 1
# <<<NEGEDGE>>>
# FETCH STAGE
# curr_PC,         57, next_PC:         58
# chosen PC:   57, PC_jump: 0, PC_branch: 0, intialize PC: 0
# p.F/D F instruction: 00000000000000000000000000000000
# DECODE STAGE
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# readAReg:  0, readBReg:  0, writeReg:  0
# EXECUTE STAGE
# DX_X_readA:          0, DX_X_readB:          0
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, real aluop: 00000, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
#  p.readAmemWrite: 0, p.readBmemWrite: 0, p.Amemequal: 1, p.Bmemequal: 1
# p.readAwbWrite: 0, p.readBwbWrite: 0, p.Awbequal: 1, p.Bwbequal: 1
# multdiv_status: 0, toggle_multdiv_status: 0, just_started: 0, multdiv_ready: 0, multdiv_ready,p.start_mul 0, p.start_div 0, p.my_multdiv.count 31
# data_operandA:           0, data_operandB:           0
# X_alu_result:          0, X_multdiv_result:          0
# ot equal: 0, less than: 0
# MEMORY STAGE
# XM_M_op:           0, XM_M_readB:           0
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# dmem_address    0, dmem_data_in:           0 or 00000000000000000000000000000000, dmem_we: 0, dmem_out: 00000000000000001011010100000100, M_bex_taken: 0, curr rstatus:          2, next rstatus:         15
# WRITEBACK STAGE
# MW_W_op:           0, MW_W_data: 00000000000000001011010100000100
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# reg_we: 0, write reg:  0, data           0
# register[1]:           4
# register[2]:           8
# register[3]:          24
# register[4]:          16
# register[5]:           0
# register[6]:           8
# register[7]:          64
# register[8]:           4
# register[9]:           0
# register[10]:         -10
# register[11]:         -11
# register[12]:          12
# register[13]:          12
# register[14]:           0
# register[15]:           0
# register[16]:           0
# register[17]:           0
# register[18]:           0
# register[19]:           0
# register[20]:        2047
# register[21]:           0
# register[22]:           0
# register[23]:           0
# register[24]:           0
# register[25]:           0
# register[26]:           0
# register[27]:           0
# register[28]:           0
# register[29]:           0
# register[30]:           2
# register[31]:          11
#  p.PC_we 1,p.FD_we 1,p.DX_we 1,p.XM_we 1,p.MW_we 1
# <<<NEGEDGE>>>
# FETCH STAGE
# curr_PC,         58, next_PC:         59
# chosen PC:   58, PC_jump: 0, PC_branch: 0, intialize PC: 0
# p.F/D F instruction: 00000000000000000000000000000000
# DECODE STAGE
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# readAReg:  0, readBReg:  0, writeReg:  0
# EXECUTE STAGE
# DX_X_readA:          0, DX_X_readB:          0
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, real aluop: 00000, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
#  p.readAmemWrite: 0, p.readBmemWrite: 0, p.Amemequal: 1, p.Bmemequal: 1
# p.readAwbWrite: 0, p.readBwbWrite: 0, p.Awbequal: 1, p.Bwbequal: 1
# multdiv_status: 0, toggle_multdiv_status: 0, just_started: 0, multdiv_ready: 0, multdiv_ready,p.start_mul 0, p.start_div 0, p.my_multdiv.count 31
# data_operandA:           0, data_operandB:           0
# X_alu_result:          0, X_multdiv_result:          0
# ot equal: 0, less than: 0
# MEMORY STAGE
# XM_M_op:           0, XM_M_readB:           0
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# dmem_address    0, dmem_data_in:           0 or 00000000000000000000000000000000, dmem_we: 0, dmem_out: 00000000000000001011010100000100, M_bex_taken: 0, curr rstatus:          2, next rstatus:         15
# WRITEBACK STAGE
# MW_W_op:           0, MW_W_data: 00000000000000001011010100000100
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# reg_we: 0, write reg:  0, data           0
# register[1]:           4
# register[2]:           8
# register[3]:          24
# register[4]:          16
# register[5]:           0
# register[6]:           8
# register[7]:          64
# register[8]:           4
# register[9]:           0
# register[10]:         -10
# register[11]:         -11
# register[12]:          12
# register[13]:          12
# register[14]:           0
# register[15]:           0
# register[16]:           0
# register[17]:           0
# register[18]:           0
# register[19]:           0
# register[20]:        2047
# register[21]:           0
# register[22]:           0
# register[23]:           0
# register[24]:           0
# register[25]:           0
# register[26]:           0
# register[27]:           0
# register[28]:           0
# register[29]:           0
# register[30]:           2
# register[31]:          11
#  p.PC_we 1,p.FD_we 1,p.DX_we 1,p.XM_we 1,p.MW_we 1
# <<<NEGEDGE>>>
# FETCH STAGE
# curr_PC,         59, next_PC:         60
# chosen PC:   59, PC_jump: 0, PC_branch: 0, intialize PC: 0
# p.F/D F instruction: 00000000000000000000000000000000
# DECODE STAGE
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# readAReg:  0, readBReg:  0, writeReg:  0
# EXECUTE STAGE
# DX_X_readA:          0, DX_X_readB:          0
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, real aluop: 00000, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
#  p.readAmemWrite: 0, p.readBmemWrite: 0, p.Amemequal: 1, p.Bmemequal: 1
# p.readAwbWrite: 0, p.readBwbWrite: 0, p.Awbequal: 1, p.Bwbequal: 1
# multdiv_status: 0, toggle_multdiv_status: 0, just_started: 0, multdiv_ready: 0, multdiv_ready,p.start_mul 0, p.start_div 0, p.my_multdiv.count 31
# data_operandA:           0, data_operandB:           0
# X_alu_result:          0, X_multdiv_result:          0
# ot equal: 0, less than: 0
# MEMORY STAGE
# XM_M_op:           0, XM_M_readB:           0
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# dmem_address    0, dmem_data_in:           0 or 00000000000000000000000000000000, dmem_we: 0, dmem_out: 00000000000000001011010100000100, M_bex_taken: 0, curr rstatus:          2, next rstatus:         15
# WRITEBACK STAGE
# MW_W_op:           0, MW_W_data: 00000000000000001011010100000100
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# reg_we: 0, write reg:  0, data           0
# register[1]:           4
# register[2]:           8
# register[3]:          24
# register[4]:          16
# register[5]:           0
# register[6]:           8
# register[7]:          64
# register[8]:           4
# register[9]:           0
# register[10]:         -10
# register[11]:         -11
# register[12]:          12
# register[13]:          12
# register[14]:           0
# register[15]:           0
# register[16]:           0
# register[17]:           0
# register[18]:           0
# register[19]:           0
# register[20]:        2047
# register[21]:           0
# register[22]:           0
# register[23]:           0
# register[24]:           0
# register[25]:           0
# register[26]:           0
# register[27]:           0
# register[28]:           0
# register[29]:           0
# register[30]:           2
# register[31]:          11
#  p.PC_we 1,p.FD_we 1,p.DX_we 1,p.XM_we 1,p.MW_we 1
# <<<NEGEDGE>>>
# FETCH STAGE
# curr_PC,         60, next_PC:         61
# chosen PC:   60, PC_jump: 0, PC_branch: 0, intialize PC: 0
# p.F/D F instruction: 00000000000000000000000000000000
# DECODE STAGE
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# readAReg:  0, readBReg:  0, writeReg:  0
# EXECUTE STAGE
# DX_X_readA:          0, DX_X_readB:          0
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, real aluop: 00000, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
#  p.readAmemWrite: 0, p.readBmemWrite: 0, p.Amemequal: 1, p.Bmemequal: 1
# p.readAwbWrite: 0, p.readBwbWrite: 0, p.Awbequal: 1, p.Bwbequal: 1
# multdiv_status: 0, toggle_multdiv_status: 0, just_started: 0, multdiv_ready: 0, multdiv_ready,p.start_mul 0, p.start_div 0, p.my_multdiv.count 31
# data_operandA:           0, data_operandB:           0
# X_alu_result:          0, X_multdiv_result:          0
# ot equal: 0, less than: 0
# MEMORY STAGE
# XM_M_op:           0, XM_M_readB:           0
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# dmem_address    0, dmem_data_in:           0 or 00000000000000000000000000000000, dmem_we: 0, dmem_out: 00000000000000001011010100000100, M_bex_taken: 0, curr rstatus:          2, next rstatus:         15
# WRITEBACK STAGE
# MW_W_op:           0, MW_W_data: 00000000000000001011010100000100
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# reg_we: 0, write reg:  0, data           0
# register[1]:           4
# register[2]:           8
# register[3]:          24
# register[4]:          16
# register[5]:           0
# register[6]:           8
# register[7]:          64
# register[8]:           4
# register[9]:           0
# register[10]:         -10
# register[11]:         -11
# register[12]:          12
# register[13]:          12
# register[14]:           0
# register[15]:           0
# register[16]:           0
# register[17]:           0
# register[18]:           0
# register[19]:           0
# register[20]:        2047
# register[21]:           0
# register[22]:           0
# register[23]:           0
# register[24]:           0
# register[25]:           0
# register[26]:           0
# register[27]:           0
# register[28]:           0
# register[29]:           0
# register[30]:           2
# register[31]:          11
#  p.PC_we 1,p.FD_we 1,p.DX_we 1,p.XM_we 1,p.MW_we 1
# <<<NEGEDGE>>>
# FETCH STAGE
# curr_PC,         61, next_PC:         62
# chosen PC:   61, PC_jump: 0, PC_branch: 0, intialize PC: 0
# p.F/D F instruction: 00000000000000000000000000000000
# DECODE STAGE
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# readAReg:  0, readBReg:  0, writeReg:  0
# EXECUTE STAGE
# DX_X_readA:          0, DX_X_readB:          0
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, real aluop: 00000, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
#  p.readAmemWrite: 0, p.readBmemWrite: 0, p.Amemequal: 1, p.Bmemequal: 1
# p.readAwbWrite: 0, p.readBwbWrite: 0, p.Awbequal: 1, p.Bwbequal: 1
# multdiv_status: 0, toggle_multdiv_status: 0, just_started: 0, multdiv_ready: 0, multdiv_ready,p.start_mul 0, p.start_div 0, p.my_multdiv.count 31
# data_operandA:           0, data_operandB:           0
# X_alu_result:          0, X_multdiv_result:          0
# ot equal: 0, less than: 0
# MEMORY STAGE
# XM_M_op:           0, XM_M_readB:           0
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# dmem_address    0, dmem_data_in:           0 or 00000000000000000000000000000000, dmem_we: 0, dmem_out: 00000000000000001011010100000100, M_bex_taken: 0, curr rstatus:          2, next rstatus:         15
# WRITEBACK STAGE
# MW_W_op:           0, MW_W_data: 00000000000000001011010100000100
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# reg_we: 0, write reg:  0, data           0
# register[1]:           4
# register[2]:           8
# register[3]:          24
# register[4]:          16
# register[5]:           0
# register[6]:           8
# register[7]:          64
# register[8]:           4
# register[9]:           0
# register[10]:         -10
# register[11]:         -11
# register[12]:          12
# register[13]:          12
# register[14]:           0
# register[15]:           0
# register[16]:           0
# register[17]:           0
# register[18]:           0
# register[19]:           0
# register[20]:        2047
# register[21]:           0
# register[22]:           0
# register[23]:           0
# register[24]:           0
# register[25]:           0
# register[26]:           0
# register[27]:           0
# register[28]:           0
# register[29]:           0
# register[30]:           2
# register[31]:          11
#  p.PC_we 1,p.FD_we 1,p.DX_we 1,p.XM_we 1,p.MW_we 1
# <<<NEGEDGE>>>
# FETCH STAGE
# curr_PC,         62, next_PC:         63
# chosen PC:   62, PC_jump: 0, PC_branch: 0, intialize PC: 0
# p.F/D F instruction: 00000000000000000000000000000000
# DECODE STAGE
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# readAReg:  0, readBReg:  0, writeReg:  0
# EXECUTE STAGE
# DX_X_readA:          0, DX_X_readB:          0
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, real aluop: 00000, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
#  p.readAmemWrite: 0, p.readBmemWrite: 0, p.Amemequal: 1, p.Bmemequal: 1
# p.readAwbWrite: 0, p.readBwbWrite: 0, p.Awbequal: 1, p.Bwbequal: 1
# multdiv_status: 0, toggle_multdiv_status: 0, just_started: 0, multdiv_ready: 0, multdiv_ready,p.start_mul 0, p.start_div 0, p.my_multdiv.count 31
# data_operandA:           0, data_operandB:           0
# X_alu_result:          0, X_multdiv_result:          0
# ot equal: 0, less than: 0
# MEMORY STAGE
# XM_M_op:           0, XM_M_readB:           0
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# dmem_address    0, dmem_data_in:           0 or 00000000000000000000000000000000, dmem_we: 0, dmem_out: 00000000000000001011010100000100, M_bex_taken: 0, curr rstatus:          2, next rstatus:         15
# WRITEBACK STAGE
# MW_W_op:           0, MW_W_data: 00000000000000001011010100000100
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# reg_we: 0, write reg:  0, data           0
# register[1]:           4
# register[2]:           8
# register[3]:          24
# register[4]:          16
# register[5]:           0
# register[6]:           8
# register[7]:          64
# register[8]:           4
# register[9]:           0
# register[10]:         -10
# register[11]:         -11
# register[12]:          12
# register[13]:          12
# register[14]:           0
# register[15]:           0
# register[16]:           0
# register[17]:           0
# register[18]:           0
# register[19]:           0
# register[20]:        2047
# register[21]:           0
# register[22]:           0
# register[23]:           0
# register[24]:           0
# register[25]:           0
# register[26]:           0
# register[27]:           0
# register[28]:           0
# register[29]:           0
# register[30]:           2
# register[31]:          11
#  p.PC_we 1,p.FD_we 1,p.DX_we 1,p.XM_we 1,p.MW_we 1
# <<<NEGEDGE>>>
# FETCH STAGE
# curr_PC,         63, next_PC:         64
# chosen PC:   63, PC_jump: 0, PC_branch: 0, intialize PC: 0
# p.F/D F instruction: 00000000000000000000000000000000
# DECODE STAGE
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# readAReg:  0, readBReg:  0, writeReg:  0
# EXECUTE STAGE
# DX_X_readA:          0, DX_X_readB:          0
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, real aluop: 00000, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
#  p.readAmemWrite: 0, p.readBmemWrite: 0, p.Amemequal: 1, p.Bmemequal: 1
# p.readAwbWrite: 0, p.readBwbWrite: 0, p.Awbequal: 1, p.Bwbequal: 1
# multdiv_status: 0, toggle_multdiv_status: 0, just_started: 0, multdiv_ready: 0, multdiv_ready,p.start_mul 0, p.start_div 0, p.my_multdiv.count 31
# data_operandA:           0, data_operandB:           0
# X_alu_result:          0, X_multdiv_result:          0
# ot equal: 0, less than: 0
# MEMORY STAGE
# XM_M_op:           0, XM_M_readB:           0
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# dmem_address    0, dmem_data_in:           0 or 00000000000000000000000000000000, dmem_we: 0, dmem_out: 00000000000000001011010100000100, M_bex_taken: 0, curr rstatus:          2, next rstatus:         15
# WRITEBACK STAGE
# MW_W_op:           0, MW_W_data: 00000000000000001011010100000100
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# reg_we: 0, write reg:  0, data           0
# register[1]:           4
# register[2]:           8
# register[3]:          24
# register[4]:          16
# register[5]:           0
# register[6]:           8
# register[7]:          64
# register[8]:           4
# register[9]:           0
# register[10]:         -10
# register[11]:         -11
# register[12]:          12
# register[13]:          12
# register[14]:           0
# register[15]:           0
# register[16]:           0
# register[17]:           0
# register[18]:           0
# register[19]:           0
# register[20]:        2047
# register[21]:           0
# register[22]:           0
# register[23]:           0
# register[24]:           0
# register[25]:           0
# register[26]:           0
# register[27]:           0
# register[28]:           0
# register[29]:           0
# register[30]:           2
# register[31]:          11
#  p.PC_we 1,p.FD_we 1,p.DX_we 1,p.XM_we 1,p.MW_we 1
# <<<NEGEDGE>>>
# FETCH STAGE
# curr_PC,         64, next_PC:         65
# chosen PC:   64, PC_jump: 0, PC_branch: 0, intialize PC: 0
# p.F/D F instruction: 00000000000000000000000000000000
# DECODE STAGE
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# readAReg:  0, readBReg:  0, writeReg:  0
# EXECUTE STAGE
# DX_X_readA:          0, DX_X_readB:          0
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, real aluop: 00000, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
#  p.readAmemWrite: 0, p.readBmemWrite: 0, p.Amemequal: 1, p.Bmemequal: 1
# p.readAwbWrite: 0, p.readBwbWrite: 0, p.Awbequal: 1, p.Bwbequal: 1
# multdiv_status: 0, toggle_multdiv_status: 0, just_started: 0, multdiv_ready: 0, multdiv_ready,p.start_mul 0, p.start_div 0, p.my_multdiv.count 31
# data_operandA:           0, data_operandB:           0
# X_alu_result:          0, X_multdiv_result:          0
# ot equal: 0, less than: 0
# MEMORY STAGE
# XM_M_op:           0, XM_M_readB:           0
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# dmem_address    0, dmem_data_in:           0 or 00000000000000000000000000000000, dmem_we: 0, dmem_out: 00000000000000001011010100000100, M_bex_taken: 0, curr rstatus:          2, next rstatus:         15
# WRITEBACK STAGE
# MW_W_op:           0, MW_W_data: 00000000000000001011010100000100
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# reg_we: 0, write reg:  0, data           0
# register[1]:           4
# register[2]:           8
# register[3]:          24
# register[4]:          16
# register[5]:           0
# register[6]:           8
# register[7]:          64
# register[8]:           4
# register[9]:           0
# register[10]:         -10
# register[11]:         -11
# register[12]:          12
# register[13]:          12
# register[14]:           0
# register[15]:           0
# register[16]:           0
# register[17]:           0
# register[18]:           0
# register[19]:           0
# register[20]:        2047
# register[21]:           0
# register[22]:           0
# register[23]:           0
# register[24]:           0
# register[25]:           0
# register[26]:           0
# register[27]:           0
# register[28]:           0
# register[29]:           0
# register[30]:           2
# register[31]:          11
#  p.PC_we 1,p.FD_we 1,p.DX_we 1,p.XM_we 1,p.MW_we 1
# <<<NEGEDGE>>>
# FETCH STAGE
# curr_PC,         65, next_PC:         66
# chosen PC:   65, PC_jump: 0, PC_branch: 0, intialize PC: 0
# p.F/D F instruction: 00000000000000000000000000000000
# DECODE STAGE
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# readAReg:  0, readBReg:  0, writeReg:  0
# EXECUTE STAGE
# DX_X_readA:          0, DX_X_readB:          0
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, real aluop: 00000, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
#  p.readAmemWrite: 0, p.readBmemWrite: 0, p.Amemequal: 1, p.Bmemequal: 1
# p.readAwbWrite: 0, p.readBwbWrite: 0, p.Awbequal: 1, p.Bwbequal: 1
# multdiv_status: 0, toggle_multdiv_status: 0, just_started: 0, multdiv_ready: 0, multdiv_ready,p.start_mul 0, p.start_div 0, p.my_multdiv.count 31
# data_operandA:           0, data_operandB:           0
# X_alu_result:          0, X_multdiv_result:          0
# ot equal: 0, less than: 0
# MEMORY STAGE
# XM_M_op:           0, XM_M_readB:           0
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# dmem_address    0, dmem_data_in:           0 or 00000000000000000000000000000000, dmem_we: 0, dmem_out: 00000000000000001011010100000100, M_bex_taken: 0, curr rstatus:          2, next rstatus:         15
# WRITEBACK STAGE
# MW_W_op:           0, MW_W_data: 00000000000000001011010100000100
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# reg_we: 0, write reg:  0, data           0
# register[1]:           4
# register[2]:           8
# register[3]:          24
# register[4]:          16
# register[5]:           0
# register[6]:           8
# register[7]:          64
# register[8]:           4
# register[9]:           0
# register[10]:         -10
# register[11]:         -11
# register[12]:          12
# register[13]:          12
# register[14]:           0
# register[15]:           0
# register[16]:           0
# register[17]:           0
# register[18]:           0
# register[19]:           0
# register[20]:        2047
# register[21]:           0
# register[22]:           0
# register[23]:           0
# register[24]:           0
# register[25]:           0
# register[26]:           0
# register[27]:           0
# register[28]:           0
# register[29]:           0
# register[30]:           2
# register[31]:          11
#  p.PC_we 1,p.FD_we 1,p.DX_we 1,p.XM_we 1,p.MW_we 1
# <<<NEGEDGE>>>
# FETCH STAGE
# curr_PC,         66, next_PC:         67
# chosen PC:   66, PC_jump: 0, PC_branch: 0, intialize PC: 0
# p.F/D F instruction: 00000000000000000000000000000000
# DECODE STAGE
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# readAReg:  0, readBReg:  0, writeReg:  0
# EXECUTE STAGE
# DX_X_readA:          0, DX_X_readB:          0
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, real aluop: 00000, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
#  p.readAmemWrite: 0, p.readBmemWrite: 0, p.Amemequal: 1, p.Bmemequal: 1
# p.readAwbWrite: 0, p.readBwbWrite: 0, p.Awbequal: 1, p.Bwbequal: 1
# multdiv_status: 0, toggle_multdiv_status: 0, just_started: 0, multdiv_ready: 0, multdiv_ready,p.start_mul 0, p.start_div 0, p.my_multdiv.count 31
# data_operandA:           0, data_operandB:           0
# X_alu_result:          0, X_multdiv_result:          0
# ot equal: 0, less than: 0
# MEMORY STAGE
# XM_M_op:           0, XM_M_readB:           0
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# dmem_address    0, dmem_data_in:           0 or 00000000000000000000000000000000, dmem_we: 0, dmem_out: 00000000000000001011010100000100, M_bex_taken: 0, curr rstatus:          2, next rstatus:         15
# WRITEBACK STAGE
# MW_W_op:           0, MW_W_data: 00000000000000001011010100000100
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# reg_we: 0, write reg:  0, data           0
# register[1]:           4
# register[2]:           8
# register[3]:          24
# register[4]:          16
# register[5]:           0
# register[6]:           8
# register[7]:          64
# register[8]:           4
# register[9]:           0
# register[10]:         -10
# register[11]:         -11
# register[12]:          12
# register[13]:          12
# register[14]:           0
# register[15]:           0
# register[16]:           0
# register[17]:           0
# register[18]:           0
# register[19]:           0
# register[20]:        2047
# register[21]:           0
# register[22]:           0
# register[23]:           0
# register[24]:           0
# register[25]:           0
# register[26]:           0
# register[27]:           0
# register[28]:           0
# register[29]:           0
# register[30]:           2
# register[31]:          11
#  p.PC_we 1,p.FD_we 1,p.DX_we 1,p.XM_we 1,p.MW_we 1
# <<<NEGEDGE>>>
# FETCH STAGE
# curr_PC,         67, next_PC:         68
# chosen PC:   67, PC_jump: 0, PC_branch: 0, intialize PC: 0
# p.F/D F instruction: 00000000000000000000000000000000
# DECODE STAGE
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# readAReg:  0, readBReg:  0, writeReg:  0
# EXECUTE STAGE
# DX_X_readA:          0, DX_X_readB:          0
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, real aluop: 00000, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
#  p.readAmemWrite: 0, p.readBmemWrite: 0, p.Amemequal: 1, p.Bmemequal: 1
# p.readAwbWrite: 0, p.readBwbWrite: 0, p.Awbequal: 1, p.Bwbequal: 1
# multdiv_status: 0, toggle_multdiv_status: 0, just_started: 0, multdiv_ready: 0, multdiv_ready,p.start_mul 0, p.start_div 0, p.my_multdiv.count 31
# data_operandA:           0, data_operandB:           0
# X_alu_result:          0, X_multdiv_result:          0
# ot equal: 0, less than: 0
# MEMORY STAGE
# XM_M_op:           0, XM_M_readB:           0
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# dmem_address    0, dmem_data_in:           0 or 00000000000000000000000000000000, dmem_we: 0, dmem_out: 00000000000000001011010100000100, M_bex_taken: 0, curr rstatus:          2, next rstatus:         15
# WRITEBACK STAGE
# MW_W_op:           0, MW_W_data: 00000000000000001011010100000100
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# reg_we: 0, write reg:  0, data           0
# register[1]:           4
# register[2]:           8
# register[3]:          24
# register[4]:          16
# register[5]:           0
# register[6]:           8
# register[7]:          64
# register[8]:           4
# register[9]:           0
# register[10]:         -10
# register[11]:         -11
# register[12]:          12
# register[13]:          12
# register[14]:           0
# register[15]:           0
# register[16]:           0
# register[17]:           0
# register[18]:           0
# register[19]:           0
# register[20]:        2047
# register[21]:           0
# register[22]:           0
# register[23]:           0
# register[24]:           0
# register[25]:           0
# register[26]:           0
# register[27]:           0
# register[28]:           0
# register[29]:           0
# register[30]:           2
# register[31]:          11
#  p.PC_we 1,p.FD_we 1,p.DX_we 1,p.XM_we 1,p.MW_we 1
# <<<NEGEDGE>>>
# FETCH STAGE
# curr_PC,         68, next_PC:         69
# chosen PC:   68, PC_jump: 0, PC_branch: 0, intialize PC: 0
# p.F/D F instruction: 00000000000000000000000000000000
# DECODE STAGE
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# readAReg:  0, readBReg:  0, writeReg:  0
# EXECUTE STAGE
# DX_X_readA:          0, DX_X_readB:          0
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, real aluop: 00000, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
#  p.readAmemWrite: 0, p.readBmemWrite: 0, p.Amemequal: 1, p.Bmemequal: 1
# p.readAwbWrite: 0, p.readBwbWrite: 0, p.Awbequal: 1, p.Bwbequal: 1
# multdiv_status: 0, toggle_multdiv_status: 0, just_started: 0, multdiv_ready: 0, multdiv_ready,p.start_mul 0, p.start_div 0, p.my_multdiv.count 31
# data_operandA:           0, data_operandB:           0
# X_alu_result:          0, X_multdiv_result:          0
# ot equal: 0, less than: 0
# MEMORY STAGE
# XM_M_op:           0, XM_M_readB:           0
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# dmem_address    0, dmem_data_in:           0 or 00000000000000000000000000000000, dmem_we: 0, dmem_out: 00000000000000001011010100000100, M_bex_taken: 0, curr rstatus:          2, next rstatus:         15
# WRITEBACK STAGE
# MW_W_op:           0, MW_W_data: 00000000000000001011010100000100
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# reg_we: 0, write reg:  0, data           0
# register[1]:           4
# register[2]:           8
# register[3]:          24
# register[4]:          16
# register[5]:           0
# register[6]:           8
# register[7]:          64
# register[8]:           4
# register[9]:           0
# register[10]:         -10
# register[11]:         -11
# register[12]:          12
# register[13]:          12
# register[14]:           0
# register[15]:           0
# register[16]:           0
# register[17]:           0
# register[18]:           0
# register[19]:           0
# register[20]:        2047
# register[21]:           0
# register[22]:           0
# register[23]:           0
# register[24]:           0
# register[25]:           0
# register[26]:           0
# register[27]:           0
# register[28]:           0
# register[29]:           0
# register[30]:           2
# register[31]:          11
#  p.PC_we 1,p.FD_we 1,p.DX_we 1,p.XM_we 1,p.MW_we 1
# <<<NEGEDGE>>>
# FETCH STAGE
# curr_PC,         69, next_PC:         70
# chosen PC:   69, PC_jump: 0, PC_branch: 0, intialize PC: 0
# p.F/D F instruction: 00000000000000000000000000000000
# DECODE STAGE
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# readAReg:  0, readBReg:  0, writeReg:  0
# EXECUTE STAGE
# DX_X_readA:          0, DX_X_readB:          0
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, real aluop: 00000, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
#  p.readAmemWrite: 0, p.readBmemWrite: 0, p.Amemequal: 1, p.Bmemequal: 1
# p.readAwbWrite: 0, p.readBwbWrite: 0, p.Awbequal: 1, p.Bwbequal: 1
# multdiv_status: 0, toggle_multdiv_status: 0, just_started: 0, multdiv_ready: 0, multdiv_ready,p.start_mul 0, p.start_div 0, p.my_multdiv.count 31
# data_operandA:           0, data_operandB:           0
# X_alu_result:          0, X_multdiv_result:          0
# ot equal: 0, less than: 0
# MEMORY STAGE
# XM_M_op:           0, XM_M_readB:           0
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# dmem_address    0, dmem_data_in:           0 or 00000000000000000000000000000000, dmem_we: 0, dmem_out: 00000000000000001011010100000100, M_bex_taken: 0, curr rstatus:          2, next rstatus:         15
# WRITEBACK STAGE
# MW_W_op:           0, MW_W_data: 00000000000000001011010100000100
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# reg_we: 0, write reg:  0, data           0
# register[1]:           4
# register[2]:           8
# register[3]:          24
# register[4]:          16
# register[5]:           0
# register[6]:           8
# register[7]:          64
# register[8]:           4
# register[9]:           0
# register[10]:         -10
# register[11]:         -11
# register[12]:          12
# register[13]:          12
# register[14]:           0
# register[15]:           0
# register[16]:           0
# register[17]:           0
# register[18]:           0
# register[19]:           0
# register[20]:        2047
# register[21]:           0
# register[22]:           0
# register[23]:           0
# register[24]:           0
# register[25]:           0
# register[26]:           0
# register[27]:           0
# register[28]:           0
# register[29]:           0
# register[30]:           2
# register[31]:          11
#  p.PC_we 1,p.FD_we 1,p.DX_we 1,p.XM_we 1,p.MW_we 1
# <<<NEGEDGE>>>
# FETCH STAGE
# curr_PC,         70, next_PC:         71
# chosen PC:   70, PC_jump: 0, PC_branch: 0, intialize PC: 0
# p.F/D F instruction: 00000000000000000000000000000000
# DECODE STAGE
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# readAReg:  0, readBReg:  0, writeReg:  0
# EXECUTE STAGE
# DX_X_readA:          0, DX_X_readB:          0
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, real aluop: 00000, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
#  p.readAmemWrite: 0, p.readBmemWrite: 0, p.Amemequal: 1, p.Bmemequal: 1
# p.readAwbWrite: 0, p.readBwbWrite: 0, p.Awbequal: 1, p.Bwbequal: 1
# multdiv_status: 0, toggle_multdiv_status: 0, just_started: 0, multdiv_ready: 0, multdiv_ready,p.start_mul 0, p.start_div 0, p.my_multdiv.count 31
# data_operandA:           0, data_operandB:           0
# X_alu_result:          0, X_multdiv_result:          0
# ot equal: 0, less than: 0
# MEMORY STAGE
# XM_M_op:           0, XM_M_readB:           0
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# dmem_address    0, dmem_data_in:           0 or 00000000000000000000000000000000, dmem_we: 0, dmem_out: 00000000000000001011010100000100, M_bex_taken: 0, curr rstatus:          2, next rstatus:         15
# WRITEBACK STAGE
# MW_W_op:           0, MW_W_data: 00000000000000001011010100000100
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# reg_we: 0, write reg:  0, data           0
# register[1]:           4
# register[2]:           8
# register[3]:          24
# register[4]:          16
# register[5]:           0
# register[6]:           8
# register[7]:          64
# register[8]:           4
# register[9]:           0
# register[10]:         -10
# register[11]:         -11
# register[12]:          12
# register[13]:          12
# register[14]:           0
# register[15]:           0
# register[16]:           0
# register[17]:           0
# register[18]:           0
# register[19]:           0
# register[20]:        2047
# register[21]:           0
# register[22]:           0
# register[23]:           0
# register[24]:           0
# register[25]:           0
# register[26]:           0
# register[27]:           0
# register[28]:           0
# register[29]:           0
# register[30]:           2
# register[31]:          11
#  p.PC_we 1,p.FD_we 1,p.DX_we 1,p.XM_we 1,p.MW_we 1
# <<<NEGEDGE>>>
# FETCH STAGE
# curr_PC,         71, next_PC:         72
# chosen PC:   71, PC_jump: 0, PC_branch: 0, intialize PC: 0
# p.F/D F instruction: 00000000000000000000000000000000
# DECODE STAGE
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# readAReg:  0, readBReg:  0, writeReg:  0
# EXECUTE STAGE
# DX_X_readA:          0, DX_X_readB:          0
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, real aluop: 00000, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
#  p.readAmemWrite: 0, p.readBmemWrite: 0, p.Amemequal: 1, p.Bmemequal: 1
# p.readAwbWrite: 0, p.readBwbWrite: 0, p.Awbequal: 1, p.Bwbequal: 1
# multdiv_status: 0, toggle_multdiv_status: 0, just_started: 0, multdiv_ready: 0, multdiv_ready,p.start_mul 0, p.start_div 0, p.my_multdiv.count 31
# data_operandA:           0, data_operandB:           0
# X_alu_result:          0, X_multdiv_result:          0
# ot equal: 0, less than: 0
# MEMORY STAGE
# XM_M_op:           0, XM_M_readB:           0
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# dmem_address    0, dmem_data_in:           0 or 00000000000000000000000000000000, dmem_we: 0, dmem_out: 00000000000000001011010100000100, M_bex_taken: 0, curr rstatus:          2, next rstatus:         15
# WRITEBACK STAGE
# MW_W_op:           0, MW_W_data: 00000000000000001011010100000100
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# reg_we: 0, write reg:  0, data           0
# register[1]:           4
# register[2]:           8
# register[3]:          24
# register[4]:          16
# register[5]:           0
# register[6]:           8
# register[7]:          64
# register[8]:           4
# register[9]:           0
# register[10]:         -10
# register[11]:         -11
# register[12]:          12
# register[13]:          12
# register[14]:           0
# register[15]:           0
# register[16]:           0
# register[17]:           0
# register[18]:           0
# register[19]:           0
# register[20]:        2047
# register[21]:           0
# register[22]:           0
# register[23]:           0
# register[24]:           0
# register[25]:           0
# register[26]:           0
# register[27]:           0
# register[28]:           0
# register[29]:           0
# register[30]:           2
# register[31]:          11
#  p.PC_we 1,p.FD_we 1,p.DX_we 1,p.XM_we 1,p.MW_we 1
# <<<NEGEDGE>>>
# FETCH STAGE
# curr_PC,         72, next_PC:         73
# chosen PC:   72, PC_jump: 0, PC_branch: 0, intialize PC: 0
# p.F/D F instruction: 00000000000000000000000000000000
# DECODE STAGE
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# readAReg:  0, readBReg:  0, writeReg:  0
# EXECUTE STAGE
# DX_X_readA:          0, DX_X_readB:          0
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, real aluop: 00000, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
#  p.readAmemWrite: 0, p.readBmemWrite: 0, p.Amemequal: 1, p.Bmemequal: 1
# p.readAwbWrite: 0, p.readBwbWrite: 0, p.Awbequal: 1, p.Bwbequal: 1
# multdiv_status: 0, toggle_multdiv_status: 0, just_started: 0, multdiv_ready: 0, multdiv_ready,p.start_mul 0, p.start_div 0, p.my_multdiv.count 31
# data_operandA:           0, data_operandB:           0
# X_alu_result:          0, X_multdiv_result:          0
# ot equal: 0, less than: 0
# MEMORY STAGE
# XM_M_op:           0, XM_M_readB:           0
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# dmem_address    0, dmem_data_in:           0 or 00000000000000000000000000000000, dmem_we: 0, dmem_out: 00000000000000001011010100000100, M_bex_taken: 0, curr rstatus:          2, next rstatus:         15
# WRITEBACK STAGE
# MW_W_op:           0, MW_W_data: 00000000000000001011010100000100
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# reg_we: 0, write reg:  0, data           0
# register[1]:           4
# register[2]:           8
# register[3]:          24
# register[4]:          16
# register[5]:           0
# register[6]:           8
# register[7]:          64
# register[8]:           4
# register[9]:           0
# register[10]:         -10
# register[11]:         -11
# register[12]:          12
# register[13]:          12
# register[14]:           0
# register[15]:           0
# register[16]:           0
# register[17]:           0
# register[18]:           0
# register[19]:           0
# register[20]:        2047
# register[21]:           0
# register[22]:           0
# register[23]:           0
# register[24]:           0
# register[25]:           0
# register[26]:           0
# register[27]:           0
# register[28]:           0
# register[29]:           0
# register[30]:           2
# register[31]:          11
#  p.PC_we 1,p.FD_we 1,p.DX_we 1,p.XM_we 1,p.MW_we 1
# <<<NEGEDGE>>>
# FETCH STAGE
# curr_PC,         73, next_PC:         74
# chosen PC:   73, PC_jump: 0, PC_branch: 0, intialize PC: 0
# p.F/D F instruction: 00000000000000000000000000000000
# DECODE STAGE
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# readAReg:  0, readBReg:  0, writeReg:  0
# EXECUTE STAGE
# DX_X_readA:          0, DX_X_readB:          0
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, real aluop: 00000, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
#  p.readAmemWrite: 0, p.readBmemWrite: 0, p.Amemequal: 1, p.Bmemequal: 1
# p.readAwbWrite: 0, p.readBwbWrite: 0, p.Awbequal: 1, p.Bwbequal: 1
# multdiv_status: 0, toggle_multdiv_status: 0, just_started: 0, multdiv_ready: 0, multdiv_ready,p.start_mul 0, p.start_div 0, p.my_multdiv.count 31
# data_operandA:           0, data_operandB:           0
# X_alu_result:          0, X_multdiv_result:          0
# ot equal: 0, less than: 0
# MEMORY STAGE
# XM_M_op:           0, XM_M_readB:           0
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# dmem_address    0, dmem_data_in:           0 or 00000000000000000000000000000000, dmem_we: 0, dmem_out: 00000000000000001011010100000100, M_bex_taken: 0, curr rstatus:          2, next rstatus:         15
# WRITEBACK STAGE
# MW_W_op:           0, MW_W_data: 00000000000000001011010100000100
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# reg_we: 0, write reg:  0, data           0
# register[1]:           4
# register[2]:           8
# register[3]:          24
# register[4]:          16
# register[5]:           0
# register[6]:           8
# register[7]:          64
# register[8]:           4
# register[9]:           0
# register[10]:         -10
# register[11]:         -11
# register[12]:          12
# register[13]:          12
# register[14]:           0
# register[15]:           0
# register[16]:           0
# register[17]:           0
# register[18]:           0
# register[19]:           0
# register[20]:        2047
# register[21]:           0
# register[22]:           0
# register[23]:           0
# register[24]:           0
# register[25]:           0
# register[26]:           0
# register[27]:           0
# register[28]:           0
# register[29]:           0
# register[30]:           2
# register[31]:          11
#  p.PC_we 1,p.FD_we 1,p.DX_we 1,p.XM_we 1,p.MW_we 1
# <<<NEGEDGE>>>
# FETCH STAGE
# curr_PC,         74, next_PC:         75
# chosen PC:   74, PC_jump: 0, PC_branch: 0, intialize PC: 0
# p.F/D F instruction: 00000000000000000000000000000000
# DECODE STAGE
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# readAReg:  0, readBReg:  0, writeReg:  0
# EXECUTE STAGE
# DX_X_readA:          0, DX_X_readB:          0
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, real aluop: 00000, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
#  p.readAmemWrite: 0, p.readBmemWrite: 0, p.Amemequal: 1, p.Bmemequal: 1
# p.readAwbWrite: 0, p.readBwbWrite: 0, p.Awbequal: 1, p.Bwbequal: 1
# multdiv_status: 0, toggle_multdiv_status: 0, just_started: 0, multdiv_ready: 0, multdiv_ready,p.start_mul 0, p.start_div 0, p.my_multdiv.count 31
# data_operandA:           0, data_operandB:           0
# X_alu_result:          0, X_multdiv_result:          0
# ot equal: 0, less than: 0
# MEMORY STAGE
# XM_M_op:           0, XM_M_readB:           0
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# dmem_address    0, dmem_data_in:           0 or 00000000000000000000000000000000, dmem_we: 0, dmem_out: 00000000000000001011010100000100, M_bex_taken: 0, curr rstatus:          2, next rstatus:         15
# WRITEBACK STAGE
# MW_W_op:           0, MW_W_data: 00000000000000001011010100000100
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# reg_we: 0, write reg:  0, data           0
# register[1]:           4
# register[2]:           8
# register[3]:          24
# register[4]:          16
# register[5]:           0
# register[6]:           8
# register[7]:          64
# register[8]:           4
# register[9]:           0
# register[10]:         -10
# register[11]:         -11
# register[12]:          12
# register[13]:          12
# register[14]:           0
# register[15]:           0
# register[16]:           0
# register[17]:           0
# register[18]:           0
# register[19]:           0
# register[20]:        2047
# register[21]:           0
# register[22]:           0
# register[23]:           0
# register[24]:           0
# register[25]:           0
# register[26]:           0
# register[27]:           0
# register[28]:           0
# register[29]:           0
# register[30]:           2
# register[31]:          11
#  p.PC_we 1,p.FD_we 1,p.DX_we 1,p.XM_we 1,p.MW_we 1
# <<<NEGEDGE>>>
# FETCH STAGE
# curr_PC,         75, next_PC:         76
# chosen PC:   75, PC_jump: 0, PC_branch: 0, intialize PC: 0
# p.F/D F instruction: 00000000000000000000000000000000
# DECODE STAGE
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# readAReg:  0, readBReg:  0, writeReg:  0
# EXECUTE STAGE
# DX_X_readA:          0, DX_X_readB:          0
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, real aluop: 00000, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
#  p.readAmemWrite: 0, p.readBmemWrite: 0, p.Amemequal: 1, p.Bmemequal: 1
# p.readAwbWrite: 0, p.readBwbWrite: 0, p.Awbequal: 1, p.Bwbequal: 1
# multdiv_status: 0, toggle_multdiv_status: 0, just_started: 0, multdiv_ready: 0, multdiv_ready,p.start_mul 0, p.start_div 0, p.my_multdiv.count 31
# data_operandA:           0, data_operandB:           0
# X_alu_result:          0, X_multdiv_result:          0
# ot equal: 0, less than: 0
# MEMORY STAGE
# XM_M_op:           0, XM_M_readB:           0
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# dmem_address    0, dmem_data_in:           0 or 00000000000000000000000000000000, dmem_we: 0, dmem_out: 00000000000000001011010100000100, M_bex_taken: 0, curr rstatus:          2, next rstatus:         15
# WRITEBACK STAGE
# MW_W_op:           0, MW_W_data: 00000000000000001011010100000100
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# reg_we: 0, write reg:  0, data           0
# register[1]:           4
# register[2]:           8
# register[3]:          24
# register[4]:          16
# register[5]:           0
# register[6]:           8
# register[7]:          64
# register[8]:           4
# register[9]:           0
# register[10]:         -10
# register[11]:         -11
# register[12]:          12
# register[13]:          12
# register[14]:           0
# register[15]:           0
# register[16]:           0
# register[17]:           0
# register[18]:           0
# register[19]:           0
# register[20]:        2047
# register[21]:           0
# register[22]:           0
# register[23]:           0
# register[24]:           0
# register[25]:           0
# register[26]:           0
# register[27]:           0
# register[28]:           0
# register[29]:           0
# register[30]:           2
# register[31]:          11
#  p.PC_we 1,p.FD_we 1,p.DX_we 1,p.XM_we 1,p.MW_we 1
# <<<NEGEDGE>>>
# FETCH STAGE
# curr_PC,         76, next_PC:         77
# chosen PC:   76, PC_jump: 0, PC_branch: 0, intialize PC: 0
# p.F/D F instruction: 00000000000000000000000000000000
# DECODE STAGE
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# readAReg:  0, readBReg:  0, writeReg:  0
# EXECUTE STAGE
# DX_X_readA:          0, DX_X_readB:          0
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, real aluop: 00000, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
#  p.readAmemWrite: 0, p.readBmemWrite: 0, p.Amemequal: 1, p.Bmemequal: 1
# p.readAwbWrite: 0, p.readBwbWrite: 0, p.Awbequal: 1, p.Bwbequal: 1
# multdiv_status: 0, toggle_multdiv_status: 0, just_started: 0, multdiv_ready: 0, multdiv_ready,p.start_mul 0, p.start_div 0, p.my_multdiv.count 31
# data_operandA:           0, data_operandB:           0
# X_alu_result:          0, X_multdiv_result:          0
# ot equal: 0, less than: 0
# MEMORY STAGE
# XM_M_op:           0, XM_M_readB:           0
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# dmem_address    0, dmem_data_in:           0 or 00000000000000000000000000000000, dmem_we: 0, dmem_out: 00000000000000001011010100000100, M_bex_taken: 0, curr rstatus:          2, next rstatus:         15
# WRITEBACK STAGE
# MW_W_op:           0, MW_W_data: 00000000000000001011010100000100
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# reg_we: 0, write reg:  0, data           0
# register[1]:           4
# register[2]:           8
# register[3]:          24
# register[4]:          16
# register[5]:           0
# register[6]:           8
# register[7]:          64
# register[8]:           4
# register[9]:           0
# register[10]:         -10
# register[11]:         -11
# register[12]:          12
# register[13]:          12
# register[14]:           0
# register[15]:           0
# register[16]:           0
# register[17]:           0
# register[18]:           0
# register[19]:           0
# register[20]:        2047
# register[21]:           0
# register[22]:           0
# register[23]:           0
# register[24]:           0
# register[25]:           0
# register[26]:           0
# register[27]:           0
# register[28]:           0
# register[29]:           0
# register[30]:           2
# register[31]:          11
#  p.PC_we 1,p.FD_we 1,p.DX_we 1,p.XM_we 1,p.MW_we 1
# <<<NEGEDGE>>>
# FETCH STAGE
# curr_PC,         77, next_PC:         78
# chosen PC:   77, PC_jump: 0, PC_branch: 0, intialize PC: 0
# p.F/D F instruction: 00000000000000000000000000000000
# DECODE STAGE
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# readAReg:  0, readBReg:  0, writeReg:  0
# EXECUTE STAGE
# DX_X_readA:          0, DX_X_readB:          0
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, real aluop: 00000, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
#  p.readAmemWrite: 0, p.readBmemWrite: 0, p.Amemequal: 1, p.Bmemequal: 1
# p.readAwbWrite: 0, p.readBwbWrite: 0, p.Awbequal: 1, p.Bwbequal: 1
# multdiv_status: 0, toggle_multdiv_status: 0, just_started: 0, multdiv_ready: 0, multdiv_ready,p.start_mul 0, p.start_div 0, p.my_multdiv.count 31
# data_operandA:           0, data_operandB:           0
# X_alu_result:          0, X_multdiv_result:          0
# ot equal: 0, less than: 0
# MEMORY STAGE
# XM_M_op:           0, XM_M_readB:           0
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# dmem_address    0, dmem_data_in:           0 or 00000000000000000000000000000000, dmem_we: 0, dmem_out: 00000000000000001011010100000100, M_bex_taken: 0, curr rstatus:          2, next rstatus:         15
# WRITEBACK STAGE
# MW_W_op:           0, MW_W_data: 00000000000000001011010100000100
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# reg_we: 0, write reg:  0, data           0
# register[1]:           4
# register[2]:           8
# register[3]:          24
# register[4]:          16
# register[5]:           0
# register[6]:           8
# register[7]:          64
# register[8]:           4
# register[9]:           0
# register[10]:         -10
# register[11]:         -11
# register[12]:          12
# register[13]:          12
# register[14]:           0
# register[15]:           0
# register[16]:           0
# register[17]:           0
# register[18]:           0
# register[19]:           0
# register[20]:        2047
# register[21]:           0
# register[22]:           0
# register[23]:           0
# register[24]:           0
# register[25]:           0
# register[26]:           0
# register[27]:           0
# register[28]:           0
# register[29]:           0
# register[30]:           2
# register[31]:          11
#  p.PC_we 1,p.FD_we 1,p.DX_we 1,p.XM_we 1,p.MW_we 1
# <<<NEGEDGE>>>
# FETCH STAGE
# curr_PC,         78, next_PC:         79
# chosen PC:   78, PC_jump: 0, PC_branch: 0, intialize PC: 0
# p.F/D F instruction: 00000000000000000000000000000000
# DECODE STAGE
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# readAReg:  0, readBReg:  0, writeReg:  0
# EXECUTE STAGE
# DX_X_readA:          0, DX_X_readB:          0
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, real aluop: 00000, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
#  p.readAmemWrite: 0, p.readBmemWrite: 0, p.Amemequal: 1, p.Bmemequal: 1
# p.readAwbWrite: 0, p.readBwbWrite: 0, p.Awbequal: 1, p.Bwbequal: 1
# multdiv_status: 0, toggle_multdiv_status: 0, just_started: 0, multdiv_ready: 0, multdiv_ready,p.start_mul 0, p.start_div 0, p.my_multdiv.count 31
# data_operandA:           0, data_operandB:           0
# X_alu_result:          0, X_multdiv_result:          0
# ot equal: 0, less than: 0
# MEMORY STAGE
# XM_M_op:           0, XM_M_readB:           0
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# dmem_address    0, dmem_data_in:           0 or 00000000000000000000000000000000, dmem_we: 0, dmem_out: 00000000000000001011010100000100, M_bex_taken: 0, curr rstatus:          2, next rstatus:         15
# WRITEBACK STAGE
# MW_W_op:           0, MW_W_data: 00000000000000001011010100000100
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# reg_we: 0, write reg:  0, data           0
# register[1]:           4
# register[2]:           8
# register[3]:          24
# register[4]:          16
# register[5]:           0
# register[6]:           8
# register[7]:          64
# register[8]:           4
# register[9]:           0
# register[10]:         -10
# register[11]:         -11
# register[12]:          12
# register[13]:          12
# register[14]:           0
# register[15]:           0
# register[16]:           0
# register[17]:           0
# register[18]:           0
# register[19]:           0
# register[20]:        2047
# register[21]:           0
# register[22]:           0
# register[23]:           0
# register[24]:           0
# register[25]:           0
# register[26]:           0
# register[27]:           0
# register[28]:           0
# register[29]:           0
# register[30]:           2
# register[31]:          11
#  p.PC_we 1,p.FD_we 1,p.DX_we 1,p.XM_we 1,p.MW_we 1
# <<<NEGEDGE>>>
# FETCH STAGE
# curr_PC,         79, next_PC:         80
# chosen PC:   79, PC_jump: 0, PC_branch: 0, intialize PC: 0
# p.F/D F instruction: 00000000000000000000000000000000
# DECODE STAGE
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# readAReg:  0, readBReg:  0, writeReg:  0
# EXECUTE STAGE
# DX_X_readA:          0, DX_X_readB:          0
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, real aluop: 00000, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
#  p.readAmemWrite: 0, p.readBmemWrite: 0, p.Amemequal: 1, p.Bmemequal: 1
# p.readAwbWrite: 0, p.readBwbWrite: 0, p.Awbequal: 1, p.Bwbequal: 1
# multdiv_status: 0, toggle_multdiv_status: 0, just_started: 0, multdiv_ready: 0, multdiv_ready,p.start_mul 0, p.start_div 0, p.my_multdiv.count 31
# data_operandA:           0, data_operandB:           0
# X_alu_result:          0, X_multdiv_result:          0
# ot equal: 0, less than: 0
# MEMORY STAGE
# XM_M_op:           0, XM_M_readB:           0
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# dmem_address    0, dmem_data_in:           0 or 00000000000000000000000000000000, dmem_we: 0, dmem_out: 00000000000000001011010100000100, M_bex_taken: 0, curr rstatus:          2, next rstatus:         15
# WRITEBACK STAGE
# MW_W_op:           0, MW_W_data: 00000000000000001011010100000100
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# reg_we: 0, write reg:  0, data           0
# register[1]:           4
# register[2]:           8
# register[3]:          24
# register[4]:          16
# register[5]:           0
# register[6]:           8
# register[7]:          64
# register[8]:           4
# register[9]:           0
# register[10]:         -10
# register[11]:         -11
# register[12]:          12
# register[13]:          12
# register[14]:           0
# register[15]:           0
# register[16]:           0
# register[17]:           0
# register[18]:           0
# register[19]:           0
# register[20]:        2047
# register[21]:           0
# register[22]:           0
# register[23]:           0
# register[24]:           0
# register[25]:           0
# register[26]:           0
# register[27]:           0
# register[28]:           0
# register[29]:           0
# register[30]:           2
# register[31]:          11
#  p.PC_we 1,p.FD_we 1,p.DX_we 1,p.XM_we 1,p.MW_we 1
# <<<NEGEDGE>>>
# FETCH STAGE
# curr_PC,         80, next_PC:         81
# chosen PC:   80, PC_jump: 0, PC_branch: 0, intialize PC: 0
# p.F/D F instruction: 00000000000000000000000000000000
# DECODE STAGE
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# readAReg:  0, readBReg:  0, writeReg:  0
# EXECUTE STAGE
# DX_X_readA:          0, DX_X_readB:          0
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, real aluop: 00000, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
#  p.readAmemWrite: 0, p.readBmemWrite: 0, p.Amemequal: 1, p.Bmemequal: 1
# p.readAwbWrite: 0, p.readBwbWrite: 0, p.Awbequal: 1, p.Bwbequal: 1
# multdiv_status: 0, toggle_multdiv_status: 0, just_started: 0, multdiv_ready: 0, multdiv_ready,p.start_mul 0, p.start_div 0, p.my_multdiv.count 31
# data_operandA:           0, data_operandB:           0
# X_alu_result:          0, X_multdiv_result:          0
# ot equal: 0, less than: 0
# MEMORY STAGE
# XM_M_op:           0, XM_M_readB:           0
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# dmem_address    0, dmem_data_in:           0 or 00000000000000000000000000000000, dmem_we: 0, dmem_out: 00000000000000001011010100000100, M_bex_taken: 0, curr rstatus:          2, next rstatus:         15
# WRITEBACK STAGE
# MW_W_op:           0, MW_W_data: 00000000000000001011010100000100
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# reg_we: 0, write reg:  0, data           0
# register[1]:           4
# register[2]:           8
# register[3]:          24
# register[4]:          16
# register[5]:           0
# register[6]:           8
# register[7]:          64
# register[8]:           4
# register[9]:           0
# register[10]:         -10
# register[11]:         -11
# register[12]:          12
# register[13]:          12
# register[14]:           0
# register[15]:           0
# register[16]:           0
# register[17]:           0
# register[18]:           0
# register[19]:           0
# register[20]:        2047
# register[21]:           0
# register[22]:           0
# register[23]:           0
# register[24]:           0
# register[25]:           0
# register[26]:           0
# register[27]:           0
# register[28]:           0
# register[29]:           0
# register[30]:           2
# register[31]:          11
#  p.PC_we 1,p.FD_we 1,p.DX_we 1,p.XM_we 1,p.MW_we 1
# <<<NEGEDGE>>>
# FETCH STAGE
# curr_PC,         81, next_PC:         82
# chosen PC:   81, PC_jump: 0, PC_branch: 0, intialize PC: 0
# p.F/D F instruction: 00000000000000000000000000000000
# DECODE STAGE
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# readAReg:  0, readBReg:  0, writeReg:  0
# EXECUTE STAGE
# DX_X_readA:          0, DX_X_readB:          0
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, real aluop: 00000, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
#  p.readAmemWrite: 0, p.readBmemWrite: 0, p.Amemequal: 1, p.Bmemequal: 1
# p.readAwbWrite: 0, p.readBwbWrite: 0, p.Awbequal: 1, p.Bwbequal: 1
# multdiv_status: 0, toggle_multdiv_status: 0, just_started: 0, multdiv_ready: 0, multdiv_ready,p.start_mul 0, p.start_div 0, p.my_multdiv.count 31
# data_operandA:           0, data_operandB:           0
# X_alu_result:          0, X_multdiv_result:          0
# ot equal: 0, less than: 0
# MEMORY STAGE
# XM_M_op:           0, XM_M_readB:           0
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# dmem_address    0, dmem_data_in:           0 or 00000000000000000000000000000000, dmem_we: 0, dmem_out: 00000000000000001011010100000100, M_bex_taken: 0, curr rstatus:          2, next rstatus:         15
# WRITEBACK STAGE
# MW_W_op:           0, MW_W_data: 00000000000000001011010100000100
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# reg_we: 0, write reg:  0, data           0
# register[1]:           4
# register[2]:           8
# register[3]:          24
# register[4]:          16
# register[5]:           0
# register[6]:           8
# register[7]:          64
# register[8]:           4
# register[9]:           0
# register[10]:         -10
# register[11]:         -11
# register[12]:          12
# register[13]:          12
# register[14]:           0
# register[15]:           0
# register[16]:           0
# register[17]:           0
# register[18]:           0
# register[19]:           0
# register[20]:        2047
# register[21]:           0
# register[22]:           0
# register[23]:           0
# register[24]:           0
# register[25]:           0
# register[26]:           0
# register[27]:           0
# register[28]:           0
# register[29]:           0
# register[30]:           2
# register[31]:          11
#  p.PC_we 1,p.FD_we 1,p.DX_we 1,p.XM_we 1,p.MW_we 1
# <<<NEGEDGE>>>
# FETCH STAGE
# curr_PC,         82, next_PC:         83
# chosen PC:   82, PC_jump: 0, PC_branch: 0, intialize PC: 0
# p.F/D F instruction: 00000000000000000000000000000000
# DECODE STAGE
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# readAReg:  0, readBReg:  0, writeReg:  0
# EXECUTE STAGE
# DX_X_readA:          0, DX_X_readB:          0
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, real aluop: 00000, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
#  p.readAmemWrite: 0, p.readBmemWrite: 0, p.Amemequal: 1, p.Bmemequal: 1
# p.readAwbWrite: 0, p.readBwbWrite: 0, p.Awbequal: 1, p.Bwbequal: 1
# multdiv_status: 0, toggle_multdiv_status: 0, just_started: 0, multdiv_ready: 0, multdiv_ready,p.start_mul 0, p.start_div 0, p.my_multdiv.count 31
# data_operandA:           0, data_operandB:           0
# X_alu_result:          0, X_multdiv_result:          0
# ot equal: 0, less than: 0
# MEMORY STAGE
# XM_M_op:           0, XM_M_readB:           0
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# dmem_address    0, dmem_data_in:           0 or 00000000000000000000000000000000, dmem_we: 0, dmem_out: 00000000000000001011010100000100, M_bex_taken: 0, curr rstatus:          2, next rstatus:         15
# WRITEBACK STAGE
# MW_W_op:           0, MW_W_data: 00000000000000001011010100000100
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# reg_we: 0, write reg:  0, data           0
# register[1]:           4
# register[2]:           8
# register[3]:          24
# register[4]:          16
# register[5]:           0
# register[6]:           8
# register[7]:          64
# register[8]:           4
# register[9]:           0
# register[10]:         -10
# register[11]:         -11
# register[12]:          12
# register[13]:          12
# register[14]:           0
# register[15]:           0
# register[16]:           0
# register[17]:           0
# register[18]:           0
# register[19]:           0
# register[20]:        2047
# register[21]:           0
# register[22]:           0
# register[23]:           0
# register[24]:           0
# register[25]:           0
# register[26]:           0
# register[27]:           0
# register[28]:           0
# register[29]:           0
# register[30]:           2
# register[31]:          11
#  p.PC_we 1,p.FD_we 1,p.DX_we 1,p.XM_we 1,p.MW_we 1
# <<<NEGEDGE>>>
# FETCH STAGE
# curr_PC,         83, next_PC:         84
# chosen PC:   83, PC_jump: 0, PC_branch: 0, intialize PC: 0
# p.F/D F instruction: 00000000000000000000000000000000
# DECODE STAGE
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# readAReg:  0, readBReg:  0, writeReg:  0
# EXECUTE STAGE
# DX_X_readA:          0, DX_X_readB:          0
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, real aluop: 00000, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
#  p.readAmemWrite: 0, p.readBmemWrite: 0, p.Amemequal: 1, p.Bmemequal: 1
# p.readAwbWrite: 0, p.readBwbWrite: 0, p.Awbequal: 1, p.Bwbequal: 1
# multdiv_status: 0, toggle_multdiv_status: 0, just_started: 0, multdiv_ready: 0, multdiv_ready,p.start_mul 0, p.start_div 0, p.my_multdiv.count 31
# data_operandA:           0, data_operandB:           0
# X_alu_result:          0, X_multdiv_result:          0
# ot equal: 0, less than: 0
# MEMORY STAGE
# XM_M_op:           0, XM_M_readB:           0
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# dmem_address    0, dmem_data_in:           0 or 00000000000000000000000000000000, dmem_we: 0, dmem_out: 00000000000000001011010100000100, M_bex_taken: 0, curr rstatus:          2, next rstatus:         15
# WRITEBACK STAGE
# MW_W_op:           0, MW_W_data: 00000000000000001011010100000100
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# reg_we: 0, write reg:  0, data           0
# register[1]:           4
# register[2]:           8
# register[3]:          24
# register[4]:          16
# register[5]:           0
# register[6]:           8
# register[7]:          64
# register[8]:           4
# register[9]:           0
# register[10]:         -10
# register[11]:         -11
# register[12]:          12
# register[13]:          12
# register[14]:           0
# register[15]:           0
# register[16]:           0
# register[17]:           0
# register[18]:           0
# register[19]:           0
# register[20]:        2047
# register[21]:           0
# register[22]:           0
# register[23]:           0
# register[24]:           0
# register[25]:           0
# register[26]:           0
# register[27]:           0
# register[28]:           0
# register[29]:           0
# register[30]:           2
# register[31]:          11
#  p.PC_we 1,p.FD_we 1,p.DX_we 1,p.XM_we 1,p.MW_we 1
# <<<NEGEDGE>>>
# FETCH STAGE
# curr_PC,         84, next_PC:         85
# chosen PC:   84, PC_jump: 0, PC_branch: 0, intialize PC: 0
# p.F/D F instruction: 00000000000000000000000000000000
# DECODE STAGE
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# readAReg:  0, readBReg:  0, writeReg:  0
# EXECUTE STAGE
# DX_X_readA:          0, DX_X_readB:          0
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, real aluop: 00000, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
#  p.readAmemWrite: 0, p.readBmemWrite: 0, p.Amemequal: 1, p.Bmemequal: 1
# p.readAwbWrite: 0, p.readBwbWrite: 0, p.Awbequal: 1, p.Bwbequal: 1
# multdiv_status: 0, toggle_multdiv_status: 0, just_started: 0, multdiv_ready: 0, multdiv_ready,p.start_mul 0, p.start_div 0, p.my_multdiv.count 31
# data_operandA:           0, data_operandB:           0
# X_alu_result:          0, X_multdiv_result:          0
# ot equal: 0, less than: 0
# MEMORY STAGE
# XM_M_op:           0, XM_M_readB:           0
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# dmem_address    0, dmem_data_in:           0 or 00000000000000000000000000000000, dmem_we: 0, dmem_out: 00000000000000001011010100000100, M_bex_taken: 0, curr rstatus:          2, next rstatus:         15
# WRITEBACK STAGE
# MW_W_op:           0, MW_W_data: 00000000000000001011010100000100
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# reg_we: 0, write reg:  0, data           0
# register[1]:           4
# register[2]:           8
# register[3]:          24
# register[4]:          16
# register[5]:           0
# register[6]:           8
# register[7]:          64
# register[8]:           4
# register[9]:           0
# register[10]:         -10
# register[11]:         -11
# register[12]:          12
# register[13]:          12
# register[14]:           0
# register[15]:           0
# register[16]:           0
# register[17]:           0
# register[18]:           0
# register[19]:           0
# register[20]:        2047
# register[21]:           0
# register[22]:           0
# register[23]:           0
# register[24]:           0
# register[25]:           0
# register[26]:           0
# register[27]:           0
# register[28]:           0
# register[29]:           0
# register[30]:           2
# register[31]:          11
#  p.PC_we 1,p.FD_we 1,p.DX_we 1,p.XM_we 1,p.MW_we 1
# <<<NEGEDGE>>>
# FETCH STAGE
# curr_PC,         85, next_PC:         86
# chosen PC:   85, PC_jump: 0, PC_branch: 0, intialize PC: 0
# p.F/D F instruction: 00000000000000000000000000000000
# DECODE STAGE
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# readAReg:  0, readBReg:  0, writeReg:  0
# EXECUTE STAGE
# DX_X_readA:          0, DX_X_readB:          0
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, real aluop: 00000, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
#  p.readAmemWrite: 0, p.readBmemWrite: 0, p.Amemequal: 1, p.Bmemequal: 1
# p.readAwbWrite: 0, p.readBwbWrite: 0, p.Awbequal: 1, p.Bwbequal: 1
# multdiv_status: 0, toggle_multdiv_status: 0, just_started: 0, multdiv_ready: 0, multdiv_ready,p.start_mul 0, p.start_div 0, p.my_multdiv.count 31
# data_operandA:           0, data_operandB:           0
# X_alu_result:          0, X_multdiv_result:          0
# ot equal: 0, less than: 0
# MEMORY STAGE
# XM_M_op:           0, XM_M_readB:           0
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# dmem_address    0, dmem_data_in:           0 or 00000000000000000000000000000000, dmem_we: 0, dmem_out: 00000000000000001011010100000100, M_bex_taken: 0, curr rstatus:          2, next rstatus:         15
# WRITEBACK STAGE
# MW_W_op:           0, MW_W_data: 00000000000000001011010100000100
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# reg_we: 0, write reg:  0, data           0
# register[1]:           4
# register[2]:           8
# register[3]:          24
# register[4]:          16
# register[5]:           0
# register[6]:           8
# register[7]:          64
# register[8]:           4
# register[9]:           0
# register[10]:         -10
# register[11]:         -11
# register[12]:          12
# register[13]:          12
# register[14]:           0
# register[15]:           0
# register[16]:           0
# register[17]:           0
# register[18]:           0
# register[19]:           0
# register[20]:        2047
# register[21]:           0
# register[22]:           0
# register[23]:           0
# register[24]:           0
# register[25]:           0
# register[26]:           0
# register[27]:           0
# register[28]:           0
# register[29]:           0
# register[30]:           2
# register[31]:          11
#  p.PC_we 1,p.FD_we 1,p.DX_we 1,p.XM_we 1,p.MW_we 1
# <<<NEGEDGE>>>
# FETCH STAGE
# curr_PC,         86, next_PC:         87
# chosen PC:   86, PC_jump: 0, PC_branch: 0, intialize PC: 0
# p.F/D F instruction: 00000000000000000000000000000000
# DECODE STAGE
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# readAReg:  0, readBReg:  0, writeReg:  0
# EXECUTE STAGE
# DX_X_readA:          0, DX_X_readB:          0
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, real aluop: 00000, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
#  p.readAmemWrite: 0, p.readBmemWrite: 0, p.Amemequal: 1, p.Bmemequal: 1
# p.readAwbWrite: 0, p.readBwbWrite: 0, p.Awbequal: 1, p.Bwbequal: 1
# multdiv_status: 0, toggle_multdiv_status: 0, just_started: 0, multdiv_ready: 0, multdiv_ready,p.start_mul 0, p.start_div 0, p.my_multdiv.count 31
# data_operandA:           0, data_operandB:           0
# X_alu_result:          0, X_multdiv_result:          0
# ot equal: 0, less than: 0
# MEMORY STAGE
# XM_M_op:           0, XM_M_readB:           0
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# dmem_address    0, dmem_data_in:           0 or 00000000000000000000000000000000, dmem_we: 0, dmem_out: 00000000000000001011010100000100, M_bex_taken: 0, curr rstatus:          2, next rstatus:         15
# WRITEBACK STAGE
# MW_W_op:           0, MW_W_data: 00000000000000001011010100000100
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# reg_we: 0, write reg:  0, data           0
# register[1]:           4
# register[2]:           8
# register[3]:          24
# register[4]:          16
# register[5]:           0
# register[6]:           8
# register[7]:          64
# register[8]:           4
# register[9]:           0
# register[10]:         -10
# register[11]:         -11
# register[12]:          12
# register[13]:          12
# register[14]:           0
# register[15]:           0
# register[16]:           0
# register[17]:           0
# register[18]:           0
# register[19]:           0
# register[20]:        2047
# register[21]:           0
# register[22]:           0
# register[23]:           0
# register[24]:           0
# register[25]:           0
# register[26]:           0
# register[27]:           0
# register[28]:           0
# register[29]:           0
# register[30]:           2
# register[31]:          11
#  p.PC_we 1,p.FD_we 1,p.DX_we 1,p.XM_we 1,p.MW_we 1
# <<<NEGEDGE>>>
# FETCH STAGE
# curr_PC,         87, next_PC:         88
# chosen PC:   87, PC_jump: 0, PC_branch: 0, intialize PC: 0
# p.F/D F instruction: 00000000000000000000000000000000
# DECODE STAGE
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# readAReg:  0, readBReg:  0, writeReg:  0
# EXECUTE STAGE
# DX_X_readA:          0, DX_X_readB:          0
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, real aluop: 00000, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
#  p.readAmemWrite: 0, p.readBmemWrite: 0, p.Amemequal: 1, p.Bmemequal: 1
# p.readAwbWrite: 0, p.readBwbWrite: 0, p.Awbequal: 1, p.Bwbequal: 1
# multdiv_status: 0, toggle_multdiv_status: 0, just_started: 0, multdiv_ready: 0, multdiv_ready,p.start_mul 0, p.start_div 0, p.my_multdiv.count 31
# data_operandA:           0, data_operandB:           0
# X_alu_result:          0, X_multdiv_result:          0
# ot equal: 0, less than: 0
# MEMORY STAGE
# XM_M_op:           0, XM_M_readB:           0
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# dmem_address    0, dmem_data_in:           0 or 00000000000000000000000000000000, dmem_we: 0, dmem_out: 00000000000000001011010100000100, M_bex_taken: 0, curr rstatus:          2, next rstatus:         15
# WRITEBACK STAGE
# MW_W_op:           0, MW_W_data: 00000000000000001011010100000100
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# reg_we: 0, write reg:  0, data           0
# register[1]:           4
# register[2]:           8
# register[3]:          24
# register[4]:          16
# register[5]:           0
# register[6]:           8
# register[7]:          64
# register[8]:           4
# register[9]:           0
# register[10]:         -10
# register[11]:         -11
# register[12]:          12
# register[13]:          12
# register[14]:           0
# register[15]:           0
# register[16]:           0
# register[17]:           0
# register[18]:           0
# register[19]:           0
# register[20]:        2047
# register[21]:           0
# register[22]:           0
# register[23]:           0
# register[24]:           0
# register[25]:           0
# register[26]:           0
# register[27]:           0
# register[28]:           0
# register[29]:           0
# register[30]:           2
# register[31]:          11
#  p.PC_we 1,p.FD_we 1,p.DX_we 1,p.XM_we 1,p.MW_we 1
# <<<NEGEDGE>>>
# FETCH STAGE
# curr_PC,         88, next_PC:         89
# chosen PC:   88, PC_jump: 0, PC_branch: 0, intialize PC: 0
# p.F/D F instruction: 00000000000000000000000000000000
# DECODE STAGE
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# readAReg:  0, readBReg:  0, writeReg:  0
# EXECUTE STAGE
# DX_X_readA:          0, DX_X_readB:          0
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, real aluop: 00000, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
#  p.readAmemWrite: 0, p.readBmemWrite: 0, p.Amemequal: 1, p.Bmemequal: 1
# p.readAwbWrite: 0, p.readBwbWrite: 0, p.Awbequal: 1, p.Bwbequal: 1
# multdiv_status: 0, toggle_multdiv_status: 0, just_started: 0, multdiv_ready: 0, multdiv_ready,p.start_mul 0, p.start_div 0, p.my_multdiv.count 31
# data_operandA:           0, data_operandB:           0
# X_alu_result:          0, X_multdiv_result:          0
# ot equal: 0, less than: 0
# MEMORY STAGE
# XM_M_op:           0, XM_M_readB:           0
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# dmem_address    0, dmem_data_in:           0 or 00000000000000000000000000000000, dmem_we: 0, dmem_out: 00000000000000001011010100000100, M_bex_taken: 0, curr rstatus:          2, next rstatus:         15
# WRITEBACK STAGE
# MW_W_op:           0, MW_W_data: 00000000000000001011010100000100
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# reg_we: 0, write reg:  0, data           0
# register[1]:           4
# register[2]:           8
# register[3]:          24
# register[4]:          16
# register[5]:           0
# register[6]:           8
# register[7]:          64
# register[8]:           4
# register[9]:           0
# register[10]:         -10
# register[11]:         -11
# register[12]:          12
# register[13]:          12
# register[14]:           0
# register[15]:           0
# register[16]:           0
# register[17]:           0
# register[18]:           0
# register[19]:           0
# register[20]:        2047
# register[21]:           0
# register[22]:           0
# register[23]:           0
# register[24]:           0
# register[25]:           0
# register[26]:           0
# register[27]:           0
# register[28]:           0
# register[29]:           0
# register[30]:           2
# register[31]:          11
#  p.PC_we 1,p.FD_we 1,p.DX_we 1,p.XM_we 1,p.MW_we 1
# <<<NEGEDGE>>>
# FETCH STAGE
# curr_PC,         89, next_PC:         90
# chosen PC:   89, PC_jump: 0, PC_branch: 0, intialize PC: 0
# p.F/D F instruction: 00000000000000000000000000000000
# DECODE STAGE
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# readAReg:  0, readBReg:  0, writeReg:  0
# EXECUTE STAGE
# DX_X_readA:          0, DX_X_readB:          0
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, real aluop: 00000, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
#  p.readAmemWrite: 0, p.readBmemWrite: 0, p.Amemequal: 1, p.Bmemequal: 1
# p.readAwbWrite: 0, p.readBwbWrite: 0, p.Awbequal: 1, p.Bwbequal: 1
# multdiv_status: 0, toggle_multdiv_status: 0, just_started: 0, multdiv_ready: 0, multdiv_ready,p.start_mul 0, p.start_div 0, p.my_multdiv.count 31
# data_operandA:           0, data_operandB:           0
# X_alu_result:          0, X_multdiv_result:          0
# ot equal: 0, less than: 0
# MEMORY STAGE
# XM_M_op:           0, XM_M_readB:           0
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# dmem_address    0, dmem_data_in:           0 or 00000000000000000000000000000000, dmem_we: 0, dmem_out: 00000000000000001011010100000100, M_bex_taken: 0, curr rstatus:          2, next rstatus:         15
# WRITEBACK STAGE
# MW_W_op:           0, MW_W_data: 00000000000000001011010100000100
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# reg_we: 0, write reg:  0, data           0
# register[1]:           4
# register[2]:           8
# register[3]:          24
# register[4]:          16
# register[5]:           0
# register[6]:           8
# register[7]:          64
# register[8]:           4
# register[9]:           0
# register[10]:         -10
# register[11]:         -11
# register[12]:          12
# register[13]:          12
# register[14]:           0
# register[15]:           0
# register[16]:           0
# register[17]:           0
# register[18]:           0
# register[19]:           0
# register[20]:        2047
# register[21]:           0
# register[22]:           0
# register[23]:           0
# register[24]:           0
# register[25]:           0
# register[26]:           0
# register[27]:           0
# register[28]:           0
# register[29]:           0
# register[30]:           2
# register[31]:          11
#  p.PC_we 1,p.FD_we 1,p.DX_we 1,p.XM_we 1,p.MW_we 1
# <<<NEGEDGE>>>
# FETCH STAGE
# curr_PC,         90, next_PC:         91
# chosen PC:   90, PC_jump: 0, PC_branch: 0, intialize PC: 0
# p.F/D F instruction: 00000000000000000000000000000000
# DECODE STAGE
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# readAReg:  0, readBReg:  0, writeReg:  0
# EXECUTE STAGE
# DX_X_readA:          0, DX_X_readB:          0
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, real aluop: 00000, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
#  p.readAmemWrite: 0, p.readBmemWrite: 0, p.Amemequal: 1, p.Bmemequal: 1
# p.readAwbWrite: 0, p.readBwbWrite: 0, p.Awbequal: 1, p.Bwbequal: 1
# multdiv_status: 0, toggle_multdiv_status: 0, just_started: 0, multdiv_ready: 0, multdiv_ready,p.start_mul 0, p.start_div 0, p.my_multdiv.count 31
# data_operandA:           0, data_operandB:           0
# X_alu_result:          0, X_multdiv_result:          0
# ot equal: 0, less than: 0
# MEMORY STAGE
# XM_M_op:           0, XM_M_readB:           0
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# dmem_address    0, dmem_data_in:           0 or 00000000000000000000000000000000, dmem_we: 0, dmem_out: 00000000000000001011010100000100, M_bex_taken: 0, curr rstatus:          2, next rstatus:         15
# WRITEBACK STAGE
# MW_W_op:           0, MW_W_data: 00000000000000001011010100000100
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# reg_we: 0, write reg:  0, data           0
# register[1]:           4
# register[2]:           8
# register[3]:          24
# register[4]:          16
# register[5]:           0
# register[6]:           8
# register[7]:          64
# register[8]:           4
# register[9]:           0
# register[10]:         -10
# register[11]:         -11
# register[12]:          12
# register[13]:          12
# register[14]:           0
# register[15]:           0
# register[16]:           0
# register[17]:           0
# register[18]:           0
# register[19]:           0
# register[20]:        2047
# register[21]:           0
# register[22]:           0
# register[23]:           0
# register[24]:           0
# register[25]:           0
# register[26]:           0
# register[27]:           0
# register[28]:           0
# register[29]:           0
# register[30]:           2
# register[31]:          11
#  p.PC_we 1,p.FD_we 1,p.DX_we 1,p.XM_we 1,p.MW_we 1
# <<<NEGEDGE>>>
# FETCH STAGE
# curr_PC,         91, next_PC:         92
# chosen PC:   91, PC_jump: 0, PC_branch: 0, intialize PC: 0
# p.F/D F instruction: 00000000000000000000000000000000
# DECODE STAGE
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# readAReg:  0, readBReg:  0, writeReg:  0
# EXECUTE STAGE
# DX_X_readA:          0, DX_X_readB:          0
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, real aluop: 00000, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
#  p.readAmemWrite: 0, p.readBmemWrite: 0, p.Amemequal: 1, p.Bmemequal: 1
# p.readAwbWrite: 0, p.readBwbWrite: 0, p.Awbequal: 1, p.Bwbequal: 1
# multdiv_status: 0, toggle_multdiv_status: 0, just_started: 0, multdiv_ready: 0, multdiv_ready,p.start_mul 0, p.start_div 0, p.my_multdiv.count 31
# data_operandA:           0, data_operandB:           0
# X_alu_result:          0, X_multdiv_result:          0
# ot equal: 0, less than: 0
# MEMORY STAGE
# XM_M_op:           0, XM_M_readB:           0
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# dmem_address    0, dmem_data_in:           0 or 00000000000000000000000000000000, dmem_we: 0, dmem_out: 00000000000000001011010100000100, M_bex_taken: 0, curr rstatus:          2, next rstatus:         15
# WRITEBACK STAGE
# MW_W_op:           0, MW_W_data: 00000000000000001011010100000100
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# reg_we: 0, write reg:  0, data           0
# register[1]:           4
# register[2]:           8
# register[3]:          24
# register[4]:          16
# register[5]:           0
# register[6]:           8
# register[7]:          64
# register[8]:           4
# register[9]:           0
# register[10]:         -10
# register[11]:         -11
# register[12]:          12
# register[13]:          12
# register[14]:           0
# register[15]:           0
# register[16]:           0
# register[17]:           0
# register[18]:           0
# register[19]:           0
# register[20]:        2047
# register[21]:           0
# register[22]:           0
# register[23]:           0
# register[24]:           0
# register[25]:           0
# register[26]:           0
# register[27]:           0
# register[28]:           0
# register[29]:           0
# register[30]:           2
# register[31]:          11
#  p.PC_we 1,p.FD_we 1,p.DX_we 1,p.XM_we 1,p.MW_we 1
# <<<NEGEDGE>>>
# FETCH STAGE
# curr_PC,         92, next_PC:         93
# chosen PC:   92, PC_jump: 0, PC_branch: 0, intialize PC: 0
# p.F/D F instruction: 00000000000000000000000000000000
# DECODE STAGE
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# readAReg:  0, readBReg:  0, writeReg:  0
# EXECUTE STAGE
# DX_X_readA:          0, DX_X_readB:          0
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, real aluop: 00000, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
#  p.readAmemWrite: 0, p.readBmemWrite: 0, p.Amemequal: 1, p.Bmemequal: 1
# p.readAwbWrite: 0, p.readBwbWrite: 0, p.Awbequal: 1, p.Bwbequal: 1
# multdiv_status: 0, toggle_multdiv_status: 0, just_started: 0, multdiv_ready: 0, multdiv_ready,p.start_mul 0, p.start_div 0, p.my_multdiv.count 31
# data_operandA:           0, data_operandB:           0
# X_alu_result:          0, X_multdiv_result:          0
# ot equal: 0, less than: 0
# MEMORY STAGE
# XM_M_op:           0, XM_M_readB:           0
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# dmem_address    0, dmem_data_in:           0 or 00000000000000000000000000000000, dmem_we: 0, dmem_out: 00000000000000001011010100000100, M_bex_taken: 0, curr rstatus:          2, next rstatus:         15
# WRITEBACK STAGE
# MW_W_op:           0, MW_W_data: 00000000000000001011010100000100
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# reg_we: 0, write reg:  0, data           0
# register[1]:           4
# register[2]:           8
# register[3]:          24
# register[4]:          16
# register[5]:           0
# register[6]:           8
# register[7]:          64
# register[8]:           4
# register[9]:           0
# register[10]:         -10
# register[11]:         -11
# register[12]:          12
# register[13]:          12
# register[14]:           0
# register[15]:           0
# register[16]:           0
# register[17]:           0
# register[18]:           0
# register[19]:           0
# register[20]:        2047
# register[21]:           0
# register[22]:           0
# register[23]:           0
# register[24]:           0
# register[25]:           0
# register[26]:           0
# register[27]:           0
# register[28]:           0
# register[29]:           0
# register[30]:           2
# register[31]:          11
#  p.PC_we 1,p.FD_we 1,p.DX_we 1,p.XM_we 1,p.MW_we 1
# <<<NEGEDGE>>>
# FETCH STAGE
# curr_PC,         93, next_PC:         94
# chosen PC:   93, PC_jump: 0, PC_branch: 0, intialize PC: 0
# p.F/D F instruction: 00000000000000000000000000000000
# DECODE STAGE
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# readAReg:  0, readBReg:  0, writeReg:  0
# EXECUTE STAGE
# DX_X_readA:          0, DX_X_readB:          0
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, real aluop: 00000, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
#  p.readAmemWrite: 0, p.readBmemWrite: 0, p.Amemequal: 1, p.Bmemequal: 1
# p.readAwbWrite: 0, p.readBwbWrite: 0, p.Awbequal: 1, p.Bwbequal: 1
# multdiv_status: 0, toggle_multdiv_status: 0, just_started: 0, multdiv_ready: 0, multdiv_ready,p.start_mul 0, p.start_div 0, p.my_multdiv.count 31
# data_operandA:           0, data_operandB:           0
# X_alu_result:          0, X_multdiv_result:          0
# ot equal: 0, less than: 0
# MEMORY STAGE
# XM_M_op:           0, XM_M_readB:           0
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# dmem_address    0, dmem_data_in:           0 or 00000000000000000000000000000000, dmem_we: 0, dmem_out: 00000000000000001011010100000100, M_bex_taken: 0, curr rstatus:          2, next rstatus:         15
# WRITEBACK STAGE
# MW_W_op:           0, MW_W_data: 00000000000000001011010100000100
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# reg_we: 0, write reg:  0, data           0
# register[1]:           4
# register[2]:           8
# register[3]:          24
# register[4]:          16
# register[5]:           0
# register[6]:           8
# register[7]:          64
# register[8]:           4
# register[9]:           0
# register[10]:         -10
# register[11]:         -11
# register[12]:          12
# register[13]:          12
# register[14]:           0
# register[15]:           0
# register[16]:           0
# register[17]:           0
# register[18]:           0
# register[19]:           0
# register[20]:        2047
# register[21]:           0
# register[22]:           0
# register[23]:           0
# register[24]:           0
# register[25]:           0
# register[26]:           0
# register[27]:           0
# register[28]:           0
# register[29]:           0
# register[30]:           2
# register[31]:          11
#  p.PC_we 1,p.FD_we 1,p.DX_we 1,p.XM_we 1,p.MW_we 1
# <<<NEGEDGE>>>
# FETCH STAGE
# curr_PC,         94, next_PC:         95
# chosen PC:   94, PC_jump: 0, PC_branch: 0, intialize PC: 0
# p.F/D F instruction: 00000000000000000000000000000000
# DECODE STAGE
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# readAReg:  0, readBReg:  0, writeReg:  0
# EXECUTE STAGE
# DX_X_readA:          0, DX_X_readB:          0
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, real aluop: 00000, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
#  p.readAmemWrite: 0, p.readBmemWrite: 0, p.Amemequal: 1, p.Bmemequal: 1
# p.readAwbWrite: 0, p.readBwbWrite: 0, p.Awbequal: 1, p.Bwbequal: 1
# multdiv_status: 0, toggle_multdiv_status: 0, just_started: 0, multdiv_ready: 0, multdiv_ready,p.start_mul 0, p.start_div 0, p.my_multdiv.count 31
# data_operandA:           0, data_operandB:           0
# X_alu_result:          0, X_multdiv_result:          0
# ot equal: 0, less than: 0
# MEMORY STAGE
# XM_M_op:           0, XM_M_readB:           0
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# dmem_address    0, dmem_data_in:           0 or 00000000000000000000000000000000, dmem_we: 0, dmem_out: 00000000000000001011010100000100, M_bex_taken: 0, curr rstatus:          2, next rstatus:         15
# WRITEBACK STAGE
# MW_W_op:           0, MW_W_data: 00000000000000001011010100000100
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# reg_we: 0, write reg:  0, data           0
# register[1]:           4
# register[2]:           8
# register[3]:          24
# register[4]:          16
# register[5]:           0
# register[6]:           8
# register[7]:          64
# register[8]:           4
# register[9]:           0
# register[10]:         -10
# register[11]:         -11
# register[12]:          12
# register[13]:          12
# register[14]:           0
# register[15]:           0
# register[16]:           0
# register[17]:           0
# register[18]:           0
# register[19]:           0
# register[20]:        2047
# register[21]:           0
# register[22]:           0
# register[23]:           0
# register[24]:           0
# register[25]:           0
# register[26]:           0
# register[27]:           0
# register[28]:           0
# register[29]:           0
# register[30]:           2
# register[31]:          11
#  p.PC_we 1,p.FD_we 1,p.DX_we 1,p.XM_we 1,p.MW_we 1
# <<<NEGEDGE>>>
# FETCH STAGE
# curr_PC,         95, next_PC:         96
# chosen PC:   95, PC_jump: 0, PC_branch: 0, intialize PC: 0
# p.F/D F instruction: 00000000000000000000000000000000
# DECODE STAGE
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# readAReg:  0, readBReg:  0, writeReg:  0
# EXECUTE STAGE
# DX_X_readA:          0, DX_X_readB:          0
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, real aluop: 00000, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
#  p.readAmemWrite: 0, p.readBmemWrite: 0, p.Amemequal: 1, p.Bmemequal: 1
# p.readAwbWrite: 0, p.readBwbWrite: 0, p.Awbequal: 1, p.Bwbequal: 1
# multdiv_status: 0, toggle_multdiv_status: 0, just_started: 0, multdiv_ready: 0, multdiv_ready,p.start_mul 0, p.start_div 0, p.my_multdiv.count 31
# data_operandA:           0, data_operandB:           0
# X_alu_result:          0, X_multdiv_result:          0
# ot equal: 0, less than: 0
# MEMORY STAGE
# XM_M_op:           0, XM_M_readB:           0
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# dmem_address    0, dmem_data_in:           0 or 00000000000000000000000000000000, dmem_we: 0, dmem_out: 00000000000000001011010100000100, M_bex_taken: 0, curr rstatus:          2, next rstatus:         15
# WRITEBACK STAGE
# MW_W_op:           0, MW_W_data: 00000000000000001011010100000100
# opcode 00000, rd  0, rs  0, rt  0, shamt  0, aluop 00000, immediate       0, target 000000000000000000000000000
# instrucion: add: 1, addi: 0, sub: 0, and: 0, or: 0, sll: 0, sra: 0, mul: 0, div: 0, sw: 0, lw: 0, j: 0, bne: 0, jal: 0, jr: 0, blt: 0, bex: 0, setx: 0
# reg_we: 0, write reg:  0, data           0
# register[1]:           4
# register[2]:           8
# register[3]:          24
# register[4]:          16
# register[5]:           0
# register[6]:           8
# register[7]:          64
# register[8]:           4
# register[9]:           0
# register[10]:         -10
# register[11]:         -11
# register[12]:          12
# register[13]:          12
# register[14]:           0
# register[15]:           0
# register[16]:           0
# register[17]:           0
# register[18]:           0
# register[19]:           0
# register[20]:        2047
# register[21]:           0
# register[22]:           0
# register[23]:           0
# register[24]:           0
# register[25]:           0
# register[26]:           0
# register[27]:           0
# register[28]:           0
# register[29]:           0
# register[30]:           2
# register[31]:          11
#  p.PC_we 1,p.FD_we 1,p.DX_we 1,p.XM_we 1,p.MW_we 1
# ** Note: $stop    : C:/altera_lite/16.0/Projects/CP4_processor_klo14/CP4_processor_tb.v(21)
#    Time: 2020 ns  Iteration: 0  Instance: /CP4_processor_tb
# Break in Module CP4_processor_tb at C:/altera_lite/16.0/Projects/CP4_processor_klo14/CP4_processor_tb.v line 21
# End time: 14:35:10 on Apr 05,2017, Elapsed time: 0:00:25
# Errors: 0, Warnings: 2
